// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIFTFORGEDCOMMONTYPES_RIFTFORGED_NETWORKING_SHARED_H_
#define FLATBUFFERS_GENERATED_RIFTFORGEDCOMMONTYPES_RIFTFORGED_NETWORKING_SHARED_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace RiftForged {
namespace Networking {
namespace Shared {

struct Vec3;

struct Quaternion;

struct DamageInstance;

struct StunInstance;

struct BasicItemDescriptor;

enum DamageType : int8_t {
  DamageType_Physical = 0,
  DamageType_Radiant = 1,
  DamageType_Frost = 2,
  DamageType_Shock = 3,
  DamageType_Necrotic = 4,
  DamageType_Void = 5,
  DamageType_Cosmic = 6,
  DamageType_Poison = 7,
  DamageType_Nature = 8,
  DamageType_Lightning = 9,
  DamageType_Aetherial = 10,
  DamageType_MIN = DamageType_Physical,
  DamageType_MAX = DamageType_Aetherial
};

inline const DamageType (&EnumValuesDamageType())[11] {
  static const DamageType values[] = {
    DamageType_Physical,
    DamageType_Radiant,
    DamageType_Frost,
    DamageType_Shock,
    DamageType_Necrotic,
    DamageType_Void,
    DamageType_Cosmic,
    DamageType_Poison,
    DamageType_Nature,
    DamageType_Lightning,
    DamageType_Aetherial
  };
  return values;
}

inline const char * const *EnumNamesDamageType() {
  static const char * const names[12] = {
    "Physical",
    "Radiant",
    "Frost",
    "Shock",
    "Necrotic",
    "Void",
    "Cosmic",
    "Poison",
    "Nature",
    "Lightning",
    "Aetherial",
    nullptr
  };
  return names;
}

inline const char *EnumNameDamageType(DamageType e) {
  if (::flatbuffers::IsOutRange(e, DamageType_Physical, DamageType_Aetherial)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDamageType()[index];
}

enum AnimationState : uint32_t {
  AnimationState_Idle = 0,
  AnimationState_Running = 1,
  AnimationState_Walking = 2,
  AnimationState_Rifting_Start = 3,
  AnimationState_Rifting_Travel = 4,
  AnimationState_Rifting_End = 5,
  AnimationState_Attacking_Primary = 6,
  AnimationState_Stunned = 7,
  AnimationState_Dead = 8,
  AnimationState_Frozen = 9,
  AnimationState_MIN = AnimationState_Idle,
  AnimationState_MAX = AnimationState_Frozen
};

inline const AnimationState (&EnumValuesAnimationState())[10] {
  static const AnimationState values[] = {
    AnimationState_Idle,
    AnimationState_Running,
    AnimationState_Walking,
    AnimationState_Rifting_Start,
    AnimationState_Rifting_Travel,
    AnimationState_Rifting_End,
    AnimationState_Attacking_Primary,
    AnimationState_Stunned,
    AnimationState_Dead,
    AnimationState_Frozen
  };
  return values;
}

inline const char * const *EnumNamesAnimationState() {
  static const char * const names[11] = {
    "Idle",
    "Running",
    "Walking",
    "Rifting_Start",
    "Rifting_Travel",
    "Rifting_End",
    "Attacking_Primary",
    "Stunned",
    "Dead",
    "Frozen",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnimationState(AnimationState e) {
  if (::flatbuffers::IsOutRange(e, AnimationState_Idle, AnimationState_Frozen)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAnimationState()[index];
}

enum StunSeverity : int8_t {
  StunSeverity_Light = 0,
  StunSeverity_Medium = 1,
  StunSeverity_Heavy = 2,
  StunSeverity_Root = 3,
  StunSeverity_MIN = StunSeverity_Light,
  StunSeverity_MAX = StunSeverity_Root
};

inline const StunSeverity (&EnumValuesStunSeverity())[4] {
  static const StunSeverity values[] = {
    StunSeverity_Light,
    StunSeverity_Medium,
    StunSeverity_Heavy,
    StunSeverity_Root
  };
  return values;
}

inline const char * const *EnumNamesStunSeverity() {
  static const char * const names[5] = {
    "Light",
    "Medium",
    "Heavy",
    "Root",
    nullptr
  };
  return names;
}

inline const char *EnumNameStunSeverity(StunSeverity e) {
  if (::flatbuffers::IsOutRange(e, StunSeverity_Light, StunSeverity_Root)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStunSeverity()[index];
}

enum OperationResultCode : int16_t {
  OperationResultCode_Error_CooldownActive = -12,
  OperationResultCode_Error_NotEnoughResources_Shimmer = -11,
  OperationResultCode_Error_NotEnoughResources_Will = -10,
  OperationResultCode_Error_InvalidParameters = -4,
  OperationResultCode_Error_PermissionDenied = -3,
  OperationResultCode_Error_NotFound = -2,
  OperationResultCode_Error_Generic = -1,
  OperationResultCode_Success = 0,
  OperationResultCode_MIN = OperationResultCode_Error_CooldownActive,
  OperationResultCode_MAX = OperationResultCode_Success
};

inline const OperationResultCode (&EnumValuesOperationResultCode())[8] {
  static const OperationResultCode values[] = {
    OperationResultCode_Error_CooldownActive,
    OperationResultCode_Error_NotEnoughResources_Shimmer,
    OperationResultCode_Error_NotEnoughResources_Will,
    OperationResultCode_Error_InvalidParameters,
    OperationResultCode_Error_PermissionDenied,
    OperationResultCode_Error_NotFound,
    OperationResultCode_Error_Generic,
    OperationResultCode_Success
  };
  return values;
}

inline const char * const *EnumNamesOperationResultCode() {
  static const char * const names[14] = {
    "Error_CooldownActive",
    "Error_NotEnoughResources_Shimmer",
    "Error_NotEnoughResources_Will",
    "",
    "",
    "",
    "",
    "",
    "Error_InvalidParameters",
    "Error_PermissionDenied",
    "Error_NotFound",
    "Error_Generic",
    "Success",
    nullptr
  };
  return names;
}

inline const char *EnumNameOperationResultCode(OperationResultCode e) {
  if (::flatbuffers::IsOutRange(e, OperationResultCode_Error_CooldownActive, OperationResultCode_Success)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(OperationResultCode_Error_CooldownActive);
  return EnumNamesOperationResultCode()[index];
}

enum StatusEffectCategory : uint32_t {
  StatusEffectCategory_None = 0,
  StatusEffectCategory_Stun_Generic = 1,
  StatusEffectCategory_Stun_SolarDetonation = 2,
  StatusEffectCategory_Freeze_Generic = 10,
  StatusEffectCategory_Root_Generic = 11,
  StatusEffectCategory_Slow_Movement = 20,
  StatusEffectCategory_Slow_AttackSpeed = 21,
  StatusEffectCategory_Slow_CastSpeed = 22,
  StatusEffectCategory_MovementDelay_Generic = 25,
  StatusEffectCategory_AbilityCooldownDelay = 30,
  StatusEffectCategory_DoT_Physical = 50,
  StatusEffectCategory_DoT_Radiant = 51,
  StatusEffectCategory_DoT_Frost = 52,
  StatusEffectCategory_DoT_Shock = 53,
  StatusEffectCategory_DoT_Necrotic = 54,
  StatusEffectCategory_DoT_Void = 55,
  StatusEffectCategory_DoT_Cosmic = 56,
  StatusEffectCategory_DoT_Poison = 57,
  StatusEffectCategory_DoT_Nature = 58,
  StatusEffectCategory_DoT_Aetherial = 59,
  StatusEffectCategory_Debuff_DefenseReduction_Generic = 100,
  StatusEffectCategory_Debuff_ElementalResistanceReduction = 101,
  StatusEffectCategory_Debuff_AbilityEffectivenessReduction = 102,
  StatusEffectCategory_Debuff_HealingReduction = 103,
  StatusEffectCategory_MarkedForDamage_Generic = 110,
  StatusEffectCategory_Debuff_AwarenessReduced = 111,
  StatusEffectCategory_Debuff_DistractedByDecoy = 112,
  StatusEffectCategory_Buff_AttackPowerIncrease = 200,
  StatusEffectCategory_Buff_AbilityPowerIncrease = 201,
  StatusEffectCategory_Buff_AttackSpeedIncrease = 202,
  StatusEffectCategory_Buff_CastSpeedIncrease = 203,
  StatusEffectCategory_Buff_CriticalHitChanceIncrease = 204,
  StatusEffectCategory_Buff_CriticalHitDamageIncrease = 205,
  StatusEffectCategory_Buff_LifestealIncrease = 206,
  StatusEffectCategory_Buff_BonusDamageProc = 207,
  StatusEffectCategory_Buff_DamageReflection = 208,
  StatusEffectCategory_Buff_ExecuteInstantAttack = 209,
  StatusEffectCategory_Buff_AbilityDoubleCast = 210,
  StatusEffectCategory_Buff_DamageReduction_Generic = 300,
  StatusEffectCategory_Buff_DamageAbsorption_Shield = 301,
  StatusEffectCategory_Buff_MaxHPArmorIncrease = 302,
  StatusEffectCategory_Buff_ElementalResistanceIncrease = 303,
  StatusEffectCategory_Buff_StatusEffectResistance = 304,
  StatusEffectCategory_Buff_CCImmunity = 305,
  StatusEffectCategory_Buff_PhasingInvulnerability = 306,
  StatusEffectCategory_Buff_HealingIncrease = 307,
  StatusEffectCategory_Buff_HealOverTime_Generic = 308,
  StatusEffectCategory_Buff_MovementSpeedIncrease = 400,
  StatusEffectCategory_Buff_DodgeEnhancement = 401,
  StatusEffectCategory_Buff_Stealth = 402,
  StatusEffectCategory_Buff_MovementAcceleration = 403,
  StatusEffectCategory_Buff_EnergyCostReduction = 500,
  StatusEffectCategory_Buff_EnergyRecoveryIncrease = 501,
  StatusEffectCategory_Buff_EnergyRefundOnCast = 502,
  StatusEffectCategory_Buff_PassiveHPRecoveryIncrease = 503,
  StatusEffectCategory_Effect_ChilledGround = 600,
  StatusEffectCategory_Effect_CooldownReset_Movement = 601,
  StatusEffectCategory_Effect_CooldownReset_Abilities = 602,
  StatusEffectCategory_MIN = StatusEffectCategory_None,
  StatusEffectCategory_MAX = StatusEffectCategory_Effect_CooldownReset_Abilities
};

inline const StatusEffectCategory (&EnumValuesStatusEffectCategory())[58] {
  static const StatusEffectCategory values[] = {
    StatusEffectCategory_None,
    StatusEffectCategory_Stun_Generic,
    StatusEffectCategory_Stun_SolarDetonation,
    StatusEffectCategory_Freeze_Generic,
    StatusEffectCategory_Root_Generic,
    StatusEffectCategory_Slow_Movement,
    StatusEffectCategory_Slow_AttackSpeed,
    StatusEffectCategory_Slow_CastSpeed,
    StatusEffectCategory_MovementDelay_Generic,
    StatusEffectCategory_AbilityCooldownDelay,
    StatusEffectCategory_DoT_Physical,
    StatusEffectCategory_DoT_Radiant,
    StatusEffectCategory_DoT_Frost,
    StatusEffectCategory_DoT_Shock,
    StatusEffectCategory_DoT_Necrotic,
    StatusEffectCategory_DoT_Void,
    StatusEffectCategory_DoT_Cosmic,
    StatusEffectCategory_DoT_Poison,
    StatusEffectCategory_DoT_Nature,
    StatusEffectCategory_DoT_Aetherial,
    StatusEffectCategory_Debuff_DefenseReduction_Generic,
    StatusEffectCategory_Debuff_ElementalResistanceReduction,
    StatusEffectCategory_Debuff_AbilityEffectivenessReduction,
    StatusEffectCategory_Debuff_HealingReduction,
    StatusEffectCategory_MarkedForDamage_Generic,
    StatusEffectCategory_Debuff_AwarenessReduced,
    StatusEffectCategory_Debuff_DistractedByDecoy,
    StatusEffectCategory_Buff_AttackPowerIncrease,
    StatusEffectCategory_Buff_AbilityPowerIncrease,
    StatusEffectCategory_Buff_AttackSpeedIncrease,
    StatusEffectCategory_Buff_CastSpeedIncrease,
    StatusEffectCategory_Buff_CriticalHitChanceIncrease,
    StatusEffectCategory_Buff_CriticalHitDamageIncrease,
    StatusEffectCategory_Buff_LifestealIncrease,
    StatusEffectCategory_Buff_BonusDamageProc,
    StatusEffectCategory_Buff_DamageReflection,
    StatusEffectCategory_Buff_ExecuteInstantAttack,
    StatusEffectCategory_Buff_AbilityDoubleCast,
    StatusEffectCategory_Buff_DamageReduction_Generic,
    StatusEffectCategory_Buff_DamageAbsorption_Shield,
    StatusEffectCategory_Buff_MaxHPArmorIncrease,
    StatusEffectCategory_Buff_ElementalResistanceIncrease,
    StatusEffectCategory_Buff_StatusEffectResistance,
    StatusEffectCategory_Buff_CCImmunity,
    StatusEffectCategory_Buff_PhasingInvulnerability,
    StatusEffectCategory_Buff_HealingIncrease,
    StatusEffectCategory_Buff_HealOverTime_Generic,
    StatusEffectCategory_Buff_MovementSpeedIncrease,
    StatusEffectCategory_Buff_DodgeEnhancement,
    StatusEffectCategory_Buff_Stealth,
    StatusEffectCategory_Buff_MovementAcceleration,
    StatusEffectCategory_Buff_EnergyCostReduction,
    StatusEffectCategory_Buff_EnergyRecoveryIncrease,
    StatusEffectCategory_Buff_EnergyRefundOnCast,
    StatusEffectCategory_Buff_PassiveHPRecoveryIncrease,
    StatusEffectCategory_Effect_ChilledGround,
    StatusEffectCategory_Effect_CooldownReset_Movement,
    StatusEffectCategory_Effect_CooldownReset_Abilities
  };
  return values;
}

inline const char *EnumNameStatusEffectCategory(StatusEffectCategory e) {
  switch (e) {
    case StatusEffectCategory_None: return "None";
    case StatusEffectCategory_Stun_Generic: return "Stun_Generic";
    case StatusEffectCategory_Stun_SolarDetonation: return "Stun_SolarDetonation";
    case StatusEffectCategory_Freeze_Generic: return "Freeze_Generic";
    case StatusEffectCategory_Root_Generic: return "Root_Generic";
    case StatusEffectCategory_Slow_Movement: return "Slow_Movement";
    case StatusEffectCategory_Slow_AttackSpeed: return "Slow_AttackSpeed";
    case StatusEffectCategory_Slow_CastSpeed: return "Slow_CastSpeed";
    case StatusEffectCategory_MovementDelay_Generic: return "MovementDelay_Generic";
    case StatusEffectCategory_AbilityCooldownDelay: return "AbilityCooldownDelay";
    case StatusEffectCategory_DoT_Physical: return "DoT_Physical";
    case StatusEffectCategory_DoT_Radiant: return "DoT_Radiant";
    case StatusEffectCategory_DoT_Frost: return "DoT_Frost";
    case StatusEffectCategory_DoT_Shock: return "DoT_Shock";
    case StatusEffectCategory_DoT_Necrotic: return "DoT_Necrotic";
    case StatusEffectCategory_DoT_Void: return "DoT_Void";
    case StatusEffectCategory_DoT_Cosmic: return "DoT_Cosmic";
    case StatusEffectCategory_DoT_Poison: return "DoT_Poison";
    case StatusEffectCategory_DoT_Nature: return "DoT_Nature";
    case StatusEffectCategory_DoT_Aetherial: return "DoT_Aetherial";
    case StatusEffectCategory_Debuff_DefenseReduction_Generic: return "Debuff_DefenseReduction_Generic";
    case StatusEffectCategory_Debuff_ElementalResistanceReduction: return "Debuff_ElementalResistanceReduction";
    case StatusEffectCategory_Debuff_AbilityEffectivenessReduction: return "Debuff_AbilityEffectivenessReduction";
    case StatusEffectCategory_Debuff_HealingReduction: return "Debuff_HealingReduction";
    case StatusEffectCategory_MarkedForDamage_Generic: return "MarkedForDamage_Generic";
    case StatusEffectCategory_Debuff_AwarenessReduced: return "Debuff_AwarenessReduced";
    case StatusEffectCategory_Debuff_DistractedByDecoy: return "Debuff_DistractedByDecoy";
    case StatusEffectCategory_Buff_AttackPowerIncrease: return "Buff_AttackPowerIncrease";
    case StatusEffectCategory_Buff_AbilityPowerIncrease: return "Buff_AbilityPowerIncrease";
    case StatusEffectCategory_Buff_AttackSpeedIncrease: return "Buff_AttackSpeedIncrease";
    case StatusEffectCategory_Buff_CastSpeedIncrease: return "Buff_CastSpeedIncrease";
    case StatusEffectCategory_Buff_CriticalHitChanceIncrease: return "Buff_CriticalHitChanceIncrease";
    case StatusEffectCategory_Buff_CriticalHitDamageIncrease: return "Buff_CriticalHitDamageIncrease";
    case StatusEffectCategory_Buff_LifestealIncrease: return "Buff_LifestealIncrease";
    case StatusEffectCategory_Buff_BonusDamageProc: return "Buff_BonusDamageProc";
    case StatusEffectCategory_Buff_DamageReflection: return "Buff_DamageReflection";
    case StatusEffectCategory_Buff_ExecuteInstantAttack: return "Buff_ExecuteInstantAttack";
    case StatusEffectCategory_Buff_AbilityDoubleCast: return "Buff_AbilityDoubleCast";
    case StatusEffectCategory_Buff_DamageReduction_Generic: return "Buff_DamageReduction_Generic";
    case StatusEffectCategory_Buff_DamageAbsorption_Shield: return "Buff_DamageAbsorption_Shield";
    case StatusEffectCategory_Buff_MaxHPArmorIncrease: return "Buff_MaxHPArmorIncrease";
    case StatusEffectCategory_Buff_ElementalResistanceIncrease: return "Buff_ElementalResistanceIncrease";
    case StatusEffectCategory_Buff_StatusEffectResistance: return "Buff_StatusEffectResistance";
    case StatusEffectCategory_Buff_CCImmunity: return "Buff_CCImmunity";
    case StatusEffectCategory_Buff_PhasingInvulnerability: return "Buff_PhasingInvulnerability";
    case StatusEffectCategory_Buff_HealingIncrease: return "Buff_HealingIncrease";
    case StatusEffectCategory_Buff_HealOverTime_Generic: return "Buff_HealOverTime_Generic";
    case StatusEffectCategory_Buff_MovementSpeedIncrease: return "Buff_MovementSpeedIncrease";
    case StatusEffectCategory_Buff_DodgeEnhancement: return "Buff_DodgeEnhancement";
    case StatusEffectCategory_Buff_Stealth: return "Buff_Stealth";
    case StatusEffectCategory_Buff_MovementAcceleration: return "Buff_MovementAcceleration";
    case StatusEffectCategory_Buff_EnergyCostReduction: return "Buff_EnergyCostReduction";
    case StatusEffectCategory_Buff_EnergyRecoveryIncrease: return "Buff_EnergyRecoveryIncrease";
    case StatusEffectCategory_Buff_EnergyRefundOnCast: return "Buff_EnergyRefundOnCast";
    case StatusEffectCategory_Buff_PassiveHPRecoveryIncrease: return "Buff_PassiveHPRecoveryIncrease";
    case StatusEffectCategory_Effect_ChilledGround: return "Effect_ChilledGround";
    case StatusEffectCategory_Effect_CooldownReset_Movement: return "Effect_CooldownReset_Movement";
    case StatusEffectCategory_Effect_CooldownReset_Abilities: return "Effect_CooldownReset_Abilities";
    default: return "";
  }
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Quaternion FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Quaternion()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Quaternion(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Quaternion, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) DamageInstance FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t amount_;
  int8_t type_;
  uint8_t is_crit_;
  int16_t padding0__;

 public:
  DamageInstance()
      : amount_(0),
        type_(0),
        is_crit_(0),
        padding0__(0) {
    (void)padding0__;
  }
  DamageInstance(int32_t _amount, RiftForged::Networking::Shared::DamageType _type, bool _is_crit)
      : amount_(::flatbuffers::EndianScalar(_amount)),
        type_(::flatbuffers::EndianScalar(static_cast<int8_t>(_type))),
        is_crit_(::flatbuffers::EndianScalar(static_cast<uint8_t>(_is_crit))),
        padding0__(0) {
    (void)padding0__;
  }
  int32_t amount() const {
    return ::flatbuffers::EndianScalar(amount_);
  }
  RiftForged::Networking::Shared::DamageType type() const {
    return static_cast<RiftForged::Networking::Shared::DamageType>(::flatbuffers::EndianScalar(type_));
  }
  bool is_crit() const {
    return ::flatbuffers::EndianScalar(is_crit_) != 0;
  }
};
FLATBUFFERS_STRUCT_END(DamageInstance, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) StunInstance FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t severity_;
  int8_t padding0__;  int16_t padding1__;
  uint32_t duration_ms_;

 public:
  StunInstance()
      : severity_(0),
        padding0__(0),
        padding1__(0),
        duration_ms_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  StunInstance(RiftForged::Networking::Shared::StunSeverity _severity, uint32_t _duration_ms)
      : severity_(::flatbuffers::EndianScalar(static_cast<int8_t>(_severity))),
        padding0__(0),
        padding1__(0),
        duration_ms_(::flatbuffers::EndianScalar(_duration_ms)) {
    (void)padding0__;
    (void)padding1__;
  }
  RiftForged::Networking::Shared::StunSeverity severity() const {
    return static_cast<RiftForged::Networking::Shared::StunSeverity>(::flatbuffers::EndianScalar(severity_));
  }
  uint32_t duration_ms() const {
    return ::flatbuffers::EndianScalar(duration_ms_);
  }
};
FLATBUFFERS_STRUCT_END(StunInstance, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BasicItemDescriptor FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t item_definition_id_;
  uint32_t quantity_;

 public:
  BasicItemDescriptor()
      : item_definition_id_(0),
        quantity_(0) {
  }
  BasicItemDescriptor(uint32_t _item_definition_id, uint32_t _quantity)
      : item_definition_id_(::flatbuffers::EndianScalar(_item_definition_id)),
        quantity_(::flatbuffers::EndianScalar(_quantity)) {
  }
  uint32_t item_definition_id() const {
    return ::flatbuffers::EndianScalar(item_definition_id_);
  }
  uint32_t quantity() const {
    return ::flatbuffers::EndianScalar(quantity_);
  }
};
FLATBUFFERS_STRUCT_END(BasicItemDescriptor, 8);

}  // namespace Shared
}  // namespace Networking
}  // namespace RiftForged

#endif  // FLATBUFFERS_GENERATED_RIFTFORGEDCOMMONTYPES_RIFTFORGED_NETWORKING_SHARED_H_
