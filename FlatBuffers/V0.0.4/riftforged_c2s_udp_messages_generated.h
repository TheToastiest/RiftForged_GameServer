// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIFTFORGEDC2SUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_C2S_H_
#define FLATBUFFERS_GENERATED_RIFTFORGEDC2SUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_C2S_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "riftforged_common_types_generated.h"

namespace RiftForged {
namespace Networking {
namespace UDP {
namespace C2S {

struct C2S_MovementInputMsg;
struct C2S_MovementInputMsgBuilder;
struct C2S_MovementInputMsgT;

struct C2S_TurnIntentMsg;
struct C2S_TurnIntentMsgBuilder;
struct C2S_TurnIntentMsgT;

struct C2S_RiftStepActivationMsg;
struct C2S_RiftStepActivationMsgBuilder;
struct C2S_RiftStepActivationMsgT;

struct C2S_BasicAttackIntentMsg;
struct C2S_BasicAttackIntentMsgBuilder;
struct C2S_BasicAttackIntentMsgT;

struct C2S_UseAbilityMsg;
struct C2S_UseAbilityMsgBuilder;
struct C2S_UseAbilityMsgT;

struct C2S_PingMsg;
struct C2S_PingMsgBuilder;
struct C2S_PingMsgT;

struct C2S_JoinRequestMsg;
struct C2S_JoinRequestMsgBuilder;
struct C2S_JoinRequestMsgT;

struct Root_C2S_UDP_Message;
struct Root_C2S_UDP_MessageBuilder;
struct Root_C2S_UDP_MessageT;

enum RiftStepDirectionalIntent : int8_t {
  RiftStepDirectionalIntent_Default_Backward = 0,
  RiftStepDirectionalIntent_Intentional_Forward = 1,
  RiftStepDirectionalIntent_Intentional_Backward = 2,
  RiftStepDirectionalIntent_Intentional_Left = 3,
  RiftStepDirectionalIntent_Intentional_Right = 4,
  RiftStepDirectionalIntent_MIN = RiftStepDirectionalIntent_Default_Backward,
  RiftStepDirectionalIntent_MAX = RiftStepDirectionalIntent_Intentional_Right
};

inline const RiftStepDirectionalIntent (&EnumValuesRiftStepDirectionalIntent())[5] {
  static const RiftStepDirectionalIntent values[] = {
    RiftStepDirectionalIntent_Default_Backward,
    RiftStepDirectionalIntent_Intentional_Forward,
    RiftStepDirectionalIntent_Intentional_Backward,
    RiftStepDirectionalIntent_Intentional_Left,
    RiftStepDirectionalIntent_Intentional_Right
  };
  return values;
}

inline const char * const *EnumNamesRiftStepDirectionalIntent() {
  static const char * const names[6] = {
    "Default_Backward",
    "Intentional_Forward",
    "Intentional_Backward",
    "Intentional_Left",
    "Intentional_Right",
    nullptr
  };
  return names;
}

inline const char *EnumNameRiftStepDirectionalIntent(RiftStepDirectionalIntent e) {
  if (::flatbuffers::IsOutRange(e, RiftStepDirectionalIntent_Default_Backward, RiftStepDirectionalIntent_Intentional_Right)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRiftStepDirectionalIntent()[index];
}

enum C2S_UDP_Payload : uint8_t {
  C2S_UDP_Payload_NONE = 0,
  C2S_UDP_Payload_MovementInput = 1,
  C2S_UDP_Payload_TurnIntent = 2,
  C2S_UDP_Payload_RiftStepActivation = 3,
  C2S_UDP_Payload_BasicAttackIntent = 4,
  C2S_UDP_Payload_UseAbility = 5,
  C2S_UDP_Payload_Ping = 6,
  C2S_UDP_Payload_JoinRequest = 7,
  C2S_UDP_Payload_MIN = C2S_UDP_Payload_NONE,
  C2S_UDP_Payload_MAX = C2S_UDP_Payload_JoinRequest
};

inline const C2S_UDP_Payload (&EnumValuesC2S_UDP_Payload())[8] {
  static const C2S_UDP_Payload values[] = {
    C2S_UDP_Payload_NONE,
    C2S_UDP_Payload_MovementInput,
    C2S_UDP_Payload_TurnIntent,
    C2S_UDP_Payload_RiftStepActivation,
    C2S_UDP_Payload_BasicAttackIntent,
    C2S_UDP_Payload_UseAbility,
    C2S_UDP_Payload_Ping,
    C2S_UDP_Payload_JoinRequest
  };
  return values;
}

inline const char * const *EnumNamesC2S_UDP_Payload() {
  static const char * const names[9] = {
    "NONE",
    "MovementInput",
    "TurnIntent",
    "RiftStepActivation",
    "BasicAttackIntent",
    "UseAbility",
    "Ping",
    "JoinRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameC2S_UDP_Payload(C2S_UDP_Payload e) {
  if (::flatbuffers::IsOutRange(e, C2S_UDP_Payload_NONE, C2S_UDP_Payload_JoinRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesC2S_UDP_Payload()[index];
}

template<typename T> struct C2S_UDP_PayloadTraits {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_NONE;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_MovementInput;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_TurnIntent;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_RiftStepActivation;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_BasicAttackIntent;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_UseAbility;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_PingMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_Ping;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_JoinRequest;
};

template<typename T> struct C2S_UDP_PayloadUnionTraits {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_NONE;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_MovementInput;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_TurnIntent;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_RiftStepActivation;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_BasicAttackIntent;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_UseAbility;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_PingMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_Ping;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_JoinRequest;
};

struct C2S_UDP_PayloadUnion {
  C2S_UDP_Payload type;
  void *value;

  C2S_UDP_PayloadUnion() : type(C2S_UDP_Payload_NONE), value(nullptr) {}
  C2S_UDP_PayloadUnion(C2S_UDP_PayloadUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(C2S_UDP_Payload_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  C2S_UDP_PayloadUnion(const C2S_UDP_PayloadUnion &);
  C2S_UDP_PayloadUnion &operator=(const C2S_UDP_PayloadUnion &u)
    { C2S_UDP_PayloadUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  C2S_UDP_PayloadUnion &operator=(C2S_UDP_PayloadUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~C2S_UDP_PayloadUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = C2S_UDP_PayloadUnionTraits<RT>::enum_value;
    if (type != C2S_UDP_Payload_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, C2S_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *AsMovementInput() {
    return type == C2S_UDP_Payload_MovementInput ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *AsMovementInput() const {
    return type == C2S_UDP_Payload_MovementInput ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *AsTurnIntent() {
    return type == C2S_UDP_Payload_TurnIntent ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *AsTurnIntent() const {
    return type == C2S_UDP_Payload_TurnIntent ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *AsRiftStepActivation() {
    return type == C2S_UDP_Payload_RiftStepActivation ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *AsRiftStepActivation() const {
    return type == C2S_UDP_Payload_RiftStepActivation ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *AsBasicAttackIntent() {
    return type == C2S_UDP_Payload_BasicAttackIntent ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *AsBasicAttackIntent() const {
    return type == C2S_UDP_Payload_BasicAttackIntent ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *AsUseAbility() {
    return type == C2S_UDP_Payload_UseAbility ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *AsUseAbility() const {
    return type == C2S_UDP_Payload_UseAbility ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_PingMsgT *AsPing() {
    return type == C2S_UDP_Payload_Ping ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_PingMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_PingMsgT *AsPing() const {
    return type == C2S_UDP_Payload_Ping ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_PingMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *AsJoinRequest() {
    return type == C2S_UDP_Payload_JoinRequest ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *AsJoinRequest() const {
    return type == C2S_UDP_Payload_JoinRequest ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *>(value) : nullptr;
  }
};

bool VerifyC2S_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, C2S_UDP_Payload type);
bool VerifyC2S_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct C2S_MovementInputMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_MovementInputMsg TableType;
  uint64_t client_timestamp_ms = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> local_direction_intent{};
  bool is_sprinting = false;
  C2S_MovementInputMsgT() = default;
  C2S_MovementInputMsgT(const C2S_MovementInputMsgT &o);
  C2S_MovementInputMsgT(C2S_MovementInputMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  C2S_MovementInputMsgT &operator=(C2S_MovementInputMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct C2S_MovementInputMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_MovementInputMsgT NativeTableType;
  typedef C2S_MovementInputMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_LOCAL_DIRECTION_INTENT = 6,
    VT_IS_SPRINTING = 8
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *local_direction_intent() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_LOCAL_DIRECTION_INTENT);
  }
  bool is_sprinting() const {
    return GetField<uint8_t>(VT_IS_SPRINTING, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyFieldRequired<RiftForged::Networking::Shared::Vec3>(verifier, VT_LOCAL_DIRECTION_INTENT, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_SPRINTING, 1) &&
           verifier.EndTable();
  }
  C2S_MovementInputMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_MovementInputMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_MovementInputMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_MovementInputMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_MovementInputMsgBuilder {
  typedef C2S_MovementInputMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_MovementInputMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_local_direction_intent(const RiftForged::Networking::Shared::Vec3 *local_direction_intent) {
    fbb_.AddStruct(C2S_MovementInputMsg::VT_LOCAL_DIRECTION_INTENT, local_direction_intent);
  }
  void add_is_sprinting(bool is_sprinting) {
    fbb_.AddElement<uint8_t>(C2S_MovementInputMsg::VT_IS_SPRINTING, static_cast<uint8_t>(is_sprinting), 0);
  }
  explicit C2S_MovementInputMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_MovementInputMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_MovementInputMsg>(end);
    fbb_.Required(o, C2S_MovementInputMsg::VT_LOCAL_DIRECTION_INTENT);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_MovementInputMsg> CreateC2S_MovementInputMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    const RiftForged::Networking::Shared::Vec3 *local_direction_intent = nullptr,
    bool is_sprinting = false) {
  C2S_MovementInputMsgBuilder builder_(_fbb);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_local_direction_intent(local_direction_intent);
  builder_.add_is_sprinting(is_sprinting);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_MovementInputMsg> CreateC2S_MovementInputMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_MovementInputMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_TurnIntentMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_TurnIntentMsg TableType;
  uint64_t client_timestamp_ms = 0;
  float turn_delta_degrees = 0.0f;
};

struct C2S_TurnIntentMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_TurnIntentMsgT NativeTableType;
  typedef C2S_TurnIntentMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_TURN_DELTA_DEGREES = 6
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  float turn_delta_degrees() const {
    return GetField<float>(VT_TURN_DELTA_DEGREES, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyField<float>(verifier, VT_TURN_DELTA_DEGREES, 4) &&
           verifier.EndTable();
  }
  C2S_TurnIntentMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_TurnIntentMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_TurnIntentMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_TurnIntentMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_TurnIntentMsgBuilder {
  typedef C2S_TurnIntentMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_TurnIntentMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_turn_delta_degrees(float turn_delta_degrees) {
    fbb_.AddElement<float>(C2S_TurnIntentMsg::VT_TURN_DELTA_DEGREES, turn_delta_degrees, 0.0f);
  }
  explicit C2S_TurnIntentMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_TurnIntentMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_TurnIntentMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_TurnIntentMsg> CreateC2S_TurnIntentMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    float turn_delta_degrees = 0.0f) {
  C2S_TurnIntentMsgBuilder builder_(_fbb);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_turn_delta_degrees(turn_delta_degrees);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_TurnIntentMsg> CreateC2S_TurnIntentMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_TurnIntentMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_RiftStepActivationMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_RiftStepActivationMsg TableType;
  uint64_t client_timestamp_ms = 0;
  RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent directional_intent = RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent_Default_Backward;
};

struct C2S_RiftStepActivationMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_RiftStepActivationMsgT NativeTableType;
  typedef C2S_RiftStepActivationMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_DIRECTIONAL_INTENT = 6
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent directional_intent() const {
    return static_cast<RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent>(GetField<int8_t>(VT_DIRECTIONAL_INTENT, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyField<int8_t>(verifier, VT_DIRECTIONAL_INTENT, 1) &&
           verifier.EndTable();
  }
  C2S_RiftStepActivationMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_RiftStepActivationMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_RiftStepActivationMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_RiftStepActivationMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_RiftStepActivationMsgBuilder {
  typedef C2S_RiftStepActivationMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_RiftStepActivationMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_directional_intent(RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent directional_intent) {
    fbb_.AddElement<int8_t>(C2S_RiftStepActivationMsg::VT_DIRECTIONAL_INTENT, static_cast<int8_t>(directional_intent), 0);
  }
  explicit C2S_RiftStepActivationMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_RiftStepActivationMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_RiftStepActivationMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_RiftStepActivationMsg> CreateC2S_RiftStepActivationMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent directional_intent = RiftForged::Networking::UDP::C2S::RiftStepDirectionalIntent_Default_Backward) {
  C2S_RiftStepActivationMsgBuilder builder_(_fbb);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_directional_intent(directional_intent);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_RiftStepActivationMsg> CreateC2S_RiftStepActivationMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_RiftStepActivationMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_BasicAttackIntentMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_BasicAttackIntentMsg TableType;
  uint64_t client_timestamp_ms = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> aim_direction{};
  uint64_t target_entity_id = 0;
  C2S_BasicAttackIntentMsgT() = default;
  C2S_BasicAttackIntentMsgT(const C2S_BasicAttackIntentMsgT &o);
  C2S_BasicAttackIntentMsgT(C2S_BasicAttackIntentMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  C2S_BasicAttackIntentMsgT &operator=(C2S_BasicAttackIntentMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct C2S_BasicAttackIntentMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_BasicAttackIntentMsgT NativeTableType;
  typedef C2S_BasicAttackIntentMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_AIM_DIRECTION = 6,
    VT_TARGET_ENTITY_ID = 8
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *aim_direction() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_AIM_DIRECTION);
  }
  uint64_t target_entity_id() const {
    return GetField<uint64_t>(VT_TARGET_ENTITY_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyFieldRequired<RiftForged::Networking::Shared::Vec3>(verifier, VT_AIM_DIRECTION, 4) &&
           VerifyField<uint64_t>(verifier, VT_TARGET_ENTITY_ID, 8) &&
           verifier.EndTable();
  }
  C2S_BasicAttackIntentMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_BasicAttackIntentMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_BasicAttackIntentMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_BasicAttackIntentMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_BasicAttackIntentMsgBuilder {
  typedef C2S_BasicAttackIntentMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_BasicAttackIntentMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_aim_direction(const RiftForged::Networking::Shared::Vec3 *aim_direction) {
    fbb_.AddStruct(C2S_BasicAttackIntentMsg::VT_AIM_DIRECTION, aim_direction);
  }
  void add_target_entity_id(uint64_t target_entity_id) {
    fbb_.AddElement<uint64_t>(C2S_BasicAttackIntentMsg::VT_TARGET_ENTITY_ID, target_entity_id, 0);
  }
  explicit C2S_BasicAttackIntentMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_BasicAttackIntentMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_BasicAttackIntentMsg>(end);
    fbb_.Required(o, C2S_BasicAttackIntentMsg::VT_AIM_DIRECTION);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_BasicAttackIntentMsg> CreateC2S_BasicAttackIntentMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    const RiftForged::Networking::Shared::Vec3 *aim_direction = nullptr,
    uint64_t target_entity_id = 0) {
  C2S_BasicAttackIntentMsgBuilder builder_(_fbb);
  builder_.add_target_entity_id(target_entity_id);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_aim_direction(aim_direction);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_BasicAttackIntentMsg> CreateC2S_BasicAttackIntentMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_BasicAttackIntentMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_UseAbilityMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_UseAbilityMsg TableType;
  uint64_t client_timestamp_ms = 0;
  uint32_t ability_id = 0;
  uint64_t target_entity_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> target_position{};
  C2S_UseAbilityMsgT() = default;
  C2S_UseAbilityMsgT(const C2S_UseAbilityMsgT &o);
  C2S_UseAbilityMsgT(C2S_UseAbilityMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  C2S_UseAbilityMsgT &operator=(C2S_UseAbilityMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct C2S_UseAbilityMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_UseAbilityMsgT NativeTableType;
  typedef C2S_UseAbilityMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_ABILITY_ID = 6,
    VT_TARGET_ENTITY_ID = 8,
    VT_TARGET_POSITION = 10
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  uint32_t ability_id() const {
    return GetField<uint32_t>(VT_ABILITY_ID, 0);
  }
  uint64_t target_entity_id() const {
    return GetField<uint64_t>(VT_TARGET_ENTITY_ID, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *target_position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_TARGET_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyField<uint32_t>(verifier, VT_ABILITY_ID, 4) &&
           VerifyField<uint64_t>(verifier, VT_TARGET_ENTITY_ID, 8) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_TARGET_POSITION, 4) &&
           verifier.EndTable();
  }
  C2S_UseAbilityMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_UseAbilityMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_UseAbilityMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_UseAbilityMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_UseAbilityMsgBuilder {
  typedef C2S_UseAbilityMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_UseAbilityMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_ability_id(uint32_t ability_id) {
    fbb_.AddElement<uint32_t>(C2S_UseAbilityMsg::VT_ABILITY_ID, ability_id, 0);
  }
  void add_target_entity_id(uint64_t target_entity_id) {
    fbb_.AddElement<uint64_t>(C2S_UseAbilityMsg::VT_TARGET_ENTITY_ID, target_entity_id, 0);
  }
  void add_target_position(const RiftForged::Networking::Shared::Vec3 *target_position) {
    fbb_.AddStruct(C2S_UseAbilityMsg::VT_TARGET_POSITION, target_position);
  }
  explicit C2S_UseAbilityMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_UseAbilityMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_UseAbilityMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_UseAbilityMsg> CreateC2S_UseAbilityMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    uint32_t ability_id = 0,
    uint64_t target_entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *target_position = nullptr) {
  C2S_UseAbilityMsgBuilder builder_(_fbb);
  builder_.add_target_entity_id(target_entity_id);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_target_position(target_position);
  builder_.add_ability_id(ability_id);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_UseAbilityMsg> CreateC2S_UseAbilityMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_UseAbilityMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_PingMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_PingMsg TableType;
  uint64_t client_timestamp_ms = 0;
};

struct C2S_PingMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_PingMsgT NativeTableType;
  typedef C2S_PingMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           verifier.EndTable();
  }
  C2S_PingMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_PingMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_PingMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_PingMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_PingMsgBuilder {
  typedef C2S_PingMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_PingMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  explicit C2S_PingMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_PingMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_PingMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_PingMsg> CreateC2S_PingMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0) {
  C2S_PingMsgBuilder builder_(_fbb);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_PingMsg> CreateC2S_PingMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_PingMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct C2S_JoinRequestMsgT : public ::flatbuffers::NativeTable {
  typedef C2S_JoinRequestMsg TableType;
  uint64_t client_timestamp_ms = 0;
  std::string character_id_to_load{};
};

struct C2S_JoinRequestMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_JoinRequestMsgT NativeTableType;
  typedef C2S_JoinRequestMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_CHARACTER_ID_TO_LOAD = 6
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  const ::flatbuffers::String *character_id_to_load() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHARACTER_ID_TO_LOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyOffset(verifier, VT_CHARACTER_ID_TO_LOAD) &&
           verifier.VerifyString(character_id_to_load()) &&
           verifier.EndTable();
  }
  C2S_JoinRequestMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_JoinRequestMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_JoinRequestMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_JoinRequestMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_JoinRequestMsgBuilder {
  typedef C2S_JoinRequestMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(C2S_JoinRequestMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_character_id_to_load(::flatbuffers::Offset<::flatbuffers::String> character_id_to_load) {
    fbb_.AddOffset(C2S_JoinRequestMsg::VT_CHARACTER_ID_TO_LOAD, character_id_to_load);
  }
  explicit C2S_JoinRequestMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_JoinRequestMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_JoinRequestMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_JoinRequestMsg> CreateC2S_JoinRequestMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    ::flatbuffers::Offset<::flatbuffers::String> character_id_to_load = 0) {
  C2S_JoinRequestMsgBuilder builder_(_fbb);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  builder_.add_character_id_to_load(character_id_to_load);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<C2S_JoinRequestMsg> CreateC2S_JoinRequestMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    const char *character_id_to_load = nullptr) {
  auto character_id_to_load__ = character_id_to_load ? _fbb.CreateString(character_id_to_load) : 0;
  return RiftForged::Networking::UDP::C2S::CreateC2S_JoinRequestMsg(
      _fbb,
      client_timestamp_ms,
      character_id_to_load__);
}

::flatbuffers::Offset<C2S_JoinRequestMsg> CreateC2S_JoinRequestMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_JoinRequestMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Root_C2S_UDP_MessageT : public ::flatbuffers::NativeTable {
  typedef Root_C2S_UDP_Message TableType;
  RiftForged::Networking::UDP::C2S::C2S_UDP_PayloadUnion payload{};
};

struct Root_C2S_UDP_Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Root_C2S_UDP_MessageT NativeTableType;
  typedef Root_C2S_UDP_MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type() const {
    return static_cast<RiftForged::Networking::UDP::C2S::C2S_UDP_Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg *payload_as_MovementInput() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_MovementInput ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg *payload_as_TurnIntent() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_TurnIntent ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg *payload_as_RiftStepActivation() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_RiftStepActivation ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg *payload_as_BasicAttackIntent() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_BasicAttackIntent ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg *payload_as_UseAbility() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_UseAbility ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_PingMsg *payload_as_Ping() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_Ping ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_PingMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg *payload_as_JoinRequest() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_JoinRequest ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_PAYLOAD) &&
           VerifyC2S_UDP_Payload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
  Root_C2S_UDP_MessageT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Root_C2S_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Root_C2S_UDP_Message> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg>() const {
  return payload_as_MovementInput();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg>() const {
  return payload_as_TurnIntent();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg>() const {
  return payload_as_RiftStepActivation();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg>() const {
  return payload_as_BasicAttackIntent();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg>() const {
  return payload_as_UseAbility();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_PingMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_PingMsg>() const {
  return payload_as_Ping();
}

template<> inline const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg>() const {
  return payload_as_JoinRequest();
}

struct Root_C2S_UDP_MessageBuilder {
  typedef Root_C2S_UDP_Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type) {
    fbb_.AddElement<uint8_t>(Root_C2S_UDP_Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root_C2S_UDP_Message::VT_PAYLOAD, payload);
  }
  explicit Root_C2S_UDP_MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Root_C2S_UDP_Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Root_C2S_UDP_Message>(end);
    fbb_.Required(o, Root_C2S_UDP_Message::VT_PAYLOAD);
    return o;
  }
};

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type = RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  Root_C2S_UDP_MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline C2S_MovementInputMsgT::C2S_MovementInputMsgT(const C2S_MovementInputMsgT &o)
      : client_timestamp_ms(o.client_timestamp_ms),
        local_direction_intent((o.local_direction_intent) ? new RiftForged::Networking::Shared::Vec3(*o.local_direction_intent) : nullptr),
        is_sprinting(o.is_sprinting) {
}

inline C2S_MovementInputMsgT &C2S_MovementInputMsgT::operator=(C2S_MovementInputMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(client_timestamp_ms, o.client_timestamp_ms);
  std::swap(local_direction_intent, o.local_direction_intent);
  std::swap(is_sprinting, o.is_sprinting);
  return *this;
}

inline C2S_MovementInputMsgT *C2S_MovementInputMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_MovementInputMsgT>(new C2S_MovementInputMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_MovementInputMsg::UnPackTo(C2S_MovementInputMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = local_direction_intent(); if (_e) _o->local_direction_intent = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = is_sprinting(); _o->is_sprinting = _e; }
}

inline ::flatbuffers::Offset<C2S_MovementInputMsg> C2S_MovementInputMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_MovementInputMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_MovementInputMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_MovementInputMsg> CreateC2S_MovementInputMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_MovementInputMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_MovementInputMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _local_direction_intent = _o->local_direction_intent ? _o->local_direction_intent.get() : nullptr;
  auto _is_sprinting = _o->is_sprinting;
  return RiftForged::Networking::UDP::C2S::CreateC2S_MovementInputMsg(
      _fbb,
      _client_timestamp_ms,
      _local_direction_intent,
      _is_sprinting);
}

inline C2S_TurnIntentMsgT *C2S_TurnIntentMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_TurnIntentMsgT>(new C2S_TurnIntentMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_TurnIntentMsg::UnPackTo(C2S_TurnIntentMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = turn_delta_degrees(); _o->turn_delta_degrees = _e; }
}

inline ::flatbuffers::Offset<C2S_TurnIntentMsg> C2S_TurnIntentMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_TurnIntentMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_TurnIntentMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_TurnIntentMsg> CreateC2S_TurnIntentMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_TurnIntentMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_TurnIntentMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _turn_delta_degrees = _o->turn_delta_degrees;
  return RiftForged::Networking::UDP::C2S::CreateC2S_TurnIntentMsg(
      _fbb,
      _client_timestamp_ms,
      _turn_delta_degrees);
}

inline C2S_RiftStepActivationMsgT *C2S_RiftStepActivationMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_RiftStepActivationMsgT>(new C2S_RiftStepActivationMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_RiftStepActivationMsg::UnPackTo(C2S_RiftStepActivationMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = directional_intent(); _o->directional_intent = _e; }
}

inline ::flatbuffers::Offset<C2S_RiftStepActivationMsg> C2S_RiftStepActivationMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_RiftStepActivationMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_RiftStepActivationMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_RiftStepActivationMsg> CreateC2S_RiftStepActivationMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_RiftStepActivationMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_RiftStepActivationMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _directional_intent = _o->directional_intent;
  return RiftForged::Networking::UDP::C2S::CreateC2S_RiftStepActivationMsg(
      _fbb,
      _client_timestamp_ms,
      _directional_intent);
}

inline C2S_BasicAttackIntentMsgT::C2S_BasicAttackIntentMsgT(const C2S_BasicAttackIntentMsgT &o)
      : client_timestamp_ms(o.client_timestamp_ms),
        aim_direction((o.aim_direction) ? new RiftForged::Networking::Shared::Vec3(*o.aim_direction) : nullptr),
        target_entity_id(o.target_entity_id) {
}

inline C2S_BasicAttackIntentMsgT &C2S_BasicAttackIntentMsgT::operator=(C2S_BasicAttackIntentMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(client_timestamp_ms, o.client_timestamp_ms);
  std::swap(aim_direction, o.aim_direction);
  std::swap(target_entity_id, o.target_entity_id);
  return *this;
}

inline C2S_BasicAttackIntentMsgT *C2S_BasicAttackIntentMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_BasicAttackIntentMsgT>(new C2S_BasicAttackIntentMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_BasicAttackIntentMsg::UnPackTo(C2S_BasicAttackIntentMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = aim_direction(); if (_e) _o->aim_direction = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = target_entity_id(); _o->target_entity_id = _e; }
}

inline ::flatbuffers::Offset<C2S_BasicAttackIntentMsg> C2S_BasicAttackIntentMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_BasicAttackIntentMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_BasicAttackIntentMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_BasicAttackIntentMsg> CreateC2S_BasicAttackIntentMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_BasicAttackIntentMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_BasicAttackIntentMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _aim_direction = _o->aim_direction ? _o->aim_direction.get() : nullptr;
  auto _target_entity_id = _o->target_entity_id;
  return RiftForged::Networking::UDP::C2S::CreateC2S_BasicAttackIntentMsg(
      _fbb,
      _client_timestamp_ms,
      _aim_direction,
      _target_entity_id);
}

inline C2S_UseAbilityMsgT::C2S_UseAbilityMsgT(const C2S_UseAbilityMsgT &o)
      : client_timestamp_ms(o.client_timestamp_ms),
        ability_id(o.ability_id),
        target_entity_id(o.target_entity_id),
        target_position((o.target_position) ? new RiftForged::Networking::Shared::Vec3(*o.target_position) : nullptr) {
}

inline C2S_UseAbilityMsgT &C2S_UseAbilityMsgT::operator=(C2S_UseAbilityMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(client_timestamp_ms, o.client_timestamp_ms);
  std::swap(ability_id, o.ability_id);
  std::swap(target_entity_id, o.target_entity_id);
  std::swap(target_position, o.target_position);
  return *this;
}

inline C2S_UseAbilityMsgT *C2S_UseAbilityMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_UseAbilityMsgT>(new C2S_UseAbilityMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_UseAbilityMsg::UnPackTo(C2S_UseAbilityMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = ability_id(); _o->ability_id = _e; }
  { auto _e = target_entity_id(); _o->target_entity_id = _e; }
  { auto _e = target_position(); if (_e) _o->target_position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
}

inline ::flatbuffers::Offset<C2S_UseAbilityMsg> C2S_UseAbilityMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_UseAbilityMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_UseAbilityMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_UseAbilityMsg> CreateC2S_UseAbilityMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_UseAbilityMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_UseAbilityMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _ability_id = _o->ability_id;
  auto _target_entity_id = _o->target_entity_id;
  auto _target_position = _o->target_position ? _o->target_position.get() : nullptr;
  return RiftForged::Networking::UDP::C2S::CreateC2S_UseAbilityMsg(
      _fbb,
      _client_timestamp_ms,
      _ability_id,
      _target_entity_id,
      _target_position);
}

inline C2S_PingMsgT *C2S_PingMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_PingMsgT>(new C2S_PingMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_PingMsg::UnPackTo(C2S_PingMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
}

inline ::flatbuffers::Offset<C2S_PingMsg> C2S_PingMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_PingMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_PingMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_PingMsg> CreateC2S_PingMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_PingMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_PingMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  return RiftForged::Networking::UDP::C2S::CreateC2S_PingMsg(
      _fbb,
      _client_timestamp_ms);
}

inline C2S_JoinRequestMsgT *C2S_JoinRequestMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_JoinRequestMsgT>(new C2S_JoinRequestMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_JoinRequestMsg::UnPackTo(C2S_JoinRequestMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = character_id_to_load(); if (_e) _o->character_id_to_load = _e->str(); }
}

inline ::flatbuffers::Offset<C2S_JoinRequestMsg> C2S_JoinRequestMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_JoinRequestMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_JoinRequestMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_JoinRequestMsg> CreateC2S_JoinRequestMsg(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_JoinRequestMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_JoinRequestMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _character_id_to_load = _o->character_id_to_load.empty() ? 0 : _fbb.CreateString(_o->character_id_to_load);
  return RiftForged::Networking::UDP::C2S::CreateC2S_JoinRequestMsg(
      _fbb,
      _client_timestamp_ms,
      _character_id_to_load);
}

inline Root_C2S_UDP_MessageT *Root_C2S_UDP_Message::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Root_C2S_UDP_MessageT>(new Root_C2S_UDP_MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Root_C2S_UDP_Message::UnPackTo(Root_C2S_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = payload_type(); _o->payload.type = _e; }
  { auto _e = payload(); if (_e) _o->payload.value = RiftForged::Networking::UDP::C2S::C2S_UDP_PayloadUnion::UnPack(_e, payload_type(), _resolver); }
}

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> Root_C2S_UDP_Message::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRoot_C2S_UDP_Message(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Root_C2S_UDP_MessageT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _payload_type = _o->payload.type;
  auto _payload = _o->payload.Pack(_fbb);
  return RiftForged::Networking::UDP::C2S::CreateRoot_C2S_UDP_Message(
      _fbb,
      _payload_type,
      _payload);
}

inline bool VerifyC2S_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, C2S_UDP_Payload type) {
  switch (type) {
    case C2S_UDP_Payload_NONE: {
      return true;
    }
    case C2S_UDP_Payload_MovementInput: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_TurnIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_RiftStepActivation: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_BasicAttackIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_UseAbility: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_Ping: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_PingMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case C2S_UDP_Payload_JoinRequest: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyC2S_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyC2S_UDP_Payload(
        verifier,  values->Get(i), types->GetEnum<C2S_UDP_Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline void *C2S_UDP_PayloadUnion::UnPack(const void *obj, C2S_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case C2S_UDP_Payload_MovementInput: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_TurnIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_RiftStepActivation: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_BasicAttackIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_UseAbility: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_Ping: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_PingMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case C2S_UDP_Payload_JoinRequest: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> C2S_UDP_PayloadUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case C2S_UDP_Payload_MovementInput: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *>(value);
      return CreateC2S_MovementInputMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_TurnIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *>(value);
      return CreateC2S_TurnIntentMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_RiftStepActivation: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *>(value);
      return CreateC2S_RiftStepActivationMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_BasicAttackIntent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *>(value);
      return CreateC2S_BasicAttackIntentMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_UseAbility: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *>(value);
      return CreateC2S_UseAbilityMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_Ping: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_PingMsgT *>(value);
      return CreateC2S_PingMsg(_fbb, ptr, _rehasher).Union();
    }
    case C2S_UDP_Payload_JoinRequest: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *>(value);
      return CreateC2S_JoinRequestMsg(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline C2S_UDP_PayloadUnion::C2S_UDP_PayloadUnion(const C2S_UDP_PayloadUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case C2S_UDP_Payload_MovementInput: {
      value = new RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_TurnIntent: {
      value = new RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_RiftStepActivation: {
      value = new RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_BasicAttackIntent: {
      value = new RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_UseAbility: {
      value = new RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_Ping: {
      value = new RiftForged::Networking::UDP::C2S::C2S_PingMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_PingMsgT *>(u.value));
      break;
    }
    case C2S_UDP_Payload_JoinRequest: {
      value = new RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void C2S_UDP_PayloadUnion::Reset() {
  switch (type) {
    case C2S_UDP_Payload_MovementInput: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_MovementInputMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_TurnIntent: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_TurnIntentMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_RiftStepActivation: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_RiftStepActivationMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_BasicAttackIntent: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_BasicAttackIntentMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_UseAbility: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_UseAbilityMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_Ping: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_PingMsgT *>(value);
      delete ptr;
      break;
    }
    case C2S_UDP_Payload_JoinRequest: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_JoinRequestMsgT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = C2S_UDP_Payload_NONE;
}

inline const RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message *GetRoot_C2S_UDP_Message(const void *buf) {
  return ::flatbuffers::GetRoot<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(buf);
}

inline const RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message *GetSizePrefixedRoot_C2S_UDP_Message(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(buf);
}

inline bool VerifyRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(nullptr);
}

inline bool VerifySizePrefixedRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(nullptr);
}

inline void FinishRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT> UnPackRoot_C2S_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT>(GetRoot_C2S_UDP_Message(buf)->UnPack(res));
}

inline std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT> UnPackSizePrefixedRoot_C2S_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT>(GetSizePrefixedRoot_C2S_UDP_Message(buf)->UnPack(res));
}

}  // namespace C2S
}  // namespace UDP
}  // namespace Networking
}  // namespace RiftForged

#endif  // FLATBUFFERS_GENERATED_RIFTFORGEDC2SUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_C2S_H_
