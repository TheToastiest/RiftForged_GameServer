// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIFTFORGEDS2CUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_S2C_H_
#define FLATBUFFERS_GENERATED_RIFTFORGEDS2CUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_S2C_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "riftforged_common_types_generated.h"

namespace RiftForged {
namespace Networking {
namespace UDP {
namespace S2C {

struct Effect_AreaDamageData;
struct Effect_AreaDamageDataBuilder;
struct Effect_AreaDamageDataT;

struct Effect_AreaStunData;
struct Effect_AreaStunDataBuilder;
struct Effect_AreaStunDataT;

struct Effect_ApplyBuffDebuffData;
struct Effect_ApplyBuffDebuffDataBuilder;
struct Effect_ApplyBuffDebuffDataT;

struct Effect_PersistentAreaData;
struct Effect_PersistentAreaDataBuilder;
struct Effect_PersistentAreaDataT;

struct CombatEvent_DamageDealtDetails;
struct CombatEvent_DamageDealtDetailsBuilder;
struct CombatEvent_DamageDealtDetailsT;

struct S2C_SpawnProjectileMsg;
struct S2C_SpawnProjectileMsgBuilder;
struct S2C_SpawnProjectileMsgT;

struct S2C_BasicAttackFailedMsg;
struct S2C_BasicAttackFailedMsgBuilder;
struct S2C_BasicAttackFailedMsgT;

struct S2C_RiftStepFailedMsg;
struct S2C_RiftStepFailedMsgBuilder;
struct S2C_RiftStepFailedMsgT;

struct S2C_AbilityFailedMsg;
struct S2C_AbilityFailedMsgBuilder;
struct S2C_AbilityFailedMsgT;

struct S2C_EntityStateUpdateMsg;
struct S2C_EntityStateUpdateMsgBuilder;
struct S2C_EntityStateUpdateMsgT;

struct S2C_RiftStepInitiatedMsg;
struct S2C_RiftStepInitiatedMsgBuilder;
struct S2C_RiftStepInitiatedMsgT;

struct S2C_ResourceUpdateMsg;
struct S2C_ResourceUpdateMsgBuilder;
struct S2C_ResourceUpdateMsgT;

struct S2C_CombatEventMsg;
struct S2C_CombatEventMsgBuilder;
struct S2C_CombatEventMsgT;

struct S2C_PongMsg;
struct S2C_PongMsgBuilder;
struct S2C_PongMsgT;

struct S2C_SystemBroadcastMsg;
struct S2C_SystemBroadcastMsgBuilder;
struct S2C_SystemBroadcastMsgT;

struct S2C_JoinSuccessMsg;
struct S2C_JoinSuccessMsgBuilder;
struct S2C_JoinSuccessMsgT;

struct S2C_JoinFailedMsg;
struct S2C_JoinFailedMsgBuilder;
struct S2C_JoinFailedMsgT;

struct Root_S2C_UDP_Message;
struct Root_S2C_UDP_MessageBuilder;
struct Root_S2C_UDP_MessageT;

enum ResourceType : int8_t {
  ResourceType_Will = 0,
  ResourceType_Health = 1,
  ResourceType_Shimmer_Notification = 2,
  ResourceType_MIN = ResourceType_Will,
  ResourceType_MAX = ResourceType_Shimmer_Notification
};

inline const ResourceType (&EnumValuesResourceType())[3] {
  static const ResourceType values[] = {
    ResourceType_Will,
    ResourceType_Health,
    ResourceType_Shimmer_Notification
  };
  return values;
}

inline const char * const *EnumNamesResourceType() {
  static const char * const names[4] = {
    "Will",
    "Health",
    "Shimmer_Notification",
    nullptr
  };
  return names;
}

inline const char *EnumNameResourceType(ResourceType e) {
  if (::flatbuffers::IsOutRange(e, ResourceType_Will, ResourceType_Shimmer_Notification)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResourceType()[index];
}

enum CombatEventType : int8_t {
  CombatEventType_None = 0,
  CombatEventType_DamageDealt = 1,
  CombatEventType_HealReceived = 2,
  CombatEventType_Miss = 3,
  CombatEventType_Dodge = 4,
  CombatEventType_Block = 5,
  CombatEventType_Parry = 6,
  CombatEventType_CriticalHit = 7,
  CombatEventType_AbilityInterrupt = 8,
  CombatEventType_MIN = CombatEventType_None,
  CombatEventType_MAX = CombatEventType_AbilityInterrupt
};

inline const CombatEventType (&EnumValuesCombatEventType())[9] {
  static const CombatEventType values[] = {
    CombatEventType_None,
    CombatEventType_DamageDealt,
    CombatEventType_HealReceived,
    CombatEventType_Miss,
    CombatEventType_Dodge,
    CombatEventType_Block,
    CombatEventType_Parry,
    CombatEventType_CriticalHit,
    CombatEventType_AbilityInterrupt
  };
  return values;
}

inline const char * const *EnumNamesCombatEventType() {
  static const char * const names[10] = {
    "None",
    "DamageDealt",
    "HealReceived",
    "Miss",
    "Dodge",
    "Block",
    "Parry",
    "CriticalHit",
    "AbilityInterrupt",
    nullptr
  };
  return names;
}

inline const char *EnumNameCombatEventType(CombatEventType e) {
  if (::flatbuffers::IsOutRange(e, CombatEventType_None, CombatEventType_AbilityInterrupt)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCombatEventType()[index];
}

enum BasicAttackFailureReason : int8_t {
  BasicAttackFailureReason_UNKNOWN = 0,
  BasicAttackFailureReason_ON_COOLDOWN = 1,
  BasicAttackFailureReason_OUT_OF_RANGE = 2,
  BasicAttackFailureReason_INVALID_TARGET = 3,
  BasicAttackFailureReason_NOT_ENOUGH_RESOURCES = 4,
  BasicAttackFailureReason_OBSTRUCTED = 5,
  BasicAttackFailureReason_MIN = BasicAttackFailureReason_UNKNOWN,
  BasicAttackFailureReason_MAX = BasicAttackFailureReason_OBSTRUCTED
};

inline const BasicAttackFailureReason (&EnumValuesBasicAttackFailureReason())[6] {
  static const BasicAttackFailureReason values[] = {
    BasicAttackFailureReason_UNKNOWN,
    BasicAttackFailureReason_ON_COOLDOWN,
    BasicAttackFailureReason_OUT_OF_RANGE,
    BasicAttackFailureReason_INVALID_TARGET,
    BasicAttackFailureReason_NOT_ENOUGH_RESOURCES,
    BasicAttackFailureReason_OBSTRUCTED
  };
  return values;
}

inline const char * const *EnumNamesBasicAttackFailureReason() {
  static const char * const names[7] = {
    "UNKNOWN",
    "ON_COOLDOWN",
    "OUT_OF_RANGE",
    "INVALID_TARGET",
    "NOT_ENOUGH_RESOURCES",
    "OBSTRUCTED",
    nullptr
  };
  return names;
}

inline const char *EnumNameBasicAttackFailureReason(BasicAttackFailureReason e) {
  if (::flatbuffers::IsOutRange(e, BasicAttackFailureReason_UNKNOWN, BasicAttackFailureReason_OBSTRUCTED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBasicAttackFailureReason()[index];
}

enum RiftStepFailureReason : int8_t {
  RiftStepFailureReason_UNKNOWN = 0,
  RiftStepFailureReason_ON_COOLDOWN = 1,
  RiftStepFailureReason_NOT_ENOUGH_RESOURCES = 2,
  RiftStepFailureReason_OBSTRUCTED = 3,
  RiftStepFailureReason_INVALID_DESTINATION = 4,
  RiftStepFailureReason_MIN = RiftStepFailureReason_UNKNOWN,
  RiftStepFailureReason_MAX = RiftStepFailureReason_INVALID_DESTINATION
};

inline const RiftStepFailureReason (&EnumValuesRiftStepFailureReason())[5] {
  static const RiftStepFailureReason values[] = {
    RiftStepFailureReason_UNKNOWN,
    RiftStepFailureReason_ON_COOLDOWN,
    RiftStepFailureReason_NOT_ENOUGH_RESOURCES,
    RiftStepFailureReason_OBSTRUCTED,
    RiftStepFailureReason_INVALID_DESTINATION
  };
  return values;
}

inline const char * const *EnumNamesRiftStepFailureReason() {
  static const char * const names[6] = {
    "UNKNOWN",
    "ON_COOLDOWN",
    "NOT_ENOUGH_RESOURCES",
    "OBSTRUCTED",
    "INVALID_DESTINATION",
    nullptr
  };
  return names;
}

inline const char *EnumNameRiftStepFailureReason(RiftStepFailureReason e) {
  if (::flatbuffers::IsOutRange(e, RiftStepFailureReason_UNKNOWN, RiftStepFailureReason_INVALID_DESTINATION)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRiftStepFailureReason()[index];
}

enum AbilityFailureReason : int8_t {
  AbilityFailureReason_UNKNOWN = 0,
  AbilityFailureReason_ON_COOLDOWN = 1,
  AbilityFailureReason_NOT_ENOUGH_RESOURCES = 2,
  AbilityFailureReason_INVALID_TARGET = 3,
  AbilityFailureReason_OUT_OF_RANGE = 4,
  AbilityFailureReason_INTERRUPTED = 5,
  AbilityFailureReason_CHANNELING_FAILED = 6,
  AbilityFailureReason_MISSING_REQUIREMENTS = 7,
  AbilityFailureReason_MIN = AbilityFailureReason_UNKNOWN,
  AbilityFailureReason_MAX = AbilityFailureReason_MISSING_REQUIREMENTS
};

inline const AbilityFailureReason (&EnumValuesAbilityFailureReason())[8] {
  static const AbilityFailureReason values[] = {
    AbilityFailureReason_UNKNOWN,
    AbilityFailureReason_ON_COOLDOWN,
    AbilityFailureReason_NOT_ENOUGH_RESOURCES,
    AbilityFailureReason_INVALID_TARGET,
    AbilityFailureReason_OUT_OF_RANGE,
    AbilityFailureReason_INTERRUPTED,
    AbilityFailureReason_CHANNELING_FAILED,
    AbilityFailureReason_MISSING_REQUIREMENTS
  };
  return values;
}

inline const char * const *EnumNamesAbilityFailureReason() {
  static const char * const names[9] = {
    "UNKNOWN",
    "ON_COOLDOWN",
    "NOT_ENOUGH_RESOURCES",
    "INVALID_TARGET",
    "OUT_OF_RANGE",
    "INTERRUPTED",
    "CHANNELING_FAILED",
    "MISSING_REQUIREMENTS",
    nullptr
  };
  return names;
}

inline const char *EnumNameAbilityFailureReason(AbilityFailureReason e) {
  if (::flatbuffers::IsOutRange(e, AbilityFailureReason_UNKNOWN, AbilityFailureReason_MISSING_REQUIREMENTS)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAbilityFailureReason()[index];
}

enum RiftStepEffectPayload : int8_t {
  RiftStepEffectPayload_NONE = 0,
  RiftStepEffectPayload_AreaDamage = 1,
  RiftStepEffectPayload_AreaStun = 2,
  RiftStepEffectPayload_ApplyBuff = 3,
  RiftStepEffectPayload_PersistentArea = 4,
  RiftStepEffectPayload_MIN = RiftStepEffectPayload_NONE,
  RiftStepEffectPayload_MAX = RiftStepEffectPayload_PersistentArea
};

inline const RiftStepEffectPayload (&EnumValuesRiftStepEffectPayload())[5] {
  static const RiftStepEffectPayload values[] = {
    RiftStepEffectPayload_NONE,
    RiftStepEffectPayload_AreaDamage,
    RiftStepEffectPayload_AreaStun,
    RiftStepEffectPayload_ApplyBuff,
    RiftStepEffectPayload_PersistentArea
  };
  return values;
}

inline const char * const *EnumNamesRiftStepEffectPayload() {
  static const char * const names[6] = {
    "NONE",
    "AreaDamage",
    "AreaStun",
    "ApplyBuff",
    "PersistentArea",
    nullptr
  };
  return names;
}

inline const char *EnumNameRiftStepEffectPayload(RiftStepEffectPayload e) {
  if (::flatbuffers::IsOutRange(e, RiftStepEffectPayload_NONE, RiftStepEffectPayload_PersistentArea)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRiftStepEffectPayload()[index];
}

template<typename T> struct RiftStepEffectPayloadTraits {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_NONE;
};

template<> struct RiftStepEffectPayloadTraits<RiftForged::Networking::UDP::S2C::Effect_AreaDamageData> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_AreaDamage;
};

template<> struct RiftStepEffectPayloadTraits<RiftForged::Networking::UDP::S2C::Effect_AreaStunData> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_AreaStun;
};

template<> struct RiftStepEffectPayloadTraits<RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffData> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_ApplyBuff;
};

template<> struct RiftStepEffectPayloadTraits<RiftForged::Networking::UDP::S2C::Effect_PersistentAreaData> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_PersistentArea;
};

template<typename T> struct RiftStepEffectPayloadUnionTraits {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_NONE;
};

template<> struct RiftStepEffectPayloadUnionTraits<RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_AreaDamage;
};

template<> struct RiftStepEffectPayloadUnionTraits<RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_AreaStun;
};

template<> struct RiftStepEffectPayloadUnionTraits<RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_ApplyBuff;
};

template<> struct RiftStepEffectPayloadUnionTraits<RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT> {
  static const RiftStepEffectPayload enum_value = RiftStepEffectPayload_PersistentArea;
};

struct RiftStepEffectPayloadUnion {
  RiftStepEffectPayload type;
  void *value;

  RiftStepEffectPayloadUnion() : type(RiftStepEffectPayload_NONE), value(nullptr) {}
  RiftStepEffectPayloadUnion(RiftStepEffectPayloadUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(RiftStepEffectPayload_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  RiftStepEffectPayloadUnion(const RiftStepEffectPayloadUnion &);
  RiftStepEffectPayloadUnion &operator=(const RiftStepEffectPayloadUnion &u)
    { RiftStepEffectPayloadUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  RiftStepEffectPayloadUnion &operator=(RiftStepEffectPayloadUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~RiftStepEffectPayloadUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = RiftStepEffectPayloadUnionTraits<RT>::enum_value;
    if (type != RiftStepEffectPayload_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, RiftStepEffectPayload type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *AsAreaDamage() {
    return type == RiftStepEffectPayload_AreaDamage ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *AsAreaDamage() const {
    return type == RiftStepEffectPayload_AreaDamage ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *AsAreaStun() {
    return type == RiftStepEffectPayload_AreaStun ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *AsAreaStun() const {
    return type == RiftStepEffectPayload_AreaStun ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *AsApplyBuff() {
    return type == RiftStepEffectPayload_ApplyBuff ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *AsApplyBuff() const {
    return type == RiftStepEffectPayload_ApplyBuff ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *AsPersistentArea() {
    return type == RiftStepEffectPayload_PersistentArea ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *AsPersistentArea() const {
    return type == RiftStepEffectPayload_PersistentArea ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *>(value) : nullptr;
  }
};

bool VerifyRiftStepEffectPayload(::flatbuffers::Verifier &verifier, const void *obj, RiftStepEffectPayload type);
bool VerifyRiftStepEffectPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<int8_t> *types);

enum CombatEventPayload : int8_t {
  CombatEventPayload_NONE = 0,
  CombatEventPayload_DamageDealt = 1,
  CombatEventPayload_MIN = CombatEventPayload_NONE,
  CombatEventPayload_MAX = CombatEventPayload_DamageDealt
};

inline const CombatEventPayload (&EnumValuesCombatEventPayload())[2] {
  static const CombatEventPayload values[] = {
    CombatEventPayload_NONE,
    CombatEventPayload_DamageDealt
  };
  return values;
}

inline const char * const *EnumNamesCombatEventPayload() {
  static const char * const names[3] = {
    "NONE",
    "DamageDealt",
    nullptr
  };
  return names;
}

inline const char *EnumNameCombatEventPayload(CombatEventPayload e) {
  if (::flatbuffers::IsOutRange(e, CombatEventPayload_NONE, CombatEventPayload_DamageDealt)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCombatEventPayload()[index];
}

template<typename T> struct CombatEventPayloadTraits {
  static const CombatEventPayload enum_value = CombatEventPayload_NONE;
};

template<> struct CombatEventPayloadTraits<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails> {
  static const CombatEventPayload enum_value = CombatEventPayload_DamageDealt;
};

template<typename T> struct CombatEventPayloadUnionTraits {
  static const CombatEventPayload enum_value = CombatEventPayload_NONE;
};

template<> struct CombatEventPayloadUnionTraits<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT> {
  static const CombatEventPayload enum_value = CombatEventPayload_DamageDealt;
};

struct CombatEventPayloadUnion {
  CombatEventPayload type;
  void *value;

  CombatEventPayloadUnion() : type(CombatEventPayload_NONE), value(nullptr) {}
  CombatEventPayloadUnion(CombatEventPayloadUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(CombatEventPayload_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  CombatEventPayloadUnion(const CombatEventPayloadUnion &);
  CombatEventPayloadUnion &operator=(const CombatEventPayloadUnion &u)
    { CombatEventPayloadUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  CombatEventPayloadUnion &operator=(CombatEventPayloadUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~CombatEventPayloadUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = CombatEventPayloadUnionTraits<RT>::enum_value;
    if (type != CombatEventPayload_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, CombatEventPayload type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *AsDamageDealt() {
    return type == CombatEventPayload_DamageDealt ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *AsDamageDealt() const {
    return type == CombatEventPayload_DamageDealt ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *>(value) : nullptr;
  }
};

bool VerifyCombatEventPayload(::flatbuffers::Verifier &verifier, const void *obj, CombatEventPayload type);
bool VerifyCombatEventPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<int8_t> *types);

enum S2C_UDP_Payload : uint8_t {
  S2C_UDP_Payload_NONE = 0,
  S2C_UDP_Payload_EntityStateUpdate = 1,
  S2C_UDP_Payload_RiftStepInitiated = 2,
  S2C_UDP_Payload_ResourceUpdate = 3,
  S2C_UDP_Payload_CombatEvent = 4,
  S2C_UDP_Payload_SpawnProjectile = 5,
  S2C_UDP_Payload_SystemBroadcast = 6,
  S2C_UDP_Payload_Pong = 7,
  S2C_UDP_Payload_S2C_JoinSuccessMsg = 8,
  S2C_UDP_Payload_S2C_JoinFailedMsg = 9,
  S2C_UDP_Payload_BasicAttackFailed = 10,
  S2C_UDP_Payload_RiftStepFailed = 11,
  S2C_UDP_Payload_AbilityFailed = 12,
  S2C_UDP_Payload_MIN = S2C_UDP_Payload_NONE,
  S2C_UDP_Payload_MAX = S2C_UDP_Payload_AbilityFailed
};

inline const S2C_UDP_Payload (&EnumValuesS2C_UDP_Payload())[13] {
  static const S2C_UDP_Payload values[] = {
    S2C_UDP_Payload_NONE,
    S2C_UDP_Payload_EntityStateUpdate,
    S2C_UDP_Payload_RiftStepInitiated,
    S2C_UDP_Payload_ResourceUpdate,
    S2C_UDP_Payload_CombatEvent,
    S2C_UDP_Payload_SpawnProjectile,
    S2C_UDP_Payload_SystemBroadcast,
    S2C_UDP_Payload_Pong,
    S2C_UDP_Payload_S2C_JoinSuccessMsg,
    S2C_UDP_Payload_S2C_JoinFailedMsg,
    S2C_UDP_Payload_BasicAttackFailed,
    S2C_UDP_Payload_RiftStepFailed,
    S2C_UDP_Payload_AbilityFailed
  };
  return values;
}

inline const char * const *EnumNamesS2C_UDP_Payload() {
  static const char * const names[14] = {
    "NONE",
    "EntityStateUpdate",
    "RiftStepInitiated",
    "ResourceUpdate",
    "CombatEvent",
    "SpawnProjectile",
    "SystemBroadcast",
    "Pong",
    "S2C_JoinSuccessMsg",
    "S2C_JoinFailedMsg",
    "BasicAttackFailed",
    "RiftStepFailed",
    "AbilityFailed",
    nullptr
  };
  return names;
}

inline const char *EnumNameS2C_UDP_Payload(S2C_UDP_Payload e) {
  if (::flatbuffers::IsOutRange(e, S2C_UDP_Payload_NONE, S2C_UDP_Payload_AbilityFailed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesS2C_UDP_Payload()[index];
}

template<typename T> struct S2C_UDP_PayloadTraits {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_NONE;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_EntityStateUpdate;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_RiftStepInitiated;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_ResourceUpdate;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_CombatEvent;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_SpawnProjectile;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_SystemBroadcast;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_PongMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_Pong;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_S2C_JoinSuccessMsg;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_S2C_JoinFailedMsg;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_BasicAttackFailed;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_RiftStepFailed;
};

template<> struct S2C_UDP_PayloadTraits<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_AbilityFailed;
};

template<typename T> struct S2C_UDP_PayloadUnionTraits {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_NONE;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_EntityStateUpdate;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_RiftStepInitiated;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_ResourceUpdate;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_CombatEvent;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_SpawnProjectile;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_SystemBroadcast;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_PongMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_Pong;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_S2C_JoinSuccessMsg;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_S2C_JoinFailedMsg;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_BasicAttackFailed;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_RiftStepFailed;
};

template<> struct S2C_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT> {
  static const S2C_UDP_Payload enum_value = S2C_UDP_Payload_AbilityFailed;
};

struct S2C_UDP_PayloadUnion {
  S2C_UDP_Payload type;
  void *value;

  S2C_UDP_PayloadUnion() : type(S2C_UDP_Payload_NONE), value(nullptr) {}
  S2C_UDP_PayloadUnion(S2C_UDP_PayloadUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(S2C_UDP_Payload_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  S2C_UDP_PayloadUnion(const S2C_UDP_PayloadUnion &);
  S2C_UDP_PayloadUnion &operator=(const S2C_UDP_PayloadUnion &u)
    { S2C_UDP_PayloadUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  S2C_UDP_PayloadUnion &operator=(S2C_UDP_PayloadUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~S2C_UDP_PayloadUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = S2C_UDP_PayloadUnionTraits<RT>::enum_value;
    if (type != S2C_UDP_Payload_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, S2C_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *AsEntityStateUpdate() {
    return type == S2C_UDP_Payload_EntityStateUpdate ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *AsEntityStateUpdate() const {
    return type == S2C_UDP_Payload_EntityStateUpdate ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *AsRiftStepInitiated() {
    return type == S2C_UDP_Payload_RiftStepInitiated ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *AsRiftStepInitiated() const {
    return type == S2C_UDP_Payload_RiftStepInitiated ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *AsResourceUpdate() {
    return type == S2C_UDP_Payload_ResourceUpdate ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *AsResourceUpdate() const {
    return type == S2C_UDP_Payload_ResourceUpdate ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *AsCombatEvent() {
    return type == S2C_UDP_Payload_CombatEvent ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *AsCombatEvent() const {
    return type == S2C_UDP_Payload_CombatEvent ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *AsSpawnProjectile() {
    return type == S2C_UDP_Payload_SpawnProjectile ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *AsSpawnProjectile() const {
    return type == S2C_UDP_Payload_SpawnProjectile ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *AsSystemBroadcast() {
    return type == S2C_UDP_Payload_SystemBroadcast ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *AsSystemBroadcast() const {
    return type == S2C_UDP_Payload_SystemBroadcast ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_PongMsgT *AsPong() {
    return type == S2C_UDP_Payload_Pong ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_PongMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_PongMsgT *AsPong() const {
    return type == S2C_UDP_Payload_Pong ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_PongMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *AsS2C_JoinSuccessMsg() {
    return type == S2C_UDP_Payload_S2C_JoinSuccessMsg ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *AsS2C_JoinSuccessMsg() const {
    return type == S2C_UDP_Payload_S2C_JoinSuccessMsg ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *AsS2C_JoinFailedMsg() {
    return type == S2C_UDP_Payload_S2C_JoinFailedMsg ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *AsS2C_JoinFailedMsg() const {
    return type == S2C_UDP_Payload_S2C_JoinFailedMsg ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *AsBasicAttackFailed() {
    return type == S2C_UDP_Payload_BasicAttackFailed ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *AsBasicAttackFailed() const {
    return type == S2C_UDP_Payload_BasicAttackFailed ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *AsRiftStepFailed() {
    return type == S2C_UDP_Payload_RiftStepFailed ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *AsRiftStepFailed() const {
    return type == S2C_UDP_Payload_RiftStepFailed ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *>(value) : nullptr;
  }
  RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *AsAbilityFailed() {
    return type == S2C_UDP_Payload_AbilityFailed ?
      reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *AsAbilityFailed() const {
    return type == S2C_UDP_Payload_AbilityFailed ?
      reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *>(value) : nullptr;
  }
};

bool VerifyS2C_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, S2C_UDP_Payload type);
bool VerifyS2C_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Effect_AreaDamageDataT : public ::flatbuffers::NativeTable {
  typedef Effect_AreaDamageData TableType;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> area_center{};
  float radius = 0.0f;
  std::unique_ptr<RiftForged::Networking::Shared::DamageInstance> damage_info{};
  Effect_AreaDamageDataT() = default;
  Effect_AreaDamageDataT(const Effect_AreaDamageDataT &o);
  Effect_AreaDamageDataT(Effect_AreaDamageDataT&&) FLATBUFFERS_NOEXCEPT = default;
  Effect_AreaDamageDataT &operator=(Effect_AreaDamageDataT o) FLATBUFFERS_NOEXCEPT;
};

struct Effect_AreaDamageData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Effect_AreaDamageDataT NativeTableType;
  typedef Effect_AreaDamageDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AREA_CENTER = 4,
    VT_RADIUS = 6,
    VT_DAMAGE_INFO = 8
  };
  const RiftForged::Networking::Shared::Vec3 *area_center() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_AREA_CENTER);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  const RiftForged::Networking::Shared::DamageInstance *damage_info() const {
    return GetStruct<const RiftForged::Networking::Shared::DamageInstance *>(VT_DAMAGE_INFO);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_AREA_CENTER, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<RiftForged::Networking::Shared::DamageInstance>(verifier, VT_DAMAGE_INFO, 4) &&
           verifier.EndTable();
  }
  Effect_AreaDamageDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Effect_AreaDamageDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Effect_AreaDamageData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaDamageDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Effect_AreaDamageDataBuilder {
  typedef Effect_AreaDamageData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_area_center(const RiftForged::Networking::Shared::Vec3 *area_center) {
    fbb_.AddStruct(Effect_AreaDamageData::VT_AREA_CENTER, area_center);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Effect_AreaDamageData::VT_RADIUS, radius, 0.0f);
  }
  void add_damage_info(const RiftForged::Networking::Shared::DamageInstance *damage_info) {
    fbb_.AddStruct(Effect_AreaDamageData::VT_DAMAGE_INFO, damage_info);
  }
  explicit Effect_AreaDamageDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Effect_AreaDamageData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Effect_AreaDamageData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Effect_AreaDamageData> CreateEffect_AreaDamageData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const RiftForged::Networking::Shared::Vec3 *area_center = nullptr,
    float radius = 0.0f,
    const RiftForged::Networking::Shared::DamageInstance *damage_info = nullptr) {
  Effect_AreaDamageDataBuilder builder_(_fbb);
  builder_.add_damage_info(damage_info);
  builder_.add_radius(radius);
  builder_.add_area_center(area_center);
  return builder_.Finish();
}

::flatbuffers::Offset<Effect_AreaDamageData> CreateEffect_AreaDamageData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaDamageDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Effect_AreaStunDataT : public ::flatbuffers::NativeTable {
  typedef Effect_AreaStunData TableType;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> area_center{};
  float radius = 0.0f;
  std::unique_ptr<RiftForged::Networking::Shared::StunInstance> stun_details{};
  Effect_AreaStunDataT() = default;
  Effect_AreaStunDataT(const Effect_AreaStunDataT &o);
  Effect_AreaStunDataT(Effect_AreaStunDataT&&) FLATBUFFERS_NOEXCEPT = default;
  Effect_AreaStunDataT &operator=(Effect_AreaStunDataT o) FLATBUFFERS_NOEXCEPT;
};

struct Effect_AreaStunData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Effect_AreaStunDataT NativeTableType;
  typedef Effect_AreaStunDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AREA_CENTER = 4,
    VT_RADIUS = 6,
    VT_STUN_DETAILS = 8
  };
  const RiftForged::Networking::Shared::Vec3 *area_center() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_AREA_CENTER);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  const RiftForged::Networking::Shared::StunInstance *stun_details() const {
    return GetStruct<const RiftForged::Networking::Shared::StunInstance *>(VT_STUN_DETAILS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_AREA_CENTER, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<RiftForged::Networking::Shared::StunInstance>(verifier, VT_STUN_DETAILS, 4) &&
           verifier.EndTable();
  }
  Effect_AreaStunDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Effect_AreaStunDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Effect_AreaStunData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaStunDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Effect_AreaStunDataBuilder {
  typedef Effect_AreaStunData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_area_center(const RiftForged::Networking::Shared::Vec3 *area_center) {
    fbb_.AddStruct(Effect_AreaStunData::VT_AREA_CENTER, area_center);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Effect_AreaStunData::VT_RADIUS, radius, 0.0f);
  }
  void add_stun_details(const RiftForged::Networking::Shared::StunInstance *stun_details) {
    fbb_.AddStruct(Effect_AreaStunData::VT_STUN_DETAILS, stun_details);
  }
  explicit Effect_AreaStunDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Effect_AreaStunData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Effect_AreaStunData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Effect_AreaStunData> CreateEffect_AreaStunData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const RiftForged::Networking::Shared::Vec3 *area_center = nullptr,
    float radius = 0.0f,
    const RiftForged::Networking::Shared::StunInstance *stun_details = nullptr) {
  Effect_AreaStunDataBuilder builder_(_fbb);
  builder_.add_stun_details(stun_details);
  builder_.add_radius(radius);
  builder_.add_area_center(area_center);
  return builder_.Finish();
}

::flatbuffers::Offset<Effect_AreaStunData> CreateEffect_AreaStunData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaStunDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Effect_ApplyBuffDebuffDataT : public ::flatbuffers::NativeTable {
  typedef Effect_ApplyBuffDebuffData TableType;
  RiftForged::Networking::Shared::StatusEffectCategory buff_debuff_id = RiftForged::Networking::Shared::StatusEffectCategory_None;
  uint32_t duration_ms = 0;
};

struct Effect_ApplyBuffDebuffData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Effect_ApplyBuffDebuffDataT NativeTableType;
  typedef Effect_ApplyBuffDebuffDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFF_DEBUFF_ID = 4,
    VT_DURATION_MS = 6
  };
  RiftForged::Networking::Shared::StatusEffectCategory buff_debuff_id() const {
    return static_cast<RiftForged::Networking::Shared::StatusEffectCategory>(GetField<uint32_t>(VT_BUFF_DEBUFF_ID, 0));
  }
  uint32_t duration_ms() const {
    return GetField<uint32_t>(VT_DURATION_MS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BUFF_DEBUFF_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DURATION_MS, 4) &&
           verifier.EndTable();
  }
  Effect_ApplyBuffDebuffDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Effect_ApplyBuffDebuffDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Effect_ApplyBuffDebuffData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_ApplyBuffDebuffDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Effect_ApplyBuffDebuffDataBuilder {
  typedef Effect_ApplyBuffDebuffData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_buff_debuff_id(RiftForged::Networking::Shared::StatusEffectCategory buff_debuff_id) {
    fbb_.AddElement<uint32_t>(Effect_ApplyBuffDebuffData::VT_BUFF_DEBUFF_ID, static_cast<uint32_t>(buff_debuff_id), 0);
  }
  void add_duration_ms(uint32_t duration_ms) {
    fbb_.AddElement<uint32_t>(Effect_ApplyBuffDebuffData::VT_DURATION_MS, duration_ms, 0);
  }
  explicit Effect_ApplyBuffDebuffDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Effect_ApplyBuffDebuffData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Effect_ApplyBuffDebuffData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Effect_ApplyBuffDebuffData> CreateEffect_ApplyBuffDebuffData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::Shared::StatusEffectCategory buff_debuff_id = RiftForged::Networking::Shared::StatusEffectCategory_None,
    uint32_t duration_ms = 0) {
  Effect_ApplyBuffDebuffDataBuilder builder_(_fbb);
  builder_.add_duration_ms(duration_ms);
  builder_.add_buff_debuff_id(buff_debuff_id);
  return builder_.Finish();
}

::flatbuffers::Offset<Effect_ApplyBuffDebuffData> CreateEffect_ApplyBuffDebuffData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_ApplyBuffDebuffDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Effect_PersistentAreaDataT : public ::flatbuffers::NativeTable {
  typedef Effect_PersistentAreaData TableType;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> area_center{};
  float radius = 0.0f;
  uint32_t duration_ms = 0;
  std::string visual_effect_tag{};
  std::vector<RiftForged::Networking::Shared::StatusEffectCategory> applied_effects_on_contact{};
  Effect_PersistentAreaDataT() = default;
  Effect_PersistentAreaDataT(const Effect_PersistentAreaDataT &o);
  Effect_PersistentAreaDataT(Effect_PersistentAreaDataT&&) FLATBUFFERS_NOEXCEPT = default;
  Effect_PersistentAreaDataT &operator=(Effect_PersistentAreaDataT o) FLATBUFFERS_NOEXCEPT;
};

struct Effect_PersistentAreaData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Effect_PersistentAreaDataT NativeTableType;
  typedef Effect_PersistentAreaDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AREA_CENTER = 4,
    VT_RADIUS = 6,
    VT_DURATION_MS = 8,
    VT_VISUAL_EFFECT_TAG = 10,
    VT_APPLIED_EFFECTS_ON_CONTACT = 12
  };
  const RiftForged::Networking::Shared::Vec3 *area_center() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_AREA_CENTER);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  uint32_t duration_ms() const {
    return GetField<uint32_t>(VT_DURATION_MS, 0);
  }
  const ::flatbuffers::String *visual_effect_tag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VISUAL_EFFECT_TAG);
  }
  const ::flatbuffers::Vector<uint32_t> *applied_effects_on_contact() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_APPLIED_EFFECTS_ON_CONTACT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_AREA_CENTER, 4) &&
           VerifyField<float>(verifier, VT_RADIUS, 4) &&
           VerifyField<uint32_t>(verifier, VT_DURATION_MS, 4) &&
           VerifyOffset(verifier, VT_VISUAL_EFFECT_TAG) &&
           verifier.VerifyString(visual_effect_tag()) &&
           VerifyOffset(verifier, VT_APPLIED_EFFECTS_ON_CONTACT) &&
           verifier.VerifyVector(applied_effects_on_contact()) &&
           verifier.EndTable();
  }
  Effect_PersistentAreaDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Effect_PersistentAreaDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Effect_PersistentAreaData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_PersistentAreaDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Effect_PersistentAreaDataBuilder {
  typedef Effect_PersistentAreaData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_area_center(const RiftForged::Networking::Shared::Vec3 *area_center) {
    fbb_.AddStruct(Effect_PersistentAreaData::VT_AREA_CENTER, area_center);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(Effect_PersistentAreaData::VT_RADIUS, radius, 0.0f);
  }
  void add_duration_ms(uint32_t duration_ms) {
    fbb_.AddElement<uint32_t>(Effect_PersistentAreaData::VT_DURATION_MS, duration_ms, 0);
  }
  void add_visual_effect_tag(::flatbuffers::Offset<::flatbuffers::String> visual_effect_tag) {
    fbb_.AddOffset(Effect_PersistentAreaData::VT_VISUAL_EFFECT_TAG, visual_effect_tag);
  }
  void add_applied_effects_on_contact(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> applied_effects_on_contact) {
    fbb_.AddOffset(Effect_PersistentAreaData::VT_APPLIED_EFFECTS_ON_CONTACT, applied_effects_on_contact);
  }
  explicit Effect_PersistentAreaDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Effect_PersistentAreaData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Effect_PersistentAreaData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Effect_PersistentAreaData> CreateEffect_PersistentAreaData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const RiftForged::Networking::Shared::Vec3 *area_center = nullptr,
    float radius = 0.0f,
    uint32_t duration_ms = 0,
    ::flatbuffers::Offset<::flatbuffers::String> visual_effect_tag = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> applied_effects_on_contact = 0) {
  Effect_PersistentAreaDataBuilder builder_(_fbb);
  builder_.add_applied_effects_on_contact(applied_effects_on_contact);
  builder_.add_visual_effect_tag(visual_effect_tag);
  builder_.add_duration_ms(duration_ms);
  builder_.add_radius(radius);
  builder_.add_area_center(area_center);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Effect_PersistentAreaData> CreateEffect_PersistentAreaDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const RiftForged::Networking::Shared::Vec3 *area_center = nullptr,
    float radius = 0.0f,
    uint32_t duration_ms = 0,
    const char *visual_effect_tag = nullptr,
    const std::vector<uint32_t> *applied_effects_on_contact = nullptr) {
  auto visual_effect_tag__ = visual_effect_tag ? _fbb.CreateString(visual_effect_tag) : 0;
  auto applied_effects_on_contact__ = applied_effects_on_contact ? _fbb.CreateVector<uint32_t>(*applied_effects_on_contact) : 0;
  return RiftForged::Networking::UDP::S2C::CreateEffect_PersistentAreaData(
      _fbb,
      area_center,
      radius,
      duration_ms,
      visual_effect_tag__,
      applied_effects_on_contact__);
}

::flatbuffers::Offset<Effect_PersistentAreaData> CreateEffect_PersistentAreaData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_PersistentAreaDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CombatEvent_DamageDealtDetailsT : public ::flatbuffers::NativeTable {
  typedef CombatEvent_DamageDealtDetails TableType;
  uint64_t source_entity_id = 0;
  uint64_t target_entity_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::DamageInstance> damage_info{};
  bool is_kill = false;
  bool is_basic_attack = false;
  CombatEvent_DamageDealtDetailsT() = default;
  CombatEvent_DamageDealtDetailsT(const CombatEvent_DamageDealtDetailsT &o);
  CombatEvent_DamageDealtDetailsT(CombatEvent_DamageDealtDetailsT&&) FLATBUFFERS_NOEXCEPT = default;
  CombatEvent_DamageDealtDetailsT &operator=(CombatEvent_DamageDealtDetailsT o) FLATBUFFERS_NOEXCEPT;
};

struct CombatEvent_DamageDealtDetails FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CombatEvent_DamageDealtDetailsT NativeTableType;
  typedef CombatEvent_DamageDealtDetailsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_ENTITY_ID = 4,
    VT_TARGET_ENTITY_ID = 6,
    VT_DAMAGE_INFO = 8,
    VT_IS_KILL = 10,
    VT_IS_BASIC_ATTACK = 12
  };
  uint64_t source_entity_id() const {
    return GetField<uint64_t>(VT_SOURCE_ENTITY_ID, 0);
  }
  uint64_t target_entity_id() const {
    return GetField<uint64_t>(VT_TARGET_ENTITY_ID, 0);
  }
  const RiftForged::Networking::Shared::DamageInstance *damage_info() const {
    return GetStruct<const RiftForged::Networking::Shared::DamageInstance *>(VT_DAMAGE_INFO);
  }
  bool is_kill() const {
    return GetField<uint8_t>(VT_IS_KILL, 0) != 0;
  }
  bool is_basic_attack() const {
    return GetField<uint8_t>(VT_IS_BASIC_ATTACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SOURCE_ENTITY_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_TARGET_ENTITY_ID, 8) &&
           VerifyFieldRequired<RiftForged::Networking::Shared::DamageInstance>(verifier, VT_DAMAGE_INFO, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_KILL, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_BASIC_ATTACK, 1) &&
           verifier.EndTable();
  }
  CombatEvent_DamageDealtDetailsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CombatEvent_DamageDealtDetailsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CombatEvent_DamageDealtDetails> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CombatEvent_DamageDealtDetailsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CombatEvent_DamageDealtDetailsBuilder {
  typedef CombatEvent_DamageDealtDetails Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_entity_id(uint64_t source_entity_id) {
    fbb_.AddElement<uint64_t>(CombatEvent_DamageDealtDetails::VT_SOURCE_ENTITY_ID, source_entity_id, 0);
  }
  void add_target_entity_id(uint64_t target_entity_id) {
    fbb_.AddElement<uint64_t>(CombatEvent_DamageDealtDetails::VT_TARGET_ENTITY_ID, target_entity_id, 0);
  }
  void add_damage_info(const RiftForged::Networking::Shared::DamageInstance *damage_info) {
    fbb_.AddStruct(CombatEvent_DamageDealtDetails::VT_DAMAGE_INFO, damage_info);
  }
  void add_is_kill(bool is_kill) {
    fbb_.AddElement<uint8_t>(CombatEvent_DamageDealtDetails::VT_IS_KILL, static_cast<uint8_t>(is_kill), 0);
  }
  void add_is_basic_attack(bool is_basic_attack) {
    fbb_.AddElement<uint8_t>(CombatEvent_DamageDealtDetails::VT_IS_BASIC_ATTACK, static_cast<uint8_t>(is_basic_attack), 0);
  }
  explicit CombatEvent_DamageDealtDetailsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CombatEvent_DamageDealtDetails> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CombatEvent_DamageDealtDetails>(end);
    fbb_.Required(o, CombatEvent_DamageDealtDetails::VT_DAMAGE_INFO);
    return o;
  }
};

inline ::flatbuffers::Offset<CombatEvent_DamageDealtDetails> CreateCombatEvent_DamageDealtDetails(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t source_entity_id = 0,
    uint64_t target_entity_id = 0,
    const RiftForged::Networking::Shared::DamageInstance *damage_info = nullptr,
    bool is_kill = false,
    bool is_basic_attack = false) {
  CombatEvent_DamageDealtDetailsBuilder builder_(_fbb);
  builder_.add_target_entity_id(target_entity_id);
  builder_.add_source_entity_id(source_entity_id);
  builder_.add_damage_info(damage_info);
  builder_.add_is_basic_attack(is_basic_attack);
  builder_.add_is_kill(is_kill);
  return builder_.Finish();
}

::flatbuffers::Offset<CombatEvent_DamageDealtDetails> CreateCombatEvent_DamageDealtDetails(::flatbuffers::FlatBufferBuilder &_fbb, const CombatEvent_DamageDealtDetailsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_SpawnProjectileMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_SpawnProjectileMsg TableType;
  uint64_t projectile_id = 0;
  uint64_t owner_entity_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> start_position{};
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> initial_direction{};
  float speed = 0.0f;
  float max_range = 0.0f;
  std::string projectile_vfx_tag{};
  S2C_SpawnProjectileMsgT() = default;
  S2C_SpawnProjectileMsgT(const S2C_SpawnProjectileMsgT &o);
  S2C_SpawnProjectileMsgT(S2C_SpawnProjectileMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  S2C_SpawnProjectileMsgT &operator=(S2C_SpawnProjectileMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct S2C_SpawnProjectileMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_SpawnProjectileMsgT NativeTableType;
  typedef S2C_SpawnProjectileMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROJECTILE_ID = 4,
    VT_OWNER_ENTITY_ID = 6,
    VT_START_POSITION = 8,
    VT_INITIAL_DIRECTION = 10,
    VT_SPEED = 12,
    VT_MAX_RANGE = 14,
    VT_PROJECTILE_VFX_TAG = 16
  };
  uint64_t projectile_id() const {
    return GetField<uint64_t>(VT_PROJECTILE_ID, 0);
  }
  bool KeyCompareLessThan(const S2C_SpawnProjectileMsg * const o) const {
    return projectile_id() < o->projectile_id();
  }
  int KeyCompareWithValue(uint64_t _projectile_id) const {
    return static_cast<int>(projectile_id() > _projectile_id) - static_cast<int>(projectile_id() < _projectile_id);
  }
  uint64_t owner_entity_id() const {
    return GetField<uint64_t>(VT_OWNER_ENTITY_ID, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *start_position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_START_POSITION);
  }
  const RiftForged::Networking::Shared::Vec3 *initial_direction() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_INITIAL_DIRECTION);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  float max_range() const {
    return GetField<float>(VT_MAX_RANGE, 0.0f);
  }
  const ::flatbuffers::String *projectile_vfx_tag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROJECTILE_VFX_TAG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PROJECTILE_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_OWNER_ENTITY_ID, 8) &&
           VerifyFieldRequired<RiftForged::Networking::Shared::Vec3>(verifier, VT_START_POSITION, 4) &&
           VerifyFieldRequired<RiftForged::Networking::Shared::Vec3>(verifier, VT_INITIAL_DIRECTION, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           VerifyField<float>(verifier, VT_MAX_RANGE, 4) &&
           VerifyOffset(verifier, VT_PROJECTILE_VFX_TAG) &&
           verifier.VerifyString(projectile_vfx_tag()) &&
           verifier.EndTable();
  }
  S2C_SpawnProjectileMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_SpawnProjectileMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_SpawnProjectileMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnProjectileMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_SpawnProjectileMsgBuilder {
  typedef S2C_SpawnProjectileMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_projectile_id(uint64_t projectile_id) {
    fbb_.AddElement<uint64_t>(S2C_SpawnProjectileMsg::VT_PROJECTILE_ID, projectile_id, 0);
  }
  void add_owner_entity_id(uint64_t owner_entity_id) {
    fbb_.AddElement<uint64_t>(S2C_SpawnProjectileMsg::VT_OWNER_ENTITY_ID, owner_entity_id, 0);
  }
  void add_start_position(const RiftForged::Networking::Shared::Vec3 *start_position) {
    fbb_.AddStruct(S2C_SpawnProjectileMsg::VT_START_POSITION, start_position);
  }
  void add_initial_direction(const RiftForged::Networking::Shared::Vec3 *initial_direction) {
    fbb_.AddStruct(S2C_SpawnProjectileMsg::VT_INITIAL_DIRECTION, initial_direction);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(S2C_SpawnProjectileMsg::VT_SPEED, speed, 0.0f);
  }
  void add_max_range(float max_range) {
    fbb_.AddElement<float>(S2C_SpawnProjectileMsg::VT_MAX_RANGE, max_range, 0.0f);
  }
  void add_projectile_vfx_tag(::flatbuffers::Offset<::flatbuffers::String> projectile_vfx_tag) {
    fbb_.AddOffset(S2C_SpawnProjectileMsg::VT_PROJECTILE_VFX_TAG, projectile_vfx_tag);
  }
  explicit S2C_SpawnProjectileMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_SpawnProjectileMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_SpawnProjectileMsg>(end);
    fbb_.Required(o, S2C_SpawnProjectileMsg::VT_START_POSITION);
    fbb_.Required(o, S2C_SpawnProjectileMsg::VT_INITIAL_DIRECTION);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_SpawnProjectileMsg> CreateS2C_SpawnProjectileMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t projectile_id = 0,
    uint64_t owner_entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *start_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *initial_direction = nullptr,
    float speed = 0.0f,
    float max_range = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> projectile_vfx_tag = 0) {
  S2C_SpawnProjectileMsgBuilder builder_(_fbb);
  builder_.add_owner_entity_id(owner_entity_id);
  builder_.add_projectile_id(projectile_id);
  builder_.add_projectile_vfx_tag(projectile_vfx_tag);
  builder_.add_max_range(max_range);
  builder_.add_speed(speed);
  builder_.add_initial_direction(initial_direction);
  builder_.add_start_position(start_position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_SpawnProjectileMsg> CreateS2C_SpawnProjectileMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t projectile_id = 0,
    uint64_t owner_entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *start_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *initial_direction = nullptr,
    float speed = 0.0f,
    float max_range = 0.0f,
    const char *projectile_vfx_tag = nullptr) {
  auto projectile_vfx_tag__ = projectile_vfx_tag ? _fbb.CreateString(projectile_vfx_tag) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_SpawnProjectileMsg(
      _fbb,
      projectile_id,
      owner_entity_id,
      start_position,
      initial_direction,
      speed,
      max_range,
      projectile_vfx_tag__);
}

::flatbuffers::Offset<S2C_SpawnProjectileMsg> CreateS2C_SpawnProjectileMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnProjectileMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_BasicAttackFailedMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_BasicAttackFailedMsg TableType;
  uint64_t player_id = 0;
  RiftForged::Networking::UDP::S2C::BasicAttackFailureReason reason = RiftForged::Networking::UDP::S2C::BasicAttackFailureReason_UNKNOWN;
};

struct S2C_BasicAttackFailedMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_BasicAttackFailedMsgT NativeTableType;
  typedef S2C_BasicAttackFailedMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_REASON = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  RiftForged::Networking::UDP::S2C::BasicAttackFailureReason reason() const {
    return static_cast<RiftForged::Networking::UDP::S2C::BasicAttackFailureReason>(GetField<int8_t>(VT_REASON, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<int8_t>(verifier, VT_REASON, 1) &&
           verifier.EndTable();
  }
  S2C_BasicAttackFailedMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_BasicAttackFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_BasicAttackFailedMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_BasicAttackFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_BasicAttackFailedMsgBuilder {
  typedef S2C_BasicAttackFailedMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(S2C_BasicAttackFailedMsg::VT_PLAYER_ID, player_id, 0);
  }
  void add_reason(RiftForged::Networking::UDP::S2C::BasicAttackFailureReason reason) {
    fbb_.AddElement<int8_t>(S2C_BasicAttackFailedMsg::VT_REASON, static_cast<int8_t>(reason), 0);
  }
  explicit S2C_BasicAttackFailedMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_BasicAttackFailedMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_BasicAttackFailedMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_BasicAttackFailedMsg> CreateS2C_BasicAttackFailedMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    RiftForged::Networking::UDP::S2C::BasicAttackFailureReason reason = RiftForged::Networking::UDP::S2C::BasicAttackFailureReason_UNKNOWN) {
  S2C_BasicAttackFailedMsgBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_reason(reason);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_BasicAttackFailedMsg> CreateS2C_BasicAttackFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_BasicAttackFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_RiftStepFailedMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_RiftStepFailedMsg TableType;
  uint64_t player_id = 0;
  RiftForged::Networking::UDP::S2C::RiftStepFailureReason reason = RiftForged::Networking::UDP::S2C::RiftStepFailureReason_UNKNOWN;
};

struct S2C_RiftStepFailedMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_RiftStepFailedMsgT NativeTableType;
  typedef S2C_RiftStepFailedMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_REASON = 6
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  RiftForged::Networking::UDP::S2C::RiftStepFailureReason reason() const {
    return static_cast<RiftForged::Networking::UDP::S2C::RiftStepFailureReason>(GetField<int8_t>(VT_REASON, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<int8_t>(verifier, VT_REASON, 1) &&
           verifier.EndTable();
  }
  S2C_RiftStepFailedMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_RiftStepFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_RiftStepFailedMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_RiftStepFailedMsgBuilder {
  typedef S2C_RiftStepFailedMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(S2C_RiftStepFailedMsg::VT_PLAYER_ID, player_id, 0);
  }
  void add_reason(RiftForged::Networking::UDP::S2C::RiftStepFailureReason reason) {
    fbb_.AddElement<int8_t>(S2C_RiftStepFailedMsg::VT_REASON, static_cast<int8_t>(reason), 0);
  }
  explicit S2C_RiftStepFailedMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_RiftStepFailedMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_RiftStepFailedMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_RiftStepFailedMsg> CreateS2C_RiftStepFailedMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    RiftForged::Networking::UDP::S2C::RiftStepFailureReason reason = RiftForged::Networking::UDP::S2C::RiftStepFailureReason_UNKNOWN) {
  S2C_RiftStepFailedMsgBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_reason(reason);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_RiftStepFailedMsg> CreateS2C_RiftStepFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_AbilityFailedMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_AbilityFailedMsg TableType;
  uint64_t player_id = 0;
  uint32_t ability_id = 0;
  RiftForged::Networking::UDP::S2C::AbilityFailureReason reason = RiftForged::Networking::UDP::S2C::AbilityFailureReason_UNKNOWN;
};

struct S2C_AbilityFailedMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_AbilityFailedMsgT NativeTableType;
  typedef S2C_AbilityFailedMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER_ID = 4,
    VT_ABILITY_ID = 6,
    VT_REASON = 8
  };
  uint64_t player_id() const {
    return GetField<uint64_t>(VT_PLAYER_ID, 0);
  }
  uint32_t ability_id() const {
    return GetField<uint32_t>(VT_ABILITY_ID, 0);
  }
  RiftForged::Networking::UDP::S2C::AbilityFailureReason reason() const {
    return static_cast<RiftForged::Networking::UDP::S2C::AbilityFailureReason>(GetField<int8_t>(VT_REASON, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_PLAYER_ID, 8) &&
           VerifyField<uint32_t>(verifier, VT_ABILITY_ID, 4) &&
           VerifyField<int8_t>(verifier, VT_REASON, 1) &&
           verifier.EndTable();
  }
  S2C_AbilityFailedMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_AbilityFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_AbilityFailedMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_AbilityFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_AbilityFailedMsgBuilder {
  typedef S2C_AbilityFailedMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_player_id(uint64_t player_id) {
    fbb_.AddElement<uint64_t>(S2C_AbilityFailedMsg::VT_PLAYER_ID, player_id, 0);
  }
  void add_ability_id(uint32_t ability_id) {
    fbb_.AddElement<uint32_t>(S2C_AbilityFailedMsg::VT_ABILITY_ID, ability_id, 0);
  }
  void add_reason(RiftForged::Networking::UDP::S2C::AbilityFailureReason reason) {
    fbb_.AddElement<int8_t>(S2C_AbilityFailedMsg::VT_REASON, static_cast<int8_t>(reason), 0);
  }
  explicit S2C_AbilityFailedMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_AbilityFailedMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_AbilityFailedMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_AbilityFailedMsg> CreateS2C_AbilityFailedMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t player_id = 0,
    uint32_t ability_id = 0,
    RiftForged::Networking::UDP::S2C::AbilityFailureReason reason = RiftForged::Networking::UDP::S2C::AbilityFailureReason_UNKNOWN) {
  S2C_AbilityFailedMsgBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  builder_.add_ability_id(ability_id);
  builder_.add_reason(reason);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_AbilityFailedMsg> CreateS2C_AbilityFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_AbilityFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_EntityStateUpdateMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_EntityStateUpdateMsg TableType;
  uint64_t entity_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> position{};
  std::unique_ptr<RiftForged::Networking::Shared::Quaternion> orientation{};
  int32_t current_health = 0;
  uint32_t max_health = 0;
  int32_t current_will = 0;
  uint32_t max_will = 0;
  uint64_t server_timestamp_ms = 0;
  uint32_t animation_state_id = 0;
  std::vector<RiftForged::Networking::Shared::StatusEffectCategory> active_status_effects{};
  S2C_EntityStateUpdateMsgT() = default;
  S2C_EntityStateUpdateMsgT(const S2C_EntityStateUpdateMsgT &o);
  S2C_EntityStateUpdateMsgT(S2C_EntityStateUpdateMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  S2C_EntityStateUpdateMsgT &operator=(S2C_EntityStateUpdateMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct S2C_EntityStateUpdateMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_EntityStateUpdateMsgT NativeTableType;
  typedef S2C_EntityStateUpdateMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_ID = 4,
    VT_POSITION = 6,
    VT_ORIENTATION = 8,
    VT_CURRENT_HEALTH = 10,
    VT_MAX_HEALTH = 12,
    VT_CURRENT_WILL = 14,
    VT_MAX_WILL = 16,
    VT_SERVER_TIMESTAMP_MS = 18,
    VT_ANIMATION_STATE_ID = 20,
    VT_ACTIVE_STATUS_EFFECTS = 22
  };
  uint64_t entity_id() const {
    return GetField<uint64_t>(VT_ENTITY_ID, 0);
  }
  bool KeyCompareLessThan(const S2C_EntityStateUpdateMsg * const o) const {
    return entity_id() < o->entity_id();
  }
  int KeyCompareWithValue(uint64_t _entity_id) const {
    return static_cast<int>(entity_id() > _entity_id) - static_cast<int>(entity_id() < _entity_id);
  }
  const RiftForged::Networking::Shared::Vec3 *position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_POSITION);
  }
  const RiftForged::Networking::Shared::Quaternion *orientation() const {
    return GetStruct<const RiftForged::Networking::Shared::Quaternion *>(VT_ORIENTATION);
  }
  int32_t current_health() const {
    return GetField<int32_t>(VT_CURRENT_HEALTH, 0);
  }
  uint32_t max_health() const {
    return GetField<uint32_t>(VT_MAX_HEALTH, 0);
  }
  int32_t current_will() const {
    return GetField<int32_t>(VT_CURRENT_WILL, 0);
  }
  uint32_t max_will() const {
    return GetField<uint32_t>(VT_MAX_WILL, 0);
  }
  uint64_t server_timestamp_ms() const {
    return GetField<uint64_t>(VT_SERVER_TIMESTAMP_MS, 0);
  }
  uint32_t animation_state_id() const {
    return GetField<uint32_t>(VT_ANIMATION_STATE_ID, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *active_status_effects() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_ACTIVE_STATUS_EFFECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ENTITY_ID, 8) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_POSITION, 4) &&
           VerifyField<RiftForged::Networking::Shared::Quaternion>(verifier, VT_ORIENTATION, 4) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_HEALTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAX_HEALTH, 4) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_WILL, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAX_WILL, 4) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIMESTAMP_MS, 8) &&
           VerifyField<uint32_t>(verifier, VT_ANIMATION_STATE_ID, 4) &&
           VerifyOffset(verifier, VT_ACTIVE_STATUS_EFFECTS) &&
           verifier.VerifyVector(active_status_effects()) &&
           verifier.EndTable();
  }
  S2C_EntityStateUpdateMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_EntityStateUpdateMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_EntityStateUpdateMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_EntityStateUpdateMsgBuilder {
  typedef S2C_EntityStateUpdateMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_id(uint64_t entity_id) {
    fbb_.AddElement<uint64_t>(S2C_EntityStateUpdateMsg::VT_ENTITY_ID, entity_id, 0);
  }
  void add_position(const RiftForged::Networking::Shared::Vec3 *position) {
    fbb_.AddStruct(S2C_EntityStateUpdateMsg::VT_POSITION, position);
  }
  void add_orientation(const RiftForged::Networking::Shared::Quaternion *orientation) {
    fbb_.AddStruct(S2C_EntityStateUpdateMsg::VT_ORIENTATION, orientation);
  }
  void add_current_health(int32_t current_health) {
    fbb_.AddElement<int32_t>(S2C_EntityStateUpdateMsg::VT_CURRENT_HEALTH, current_health, 0);
  }
  void add_max_health(uint32_t max_health) {
    fbb_.AddElement<uint32_t>(S2C_EntityStateUpdateMsg::VT_MAX_HEALTH, max_health, 0);
  }
  void add_current_will(int32_t current_will) {
    fbb_.AddElement<int32_t>(S2C_EntityStateUpdateMsg::VT_CURRENT_WILL, current_will, 0);
  }
  void add_max_will(uint32_t max_will) {
    fbb_.AddElement<uint32_t>(S2C_EntityStateUpdateMsg::VT_MAX_WILL, max_will, 0);
  }
  void add_server_timestamp_ms(uint64_t server_timestamp_ms) {
    fbb_.AddElement<uint64_t>(S2C_EntityStateUpdateMsg::VT_SERVER_TIMESTAMP_MS, server_timestamp_ms, 0);
  }
  void add_animation_state_id(uint32_t animation_state_id) {
    fbb_.AddElement<uint32_t>(S2C_EntityStateUpdateMsg::VT_ANIMATION_STATE_ID, animation_state_id, 0);
  }
  void add_active_status_effects(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> active_status_effects) {
    fbb_.AddOffset(S2C_EntityStateUpdateMsg::VT_ACTIVE_STATUS_EFFECTS, active_status_effects);
  }
  explicit S2C_EntityStateUpdateMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_EntityStateUpdateMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> CreateS2C_EntityStateUpdateMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *position = nullptr,
    const RiftForged::Networking::Shared::Quaternion *orientation = nullptr,
    int32_t current_health = 0,
    uint32_t max_health = 0,
    int32_t current_will = 0,
    uint32_t max_will = 0,
    uint64_t server_timestamp_ms = 0,
    uint32_t animation_state_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> active_status_effects = 0) {
  S2C_EntityStateUpdateMsgBuilder builder_(_fbb);
  builder_.add_server_timestamp_ms(server_timestamp_ms);
  builder_.add_entity_id(entity_id);
  builder_.add_active_status_effects(active_status_effects);
  builder_.add_animation_state_id(animation_state_id);
  builder_.add_max_will(max_will);
  builder_.add_current_will(current_will);
  builder_.add_max_health(max_health);
  builder_.add_current_health(current_health);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> CreateS2C_EntityStateUpdateMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *position = nullptr,
    const RiftForged::Networking::Shared::Quaternion *orientation = nullptr,
    int32_t current_health = 0,
    uint32_t max_health = 0,
    int32_t current_will = 0,
    uint32_t max_will = 0,
    uint64_t server_timestamp_ms = 0,
    uint32_t animation_state_id = 0,
    const std::vector<uint32_t> *active_status_effects = nullptr) {
  auto active_status_effects__ = active_status_effects ? _fbb.CreateVector<uint32_t>(*active_status_effects) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_EntityStateUpdateMsg(
      _fbb,
      entity_id,
      position,
      orientation,
      current_health,
      max_health,
      current_will,
      max_will,
      server_timestamp_ms,
      animation_state_id,
      active_status_effects__);
}

::flatbuffers::Offset<S2C_EntityStateUpdateMsg> CreateS2C_EntityStateUpdateMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_EntityStateUpdateMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_RiftStepInitiatedMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_RiftStepInitiatedMsg TableType;
  uint64_t instigator_entity_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> actual_start_position{};
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> calculated_target_position{};
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> actual_final_position{};
  float cosmetic_travel_duration_sec = 0.25f;
  std::vector<RiftForged::Networking::UDP::S2C::RiftStepEffectPayloadUnion> entry_effects{};
  std::vector<RiftForged::Networking::UDP::S2C::RiftStepEffectPayloadUnion> exit_effects{};
  std::string start_vfx_id{};
  std::string travel_vfx_id{};
  std::string end_vfx_id{};
  S2C_RiftStepInitiatedMsgT() = default;
  S2C_RiftStepInitiatedMsgT(const S2C_RiftStepInitiatedMsgT &o);
  S2C_RiftStepInitiatedMsgT(S2C_RiftStepInitiatedMsgT&&) FLATBUFFERS_NOEXCEPT = default;
  S2C_RiftStepInitiatedMsgT &operator=(S2C_RiftStepInitiatedMsgT o) FLATBUFFERS_NOEXCEPT;
};

struct S2C_RiftStepInitiatedMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_RiftStepInitiatedMsgT NativeTableType;
  typedef S2C_RiftStepInitiatedMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTIGATOR_ENTITY_ID = 4,
    VT_ACTUAL_START_POSITION = 6,
    VT_CALCULATED_TARGET_POSITION = 8,
    VT_ACTUAL_FINAL_POSITION = 10,
    VT_COSMETIC_TRAVEL_DURATION_SEC = 12,
    VT_ENTRY_EFFECTS_TYPE = 14,
    VT_ENTRY_EFFECTS = 16,
    VT_EXIT_EFFECTS_TYPE = 18,
    VT_EXIT_EFFECTS = 20,
    VT_START_VFX_ID = 22,
    VT_TRAVEL_VFX_ID = 24,
    VT_END_VFX_ID = 26
  };
  uint64_t instigator_entity_id() const {
    return GetField<uint64_t>(VT_INSTIGATOR_ENTITY_ID, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *actual_start_position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_ACTUAL_START_POSITION);
  }
  const RiftForged::Networking::Shared::Vec3 *calculated_target_position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_CALCULATED_TARGET_POSITION);
  }
  const RiftForged::Networking::Shared::Vec3 *actual_final_position() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_ACTUAL_FINAL_POSITION);
  }
  float cosmetic_travel_duration_sec() const {
    return GetField<float>(VT_COSMETIC_TRAVEL_DURATION_SEC, 0.25f);
  }
  const ::flatbuffers::Vector<int8_t> *entry_effects_type() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_ENTRY_EFFECTS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *entry_effects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_ENTRY_EFFECTS);
  }
  const ::flatbuffers::Vector<int8_t> *exit_effects_type() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_EXIT_EFFECTS_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *exit_effects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *>(VT_EXIT_EFFECTS);
  }
  const ::flatbuffers::String *start_vfx_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START_VFX_ID);
  }
  const ::flatbuffers::String *travel_vfx_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRAVEL_VFX_ID);
  }
  const ::flatbuffers::String *end_vfx_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_END_VFX_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_INSTIGATOR_ENTITY_ID, 8) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_ACTUAL_START_POSITION, 4) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_CALCULATED_TARGET_POSITION, 4) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_ACTUAL_FINAL_POSITION, 4) &&
           VerifyField<float>(verifier, VT_COSMETIC_TRAVEL_DURATION_SEC, 4) &&
           VerifyOffset(verifier, VT_ENTRY_EFFECTS_TYPE) &&
           verifier.VerifyVector(entry_effects_type()) &&
           VerifyOffset(verifier, VT_ENTRY_EFFECTS) &&
           verifier.VerifyVector(entry_effects()) &&
           VerifyRiftStepEffectPayloadVector(verifier, entry_effects(), entry_effects_type()) &&
           VerifyOffset(verifier, VT_EXIT_EFFECTS_TYPE) &&
           verifier.VerifyVector(exit_effects_type()) &&
           VerifyOffset(verifier, VT_EXIT_EFFECTS) &&
           verifier.VerifyVector(exit_effects()) &&
           VerifyRiftStepEffectPayloadVector(verifier, exit_effects(), exit_effects_type()) &&
           VerifyOffset(verifier, VT_START_VFX_ID) &&
           verifier.VerifyString(start_vfx_id()) &&
           VerifyOffset(verifier, VT_TRAVEL_VFX_ID) &&
           verifier.VerifyString(travel_vfx_id()) &&
           VerifyOffset(verifier, VT_END_VFX_ID) &&
           verifier.VerifyString(end_vfx_id()) &&
           verifier.EndTable();
  }
  S2C_RiftStepInitiatedMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_RiftStepInitiatedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepInitiatedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_RiftStepInitiatedMsgBuilder {
  typedef S2C_RiftStepInitiatedMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_instigator_entity_id(uint64_t instigator_entity_id) {
    fbb_.AddElement<uint64_t>(S2C_RiftStepInitiatedMsg::VT_INSTIGATOR_ENTITY_ID, instigator_entity_id, 0);
  }
  void add_actual_start_position(const RiftForged::Networking::Shared::Vec3 *actual_start_position) {
    fbb_.AddStruct(S2C_RiftStepInitiatedMsg::VT_ACTUAL_START_POSITION, actual_start_position);
  }
  void add_calculated_target_position(const RiftForged::Networking::Shared::Vec3 *calculated_target_position) {
    fbb_.AddStruct(S2C_RiftStepInitiatedMsg::VT_CALCULATED_TARGET_POSITION, calculated_target_position);
  }
  void add_actual_final_position(const RiftForged::Networking::Shared::Vec3 *actual_final_position) {
    fbb_.AddStruct(S2C_RiftStepInitiatedMsg::VT_ACTUAL_FINAL_POSITION, actual_final_position);
  }
  void add_cosmetic_travel_duration_sec(float cosmetic_travel_duration_sec) {
    fbb_.AddElement<float>(S2C_RiftStepInitiatedMsg::VT_COSMETIC_TRAVEL_DURATION_SEC, cosmetic_travel_duration_sec, 0.25f);
  }
  void add_entry_effects_type(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> entry_effects_type) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_ENTRY_EFFECTS_TYPE, entry_effects_type);
  }
  void add_entry_effects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> entry_effects) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_ENTRY_EFFECTS, entry_effects);
  }
  void add_exit_effects_type(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> exit_effects_type) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_EXIT_EFFECTS_TYPE, exit_effects_type);
  }
  void add_exit_effects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> exit_effects) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_EXIT_EFFECTS, exit_effects);
  }
  void add_start_vfx_id(::flatbuffers::Offset<::flatbuffers::String> start_vfx_id) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_START_VFX_ID, start_vfx_id);
  }
  void add_travel_vfx_id(::flatbuffers::Offset<::flatbuffers::String> travel_vfx_id) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_TRAVEL_VFX_ID, travel_vfx_id);
  }
  void add_end_vfx_id(::flatbuffers::Offset<::flatbuffers::String> end_vfx_id) {
    fbb_.AddOffset(S2C_RiftStepInitiatedMsg::VT_END_VFX_ID, end_vfx_id);
  }
  explicit S2C_RiftStepInitiatedMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> CreateS2C_RiftStepInitiatedMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t instigator_entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *actual_start_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *calculated_target_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *actual_final_position = nullptr,
    float cosmetic_travel_duration_sec = 0.25f,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> entry_effects_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> entry_effects = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> exit_effects_type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<void>>> exit_effects = 0,
    ::flatbuffers::Offset<::flatbuffers::String> start_vfx_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> travel_vfx_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> end_vfx_id = 0) {
  S2C_RiftStepInitiatedMsgBuilder builder_(_fbb);
  builder_.add_instigator_entity_id(instigator_entity_id);
  builder_.add_end_vfx_id(end_vfx_id);
  builder_.add_travel_vfx_id(travel_vfx_id);
  builder_.add_start_vfx_id(start_vfx_id);
  builder_.add_exit_effects(exit_effects);
  builder_.add_exit_effects_type(exit_effects_type);
  builder_.add_entry_effects(entry_effects);
  builder_.add_entry_effects_type(entry_effects_type);
  builder_.add_cosmetic_travel_duration_sec(cosmetic_travel_duration_sec);
  builder_.add_actual_final_position(actual_final_position);
  builder_.add_calculated_target_position(calculated_target_position);
  builder_.add_actual_start_position(actual_start_position);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> CreateS2C_RiftStepInitiatedMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t instigator_entity_id = 0,
    const RiftForged::Networking::Shared::Vec3 *actual_start_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *calculated_target_position = nullptr,
    const RiftForged::Networking::Shared::Vec3 *actual_final_position = nullptr,
    float cosmetic_travel_duration_sec = 0.25f,
    const std::vector<int8_t> *entry_effects_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *entry_effects = nullptr,
    const std::vector<int8_t> *exit_effects_type = nullptr,
    const std::vector<::flatbuffers::Offset<void>> *exit_effects = nullptr,
    const char *start_vfx_id = nullptr,
    const char *travel_vfx_id = nullptr,
    const char *end_vfx_id = nullptr) {
  auto entry_effects_type__ = entry_effects_type ? _fbb.CreateVector<int8_t>(*entry_effects_type) : 0;
  auto entry_effects__ = entry_effects ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*entry_effects) : 0;
  auto exit_effects_type__ = exit_effects_type ? _fbb.CreateVector<int8_t>(*exit_effects_type) : 0;
  auto exit_effects__ = exit_effects ? _fbb.CreateVector<::flatbuffers::Offset<void>>(*exit_effects) : 0;
  auto start_vfx_id__ = start_vfx_id ? _fbb.CreateString(start_vfx_id) : 0;
  auto travel_vfx_id__ = travel_vfx_id ? _fbb.CreateString(travel_vfx_id) : 0;
  auto end_vfx_id__ = end_vfx_id ? _fbb.CreateString(end_vfx_id) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_RiftStepInitiatedMsg(
      _fbb,
      instigator_entity_id,
      actual_start_position,
      calculated_target_position,
      actual_final_position,
      cosmetic_travel_duration_sec,
      entry_effects_type__,
      entry_effects__,
      exit_effects_type__,
      exit_effects__,
      start_vfx_id__,
      travel_vfx_id__,
      end_vfx_id__);
}

::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> CreateS2C_RiftStepInitiatedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepInitiatedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_ResourceUpdateMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_ResourceUpdateMsg TableType;
  RiftForged::Networking::UDP::S2C::ResourceType resource_type = RiftForged::Networking::UDP::S2C::ResourceType_Will;
  int32_t current_value = 0;
  uint32_t max_value = 0;
};

struct S2C_ResourceUpdateMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_ResourceUpdateMsgT NativeTableType;
  typedef S2C_ResourceUpdateMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESOURCE_TYPE = 4,
    VT_CURRENT_VALUE = 6,
    VT_MAX_VALUE = 8
  };
  RiftForged::Networking::UDP::S2C::ResourceType resource_type() const {
    return static_cast<RiftForged::Networking::UDP::S2C::ResourceType>(GetField<int8_t>(VT_RESOURCE_TYPE, 0));
  }
  int32_t current_value() const {
    return GetField<int32_t>(VT_CURRENT_VALUE, 0);
  }
  uint32_t max_value() const {
    return GetField<uint32_t>(VT_MAX_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESOURCE_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_CURRENT_VALUE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAX_VALUE, 4) &&
           verifier.EndTable();
  }
  S2C_ResourceUpdateMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_ResourceUpdateMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_ResourceUpdateMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_ResourceUpdateMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_ResourceUpdateMsgBuilder {
  typedef S2C_ResourceUpdateMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_resource_type(RiftForged::Networking::UDP::S2C::ResourceType resource_type) {
    fbb_.AddElement<int8_t>(S2C_ResourceUpdateMsg::VT_RESOURCE_TYPE, static_cast<int8_t>(resource_type), 0);
  }
  void add_current_value(int32_t current_value) {
    fbb_.AddElement<int32_t>(S2C_ResourceUpdateMsg::VT_CURRENT_VALUE, current_value, 0);
  }
  void add_max_value(uint32_t max_value) {
    fbb_.AddElement<uint32_t>(S2C_ResourceUpdateMsg::VT_MAX_VALUE, max_value, 0);
  }
  explicit S2C_ResourceUpdateMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_ResourceUpdateMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_ResourceUpdateMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_ResourceUpdateMsg> CreateS2C_ResourceUpdateMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::UDP::S2C::ResourceType resource_type = RiftForged::Networking::UDP::S2C::ResourceType_Will,
    int32_t current_value = 0,
    uint32_t max_value = 0) {
  S2C_ResourceUpdateMsgBuilder builder_(_fbb);
  builder_.add_max_value(max_value);
  builder_.add_current_value(current_value);
  builder_.add_resource_type(resource_type);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_ResourceUpdateMsg> CreateS2C_ResourceUpdateMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_ResourceUpdateMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_CombatEventMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_CombatEventMsg TableType;
  RiftForged::Networking::UDP::S2C::CombatEventType event_type = RiftForged::Networking::UDP::S2C::CombatEventType_None;
  RiftForged::Networking::UDP::S2C::CombatEventPayloadUnion event_payload{};
  uint64_t server_timestamp_ms = 0;
};

struct S2C_CombatEventMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_CombatEventMsgT NativeTableType;
  typedef S2C_CombatEventMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENT_TYPE = 4,
    VT_EVENT_PAYLOAD_TYPE = 6,
    VT_EVENT_PAYLOAD = 8,
    VT_SERVER_TIMESTAMP_MS = 10
  };
  RiftForged::Networking::UDP::S2C::CombatEventType event_type() const {
    return static_cast<RiftForged::Networking::UDP::S2C::CombatEventType>(GetField<int8_t>(VT_EVENT_TYPE, 0));
  }
  RiftForged::Networking::UDP::S2C::CombatEventPayload event_payload_type() const {
    return static_cast<RiftForged::Networking::UDP::S2C::CombatEventPayload>(GetField<int8_t>(VT_EVENT_PAYLOAD_TYPE, 0));
  }
  const void *event_payload() const {
    return GetPointer<const void *>(VT_EVENT_PAYLOAD);
  }
  template<typename T> const T *event_payload_as() const;
  const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails *event_payload_as_DamageDealt() const {
    return event_payload_type() == RiftForged::Networking::UDP::S2C::CombatEventPayload_DamageDealt ? static_cast<const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails *>(event_payload()) : nullptr;
  }
  uint64_t server_timestamp_ms() const {
    return GetField<uint64_t>(VT_SERVER_TIMESTAMP_MS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_EVENT_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_EVENT_PAYLOAD_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_EVENT_PAYLOAD) &&
           VerifyCombatEventPayload(verifier, event_payload(), event_payload_type()) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIMESTAMP_MS, 8) &&
           verifier.EndTable();
  }
  S2C_CombatEventMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_CombatEventMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_CombatEventMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_CombatEventMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails *S2C_CombatEventMsg::event_payload_as<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails>() const {
  return event_payload_as_DamageDealt();
}

struct S2C_CombatEventMsgBuilder {
  typedef S2C_CombatEventMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_event_type(RiftForged::Networking::UDP::S2C::CombatEventType event_type) {
    fbb_.AddElement<int8_t>(S2C_CombatEventMsg::VT_EVENT_TYPE, static_cast<int8_t>(event_type), 0);
  }
  void add_event_payload_type(RiftForged::Networking::UDP::S2C::CombatEventPayload event_payload_type) {
    fbb_.AddElement<int8_t>(S2C_CombatEventMsg::VT_EVENT_PAYLOAD_TYPE, static_cast<int8_t>(event_payload_type), 0);
  }
  void add_event_payload(::flatbuffers::Offset<void> event_payload) {
    fbb_.AddOffset(S2C_CombatEventMsg::VT_EVENT_PAYLOAD, event_payload);
  }
  void add_server_timestamp_ms(uint64_t server_timestamp_ms) {
    fbb_.AddElement<uint64_t>(S2C_CombatEventMsg::VT_SERVER_TIMESTAMP_MS, server_timestamp_ms, 0);
  }
  explicit S2C_CombatEventMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_CombatEventMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_CombatEventMsg>(end);
    fbb_.Required(o, S2C_CombatEventMsg::VT_EVENT_PAYLOAD);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_CombatEventMsg> CreateS2C_CombatEventMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::UDP::S2C::CombatEventType event_type = RiftForged::Networking::UDP::S2C::CombatEventType_None,
    RiftForged::Networking::UDP::S2C::CombatEventPayload event_payload_type = RiftForged::Networking::UDP::S2C::CombatEventPayload_NONE,
    ::flatbuffers::Offset<void> event_payload = 0,
    uint64_t server_timestamp_ms = 0) {
  S2C_CombatEventMsgBuilder builder_(_fbb);
  builder_.add_server_timestamp_ms(server_timestamp_ms);
  builder_.add_event_payload(event_payload);
  builder_.add_event_payload_type(event_payload_type);
  builder_.add_event_type(event_type);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_CombatEventMsg> CreateS2C_CombatEventMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_CombatEventMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_PongMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_PongMsg TableType;
  uint64_t client_timestamp_ms = 0;
  uint64_t server_timestamp_ms = 0;
};

struct S2C_PongMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_PongMsgT NativeTableType;
  typedef S2C_PongMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_TIMESTAMP_MS = 4,
    VT_SERVER_TIMESTAMP_MS = 6
  };
  uint64_t client_timestamp_ms() const {
    return GetField<uint64_t>(VT_CLIENT_TIMESTAMP_MS, 0);
  }
  uint64_t server_timestamp_ms() const {
    return GetField<uint64_t>(VT_SERVER_TIMESTAMP_MS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIMESTAMP_MS, 8) &&
           VerifyField<uint64_t>(verifier, VT_SERVER_TIMESTAMP_MS, 8) &&
           verifier.EndTable();
  }
  S2C_PongMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_PongMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_PongMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_PongMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_PongMsgBuilder {
  typedef S2C_PongMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_timestamp_ms(uint64_t client_timestamp_ms) {
    fbb_.AddElement<uint64_t>(S2C_PongMsg::VT_CLIENT_TIMESTAMP_MS, client_timestamp_ms, 0);
  }
  void add_server_timestamp_ms(uint64_t server_timestamp_ms) {
    fbb_.AddElement<uint64_t>(S2C_PongMsg::VT_SERVER_TIMESTAMP_MS, server_timestamp_ms, 0);
  }
  explicit S2C_PongMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_PongMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_PongMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_PongMsg> CreateS2C_PongMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t client_timestamp_ms = 0,
    uint64_t server_timestamp_ms = 0) {
  S2C_PongMsgBuilder builder_(_fbb);
  builder_.add_server_timestamp_ms(server_timestamp_ms);
  builder_.add_client_timestamp_ms(client_timestamp_ms);
  return builder_.Finish();
}

::flatbuffers::Offset<S2C_PongMsg> CreateS2C_PongMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_PongMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_SystemBroadcastMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_SystemBroadcastMsg TableType;
  std::string message_text{};
  std::string sender_name{};
};

struct S2C_SystemBroadcastMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_SystemBroadcastMsgT NativeTableType;
  typedef S2C_SystemBroadcastMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TEXT = 4,
    VT_SENDER_NAME = 6
  };
  const ::flatbuffers::String *message_text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE_TEXT);
  }
  const ::flatbuffers::String *sender_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENDER_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_MESSAGE_TEXT) &&
           verifier.VerifyString(message_text()) &&
           VerifyOffset(verifier, VT_SENDER_NAME) &&
           verifier.VerifyString(sender_name()) &&
           verifier.EndTable();
  }
  S2C_SystemBroadcastMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_SystemBroadcastMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_SystemBroadcastMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SystemBroadcastMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_SystemBroadcastMsgBuilder {
  typedef S2C_SystemBroadcastMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_text(::flatbuffers::Offset<::flatbuffers::String> message_text) {
    fbb_.AddOffset(S2C_SystemBroadcastMsg::VT_MESSAGE_TEXT, message_text);
  }
  void add_sender_name(::flatbuffers::Offset<::flatbuffers::String> sender_name) {
    fbb_.AddOffset(S2C_SystemBroadcastMsg::VT_SENDER_NAME, sender_name);
  }
  explicit S2C_SystemBroadcastMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_SystemBroadcastMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_SystemBroadcastMsg>(end);
    fbb_.Required(o, S2C_SystemBroadcastMsg::VT_MESSAGE_TEXT);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_SystemBroadcastMsg> CreateS2C_SystemBroadcastMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> message_text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sender_name = 0) {
  S2C_SystemBroadcastMsgBuilder builder_(_fbb);
  builder_.add_sender_name(sender_name);
  builder_.add_message_text(message_text);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_SystemBroadcastMsg> CreateS2C_SystemBroadcastMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *message_text = nullptr,
    const char *sender_name = nullptr) {
  auto message_text__ = message_text ? _fbb.CreateString(message_text) : 0;
  auto sender_name__ = sender_name ? _fbb.CreateString(sender_name) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_SystemBroadcastMsg(
      _fbb,
      message_text__,
      sender_name__);
}

::flatbuffers::Offset<S2C_SystemBroadcastMsg> CreateS2C_SystemBroadcastMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SystemBroadcastMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_JoinSuccessMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_JoinSuccessMsg TableType;
  uint64_t assigned_player_id = 0;
  std::string welcome_message{};
  uint16_t server_tick_rate_hz = 0;
};

struct S2C_JoinSuccessMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_JoinSuccessMsgT NativeTableType;
  typedef S2C_JoinSuccessMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ASSIGNED_PLAYER_ID = 4,
    VT_WELCOME_MESSAGE = 6,
    VT_SERVER_TICK_RATE_HZ = 8
  };
  uint64_t assigned_player_id() const {
    return GetField<uint64_t>(VT_ASSIGNED_PLAYER_ID, 0);
  }
  const ::flatbuffers::String *welcome_message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WELCOME_MESSAGE);
  }
  uint16_t server_tick_rate_hz() const {
    return GetField<uint16_t>(VT_SERVER_TICK_RATE_HZ, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ASSIGNED_PLAYER_ID, 8) &&
           VerifyOffset(verifier, VT_WELCOME_MESSAGE) &&
           verifier.VerifyString(welcome_message()) &&
           VerifyField<uint16_t>(verifier, VT_SERVER_TICK_RATE_HZ, 2) &&
           verifier.EndTable();
  }
  S2C_JoinSuccessMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_JoinSuccessMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_JoinSuccessMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinSuccessMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_JoinSuccessMsgBuilder {
  typedef S2C_JoinSuccessMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_assigned_player_id(uint64_t assigned_player_id) {
    fbb_.AddElement<uint64_t>(S2C_JoinSuccessMsg::VT_ASSIGNED_PLAYER_ID, assigned_player_id, 0);
  }
  void add_welcome_message(::flatbuffers::Offset<::flatbuffers::String> welcome_message) {
    fbb_.AddOffset(S2C_JoinSuccessMsg::VT_WELCOME_MESSAGE, welcome_message);
  }
  void add_server_tick_rate_hz(uint16_t server_tick_rate_hz) {
    fbb_.AddElement<uint16_t>(S2C_JoinSuccessMsg::VT_SERVER_TICK_RATE_HZ, server_tick_rate_hz, 0);
  }
  explicit S2C_JoinSuccessMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_JoinSuccessMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_JoinSuccessMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_JoinSuccessMsg> CreateS2C_JoinSuccessMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t assigned_player_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> welcome_message = 0,
    uint16_t server_tick_rate_hz = 0) {
  S2C_JoinSuccessMsgBuilder builder_(_fbb);
  builder_.add_assigned_player_id(assigned_player_id);
  builder_.add_welcome_message(welcome_message);
  builder_.add_server_tick_rate_hz(server_tick_rate_hz);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_JoinSuccessMsg> CreateS2C_JoinSuccessMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t assigned_player_id = 0,
    const char *welcome_message = nullptr,
    uint16_t server_tick_rate_hz = 0) {
  auto welcome_message__ = welcome_message ? _fbb.CreateString(welcome_message) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_JoinSuccessMsg(
      _fbb,
      assigned_player_id,
      welcome_message__,
      server_tick_rate_hz);
}

::flatbuffers::Offset<S2C_JoinSuccessMsg> CreateS2C_JoinSuccessMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinSuccessMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct S2C_JoinFailedMsgT : public ::flatbuffers::NativeTable {
  typedef S2C_JoinFailedMsg TableType;
  std::string reason_message{};
  int16_t reason_code = 0;
};

struct S2C_JoinFailedMsg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S2C_JoinFailedMsgT NativeTableType;
  typedef S2C_JoinFailedMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REASON_MESSAGE = 4,
    VT_REASON_CODE = 6
  };
  const ::flatbuffers::String *reason_message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REASON_MESSAGE);
  }
  int16_t reason_code() const {
    return GetField<int16_t>(VT_REASON_CODE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REASON_MESSAGE) &&
           verifier.VerifyString(reason_message()) &&
           VerifyField<int16_t>(verifier, VT_REASON_CODE, 2) &&
           verifier.EndTable();
  }
  S2C_JoinFailedMsgT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(S2C_JoinFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<S2C_JoinFailedMsg> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct S2C_JoinFailedMsgBuilder {
  typedef S2C_JoinFailedMsg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_reason_message(::flatbuffers::Offset<::flatbuffers::String> reason_message) {
    fbb_.AddOffset(S2C_JoinFailedMsg::VT_REASON_MESSAGE, reason_message);
  }
  void add_reason_code(int16_t reason_code) {
    fbb_.AddElement<int16_t>(S2C_JoinFailedMsg::VT_REASON_CODE, reason_code, 0);
  }
  explicit S2C_JoinFailedMsgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S2C_JoinFailedMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S2C_JoinFailedMsg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S2C_JoinFailedMsg> CreateS2C_JoinFailedMsg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> reason_message = 0,
    int16_t reason_code = 0) {
  S2C_JoinFailedMsgBuilder builder_(_fbb);
  builder_.add_reason_message(reason_message);
  builder_.add_reason_code(reason_code);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S2C_JoinFailedMsg> CreateS2C_JoinFailedMsgDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *reason_message = nullptr,
    int16_t reason_code = 0) {
  auto reason_message__ = reason_message ? _fbb.CreateString(reason_message) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_JoinFailedMsg(
      _fbb,
      reason_message__,
      reason_code);
}

::flatbuffers::Offset<S2C_JoinFailedMsg> CreateS2C_JoinFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Root_S2C_UDP_MessageT : public ::flatbuffers::NativeTable {
  typedef Root_S2C_UDP_Message TableType;
  RiftForged::Networking::UDP::S2C::S2C_UDP_PayloadUnion payload{};
};

struct Root_S2C_UDP_Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Root_S2C_UDP_MessageT NativeTableType;
  typedef Root_S2C_UDP_MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  RiftForged::Networking::UDP::S2C::S2C_UDP_Payload payload_type() const {
    return static_cast<RiftForged::Networking::UDP::S2C::S2C_UDP_Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg *payload_as_EntityStateUpdate() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_EntityStateUpdate ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg *payload_as_RiftStepInitiated() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_RiftStepInitiated ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg *payload_as_ResourceUpdate() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_ResourceUpdate ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg *payload_as_CombatEvent() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_CombatEvent ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg *payload_as_SpawnProjectile() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_SpawnProjectile ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg *payload_as_SystemBroadcast() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_SystemBroadcast ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_PongMsg *payload_as_Pong() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_Pong ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_PongMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg *payload_as_S2C_JoinSuccessMsg() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_S2C_JoinSuccessMsg ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg *payload_as_S2C_JoinFailedMsg() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_S2C_JoinFailedMsg ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg *payload_as_BasicAttackFailed() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_BasicAttackFailed ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg *payload_as_RiftStepFailed() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_RiftStepFailed ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg *>(payload()) : nullptr;
  }
  const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg *payload_as_AbilityFailed() const {
    return payload_type() == RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_AbilityFailed ? static_cast<const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyS2C_UDP_Payload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
  Root_S2C_UDP_MessageT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Root_S2C_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Root_S2C_UDP_Message> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_S2C_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg>() const {
  return payload_as_EntityStateUpdate();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg>() const {
  return payload_as_RiftStepInitiated();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg>() const {
  return payload_as_ResourceUpdate();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg>() const {
  return payload_as_CombatEvent();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg>() const {
  return payload_as_SpawnProjectile();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg>() const {
  return payload_as_SystemBroadcast();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_PongMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_PongMsg>() const {
  return payload_as_Pong();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg>() const {
  return payload_as_S2C_JoinSuccessMsg();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg>() const {
  return payload_as_S2C_JoinFailedMsg();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg>() const {
  return payload_as_BasicAttackFailed();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg>() const {
  return payload_as_RiftStepFailed();
}

template<> inline const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg *Root_S2C_UDP_Message::payload_as<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg>() const {
  return payload_as_AbilityFailed();
}

struct Root_S2C_UDP_MessageBuilder {
  typedef Root_S2C_UDP_Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(RiftForged::Networking::UDP::S2C::S2C_UDP_Payload payload_type) {
    fbb_.AddElement<uint8_t>(Root_S2C_UDP_Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root_S2C_UDP_Message::VT_PAYLOAD, payload);
  }
  explicit Root_S2C_UDP_MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Root_S2C_UDP_Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Root_S2C_UDP_Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Root_S2C_UDP_Message> CreateRoot_S2C_UDP_Message(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::UDP::S2C::S2C_UDP_Payload payload_type = RiftForged::Networking::UDP::S2C::S2C_UDP_Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  Root_S2C_UDP_MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Root_S2C_UDP_Message> CreateRoot_S2C_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_S2C_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Effect_AreaDamageDataT::Effect_AreaDamageDataT(const Effect_AreaDamageDataT &o)
      : area_center((o.area_center) ? new RiftForged::Networking::Shared::Vec3(*o.area_center) : nullptr),
        radius(o.radius),
        damage_info((o.damage_info) ? new RiftForged::Networking::Shared::DamageInstance(*o.damage_info) : nullptr) {
}

inline Effect_AreaDamageDataT &Effect_AreaDamageDataT::operator=(Effect_AreaDamageDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(area_center, o.area_center);
  std::swap(radius, o.radius);
  std::swap(damage_info, o.damage_info);
  return *this;
}

inline Effect_AreaDamageDataT *Effect_AreaDamageData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Effect_AreaDamageDataT>(new Effect_AreaDamageDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Effect_AreaDamageData::UnPackTo(Effect_AreaDamageDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = area_center(); if (_e) _o->area_center = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = radius(); _o->radius = _e; }
  { auto _e = damage_info(); if (_e) _o->damage_info = std::unique_ptr<RiftForged::Networking::Shared::DamageInstance>(new RiftForged::Networking::Shared::DamageInstance(*_e)); }
}

inline ::flatbuffers::Offset<Effect_AreaDamageData> Effect_AreaDamageData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaDamageDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEffect_AreaDamageData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Effect_AreaDamageData> CreateEffect_AreaDamageData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaDamageDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Effect_AreaDamageDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _area_center = _o->area_center ? _o->area_center.get() : nullptr;
  auto _radius = _o->radius;
  auto _damage_info = _o->damage_info ? _o->damage_info.get() : nullptr;
  return RiftForged::Networking::UDP::S2C::CreateEffect_AreaDamageData(
      _fbb,
      _area_center,
      _radius,
      _damage_info);
}

inline Effect_AreaStunDataT::Effect_AreaStunDataT(const Effect_AreaStunDataT &o)
      : area_center((o.area_center) ? new RiftForged::Networking::Shared::Vec3(*o.area_center) : nullptr),
        radius(o.radius),
        stun_details((o.stun_details) ? new RiftForged::Networking::Shared::StunInstance(*o.stun_details) : nullptr) {
}

inline Effect_AreaStunDataT &Effect_AreaStunDataT::operator=(Effect_AreaStunDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(area_center, o.area_center);
  std::swap(radius, o.radius);
  std::swap(stun_details, o.stun_details);
  return *this;
}

inline Effect_AreaStunDataT *Effect_AreaStunData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Effect_AreaStunDataT>(new Effect_AreaStunDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Effect_AreaStunData::UnPackTo(Effect_AreaStunDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = area_center(); if (_e) _o->area_center = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = radius(); _o->radius = _e; }
  { auto _e = stun_details(); if (_e) _o->stun_details = std::unique_ptr<RiftForged::Networking::Shared::StunInstance>(new RiftForged::Networking::Shared::StunInstance(*_e)); }
}

inline ::flatbuffers::Offset<Effect_AreaStunData> Effect_AreaStunData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaStunDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEffect_AreaStunData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Effect_AreaStunData> CreateEffect_AreaStunData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_AreaStunDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Effect_AreaStunDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _area_center = _o->area_center ? _o->area_center.get() : nullptr;
  auto _radius = _o->radius;
  auto _stun_details = _o->stun_details ? _o->stun_details.get() : nullptr;
  return RiftForged::Networking::UDP::S2C::CreateEffect_AreaStunData(
      _fbb,
      _area_center,
      _radius,
      _stun_details);
}

inline Effect_ApplyBuffDebuffDataT *Effect_ApplyBuffDebuffData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Effect_ApplyBuffDebuffDataT>(new Effect_ApplyBuffDebuffDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Effect_ApplyBuffDebuffData::UnPackTo(Effect_ApplyBuffDebuffDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = buff_debuff_id(); _o->buff_debuff_id = _e; }
  { auto _e = duration_ms(); _o->duration_ms = _e; }
}

inline ::flatbuffers::Offset<Effect_ApplyBuffDebuffData> Effect_ApplyBuffDebuffData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_ApplyBuffDebuffDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEffect_ApplyBuffDebuffData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Effect_ApplyBuffDebuffData> CreateEffect_ApplyBuffDebuffData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_ApplyBuffDebuffDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Effect_ApplyBuffDebuffDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _buff_debuff_id = _o->buff_debuff_id;
  auto _duration_ms = _o->duration_ms;
  return RiftForged::Networking::UDP::S2C::CreateEffect_ApplyBuffDebuffData(
      _fbb,
      _buff_debuff_id,
      _duration_ms);
}

inline Effect_PersistentAreaDataT::Effect_PersistentAreaDataT(const Effect_PersistentAreaDataT &o)
      : area_center((o.area_center) ? new RiftForged::Networking::Shared::Vec3(*o.area_center) : nullptr),
        radius(o.radius),
        duration_ms(o.duration_ms),
        visual_effect_tag(o.visual_effect_tag),
        applied_effects_on_contact(o.applied_effects_on_contact) {
}

inline Effect_PersistentAreaDataT &Effect_PersistentAreaDataT::operator=(Effect_PersistentAreaDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(area_center, o.area_center);
  std::swap(radius, o.radius);
  std::swap(duration_ms, o.duration_ms);
  std::swap(visual_effect_tag, o.visual_effect_tag);
  std::swap(applied_effects_on_contact, o.applied_effects_on_contact);
  return *this;
}

inline Effect_PersistentAreaDataT *Effect_PersistentAreaData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Effect_PersistentAreaDataT>(new Effect_PersistentAreaDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Effect_PersistentAreaData::UnPackTo(Effect_PersistentAreaDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = area_center(); if (_e) _o->area_center = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = radius(); _o->radius = _e; }
  { auto _e = duration_ms(); _o->duration_ms = _e; }
  { auto _e = visual_effect_tag(); if (_e) _o->visual_effect_tag = _e->str(); }
  { auto _e = applied_effects_on_contact(); if (_e) { _o->applied_effects_on_contact.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->applied_effects_on_contact[_i] = static_cast<RiftForged::Networking::Shared::StatusEffectCategory>(_e->Get(_i)); } } else { _o->applied_effects_on_contact.resize(0); } }
}

inline ::flatbuffers::Offset<Effect_PersistentAreaData> Effect_PersistentAreaData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_PersistentAreaDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEffect_PersistentAreaData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Effect_PersistentAreaData> CreateEffect_PersistentAreaData(::flatbuffers::FlatBufferBuilder &_fbb, const Effect_PersistentAreaDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Effect_PersistentAreaDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _area_center = _o->area_center ? _o->area_center.get() : nullptr;
  auto _radius = _o->radius;
  auto _duration_ms = _o->duration_ms;
  auto _visual_effect_tag = _o->visual_effect_tag.empty() ? 0 : _fbb.CreateString(_o->visual_effect_tag);
  auto _applied_effects_on_contact = _o->applied_effects_on_contact.size() ? _fbb.CreateVectorScalarCast<uint32_t>(::flatbuffers::data(_o->applied_effects_on_contact), _o->applied_effects_on_contact.size()) : 0;
  return RiftForged::Networking::UDP::S2C::CreateEffect_PersistentAreaData(
      _fbb,
      _area_center,
      _radius,
      _duration_ms,
      _visual_effect_tag,
      _applied_effects_on_contact);
}

inline CombatEvent_DamageDealtDetailsT::CombatEvent_DamageDealtDetailsT(const CombatEvent_DamageDealtDetailsT &o)
      : source_entity_id(o.source_entity_id),
        target_entity_id(o.target_entity_id),
        damage_info((o.damage_info) ? new RiftForged::Networking::Shared::DamageInstance(*o.damage_info) : nullptr),
        is_kill(o.is_kill),
        is_basic_attack(o.is_basic_attack) {
}

inline CombatEvent_DamageDealtDetailsT &CombatEvent_DamageDealtDetailsT::operator=(CombatEvent_DamageDealtDetailsT o) FLATBUFFERS_NOEXCEPT {
  std::swap(source_entity_id, o.source_entity_id);
  std::swap(target_entity_id, o.target_entity_id);
  std::swap(damage_info, o.damage_info);
  std::swap(is_kill, o.is_kill);
  std::swap(is_basic_attack, o.is_basic_attack);
  return *this;
}

inline CombatEvent_DamageDealtDetailsT *CombatEvent_DamageDealtDetails::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CombatEvent_DamageDealtDetailsT>(new CombatEvent_DamageDealtDetailsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CombatEvent_DamageDealtDetails::UnPackTo(CombatEvent_DamageDealtDetailsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = source_entity_id(); _o->source_entity_id = _e; }
  { auto _e = target_entity_id(); _o->target_entity_id = _e; }
  { auto _e = damage_info(); if (_e) _o->damage_info = std::unique_ptr<RiftForged::Networking::Shared::DamageInstance>(new RiftForged::Networking::Shared::DamageInstance(*_e)); }
  { auto _e = is_kill(); _o->is_kill = _e; }
  { auto _e = is_basic_attack(); _o->is_basic_attack = _e; }
}

inline ::flatbuffers::Offset<CombatEvent_DamageDealtDetails> CombatEvent_DamageDealtDetails::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CombatEvent_DamageDealtDetailsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCombatEvent_DamageDealtDetails(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CombatEvent_DamageDealtDetails> CreateCombatEvent_DamageDealtDetails(::flatbuffers::FlatBufferBuilder &_fbb, const CombatEvent_DamageDealtDetailsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CombatEvent_DamageDealtDetailsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _source_entity_id = _o->source_entity_id;
  auto _target_entity_id = _o->target_entity_id;
  auto _damage_info = _o->damage_info ? _o->damage_info.get() : nullptr;
  auto _is_kill = _o->is_kill;
  auto _is_basic_attack = _o->is_basic_attack;
  return RiftForged::Networking::UDP::S2C::CreateCombatEvent_DamageDealtDetails(
      _fbb,
      _source_entity_id,
      _target_entity_id,
      _damage_info,
      _is_kill,
      _is_basic_attack);
}

inline S2C_SpawnProjectileMsgT::S2C_SpawnProjectileMsgT(const S2C_SpawnProjectileMsgT &o)
      : projectile_id(o.projectile_id),
        owner_entity_id(o.owner_entity_id),
        start_position((o.start_position) ? new RiftForged::Networking::Shared::Vec3(*o.start_position) : nullptr),
        initial_direction((o.initial_direction) ? new RiftForged::Networking::Shared::Vec3(*o.initial_direction) : nullptr),
        speed(o.speed),
        max_range(o.max_range),
        projectile_vfx_tag(o.projectile_vfx_tag) {
}

inline S2C_SpawnProjectileMsgT &S2C_SpawnProjectileMsgT::operator=(S2C_SpawnProjectileMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(projectile_id, o.projectile_id);
  std::swap(owner_entity_id, o.owner_entity_id);
  std::swap(start_position, o.start_position);
  std::swap(initial_direction, o.initial_direction);
  std::swap(speed, o.speed);
  std::swap(max_range, o.max_range);
  std::swap(projectile_vfx_tag, o.projectile_vfx_tag);
  return *this;
}

inline S2C_SpawnProjectileMsgT *S2C_SpawnProjectileMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_SpawnProjectileMsgT>(new S2C_SpawnProjectileMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_SpawnProjectileMsg::UnPackTo(S2C_SpawnProjectileMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = projectile_id(); _o->projectile_id = _e; }
  { auto _e = owner_entity_id(); _o->owner_entity_id = _e; }
  { auto _e = start_position(); if (_e) _o->start_position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = initial_direction(); if (_e) _o->initial_direction = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = speed(); _o->speed = _e; }
  { auto _e = max_range(); _o->max_range = _e; }
  { auto _e = projectile_vfx_tag(); if (_e) _o->projectile_vfx_tag = _e->str(); }
}

inline ::flatbuffers::Offset<S2C_SpawnProjectileMsg> S2C_SpawnProjectileMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnProjectileMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_SpawnProjectileMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_SpawnProjectileMsg> CreateS2C_SpawnProjectileMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SpawnProjectileMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_SpawnProjectileMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _projectile_id = _o->projectile_id;
  auto _owner_entity_id = _o->owner_entity_id;
  auto _start_position = _o->start_position ? _o->start_position.get() : nullptr;
  auto _initial_direction = _o->initial_direction ? _o->initial_direction.get() : nullptr;
  auto _speed = _o->speed;
  auto _max_range = _o->max_range;
  auto _projectile_vfx_tag = _o->projectile_vfx_tag.empty() ? 0 : _fbb.CreateString(_o->projectile_vfx_tag);
  return RiftForged::Networking::UDP::S2C::CreateS2C_SpawnProjectileMsg(
      _fbb,
      _projectile_id,
      _owner_entity_id,
      _start_position,
      _initial_direction,
      _speed,
      _max_range,
      _projectile_vfx_tag);
}

inline S2C_BasicAttackFailedMsgT *S2C_BasicAttackFailedMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_BasicAttackFailedMsgT>(new S2C_BasicAttackFailedMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_BasicAttackFailedMsg::UnPackTo(S2C_BasicAttackFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = player_id(); _o->player_id = _e; }
  { auto _e = reason(); _o->reason = _e; }
}

inline ::flatbuffers::Offset<S2C_BasicAttackFailedMsg> S2C_BasicAttackFailedMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_BasicAttackFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_BasicAttackFailedMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_BasicAttackFailedMsg> CreateS2C_BasicAttackFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_BasicAttackFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_BasicAttackFailedMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _player_id = _o->player_id;
  auto _reason = _o->reason;
  return RiftForged::Networking::UDP::S2C::CreateS2C_BasicAttackFailedMsg(
      _fbb,
      _player_id,
      _reason);
}

inline S2C_RiftStepFailedMsgT *S2C_RiftStepFailedMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_RiftStepFailedMsgT>(new S2C_RiftStepFailedMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_RiftStepFailedMsg::UnPackTo(S2C_RiftStepFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = player_id(); _o->player_id = _e; }
  { auto _e = reason(); _o->reason = _e; }
}

inline ::flatbuffers::Offset<S2C_RiftStepFailedMsg> S2C_RiftStepFailedMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_RiftStepFailedMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_RiftStepFailedMsg> CreateS2C_RiftStepFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_RiftStepFailedMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _player_id = _o->player_id;
  auto _reason = _o->reason;
  return RiftForged::Networking::UDP::S2C::CreateS2C_RiftStepFailedMsg(
      _fbb,
      _player_id,
      _reason);
}

inline S2C_AbilityFailedMsgT *S2C_AbilityFailedMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_AbilityFailedMsgT>(new S2C_AbilityFailedMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_AbilityFailedMsg::UnPackTo(S2C_AbilityFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = player_id(); _o->player_id = _e; }
  { auto _e = ability_id(); _o->ability_id = _e; }
  { auto _e = reason(); _o->reason = _e; }
}

inline ::flatbuffers::Offset<S2C_AbilityFailedMsg> S2C_AbilityFailedMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_AbilityFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_AbilityFailedMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_AbilityFailedMsg> CreateS2C_AbilityFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_AbilityFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_AbilityFailedMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _player_id = _o->player_id;
  auto _ability_id = _o->ability_id;
  auto _reason = _o->reason;
  return RiftForged::Networking::UDP::S2C::CreateS2C_AbilityFailedMsg(
      _fbb,
      _player_id,
      _ability_id,
      _reason);
}

inline S2C_EntityStateUpdateMsgT::S2C_EntityStateUpdateMsgT(const S2C_EntityStateUpdateMsgT &o)
      : entity_id(o.entity_id),
        position((o.position) ? new RiftForged::Networking::Shared::Vec3(*o.position) : nullptr),
        orientation((o.orientation) ? new RiftForged::Networking::Shared::Quaternion(*o.orientation) : nullptr),
        current_health(o.current_health),
        max_health(o.max_health),
        current_will(o.current_will),
        max_will(o.max_will),
        server_timestamp_ms(o.server_timestamp_ms),
        animation_state_id(o.animation_state_id),
        active_status_effects(o.active_status_effects) {
}

inline S2C_EntityStateUpdateMsgT &S2C_EntityStateUpdateMsgT::operator=(S2C_EntityStateUpdateMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(entity_id, o.entity_id);
  std::swap(position, o.position);
  std::swap(orientation, o.orientation);
  std::swap(current_health, o.current_health);
  std::swap(max_health, o.max_health);
  std::swap(current_will, o.current_will);
  std::swap(max_will, o.max_will);
  std::swap(server_timestamp_ms, o.server_timestamp_ms);
  std::swap(animation_state_id, o.animation_state_id);
  std::swap(active_status_effects, o.active_status_effects);
  return *this;
}

inline S2C_EntityStateUpdateMsgT *S2C_EntityStateUpdateMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_EntityStateUpdateMsgT>(new S2C_EntityStateUpdateMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_EntityStateUpdateMsg::UnPackTo(S2C_EntityStateUpdateMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = entity_id(); _o->entity_id = _e; }
  { auto _e = position(); if (_e) _o->position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = orientation(); if (_e) _o->orientation = std::unique_ptr<RiftForged::Networking::Shared::Quaternion>(new RiftForged::Networking::Shared::Quaternion(*_e)); }
  { auto _e = current_health(); _o->current_health = _e; }
  { auto _e = max_health(); _o->max_health = _e; }
  { auto _e = current_will(); _o->current_will = _e; }
  { auto _e = max_will(); _o->max_will = _e; }
  { auto _e = server_timestamp_ms(); _o->server_timestamp_ms = _e; }
  { auto _e = animation_state_id(); _o->animation_state_id = _e; }
  { auto _e = active_status_effects(); if (_e) { _o->active_status_effects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->active_status_effects[_i] = static_cast<RiftForged::Networking::Shared::StatusEffectCategory>(_e->Get(_i)); } } else { _o->active_status_effects.resize(0); } }
}

inline ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> S2C_EntityStateUpdateMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_EntityStateUpdateMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_EntityStateUpdateMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_EntityStateUpdateMsg> CreateS2C_EntityStateUpdateMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_EntityStateUpdateMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_EntityStateUpdateMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _entity_id = _o->entity_id;
  auto _position = _o->position ? _o->position.get() : nullptr;
  auto _orientation = _o->orientation ? _o->orientation.get() : nullptr;
  auto _current_health = _o->current_health;
  auto _max_health = _o->max_health;
  auto _current_will = _o->current_will;
  auto _max_will = _o->max_will;
  auto _server_timestamp_ms = _o->server_timestamp_ms;
  auto _animation_state_id = _o->animation_state_id;
  auto _active_status_effects = _o->active_status_effects.size() ? _fbb.CreateVectorScalarCast<uint32_t>(::flatbuffers::data(_o->active_status_effects), _o->active_status_effects.size()) : 0;
  return RiftForged::Networking::UDP::S2C::CreateS2C_EntityStateUpdateMsg(
      _fbb,
      _entity_id,
      _position,
      _orientation,
      _current_health,
      _max_health,
      _current_will,
      _max_will,
      _server_timestamp_ms,
      _animation_state_id,
      _active_status_effects);
}

inline S2C_RiftStepInitiatedMsgT::S2C_RiftStepInitiatedMsgT(const S2C_RiftStepInitiatedMsgT &o)
      : instigator_entity_id(o.instigator_entity_id),
        actual_start_position((o.actual_start_position) ? new RiftForged::Networking::Shared::Vec3(*o.actual_start_position) : nullptr),
        calculated_target_position((o.calculated_target_position) ? new RiftForged::Networking::Shared::Vec3(*o.calculated_target_position) : nullptr),
        actual_final_position((o.actual_final_position) ? new RiftForged::Networking::Shared::Vec3(*o.actual_final_position) : nullptr),
        cosmetic_travel_duration_sec(o.cosmetic_travel_duration_sec),
        entry_effects(o.entry_effects),
        exit_effects(o.exit_effects),
        start_vfx_id(o.start_vfx_id),
        travel_vfx_id(o.travel_vfx_id),
        end_vfx_id(o.end_vfx_id) {
}

inline S2C_RiftStepInitiatedMsgT &S2C_RiftStepInitiatedMsgT::operator=(S2C_RiftStepInitiatedMsgT o) FLATBUFFERS_NOEXCEPT {
  std::swap(instigator_entity_id, o.instigator_entity_id);
  std::swap(actual_start_position, o.actual_start_position);
  std::swap(calculated_target_position, o.calculated_target_position);
  std::swap(actual_final_position, o.actual_final_position);
  std::swap(cosmetic_travel_duration_sec, o.cosmetic_travel_duration_sec);
  std::swap(entry_effects, o.entry_effects);
  std::swap(exit_effects, o.exit_effects);
  std::swap(start_vfx_id, o.start_vfx_id);
  std::swap(travel_vfx_id, o.travel_vfx_id);
  std::swap(end_vfx_id, o.end_vfx_id);
  return *this;
}

inline S2C_RiftStepInitiatedMsgT *S2C_RiftStepInitiatedMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_RiftStepInitiatedMsgT>(new S2C_RiftStepInitiatedMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_RiftStepInitiatedMsg::UnPackTo(S2C_RiftStepInitiatedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = instigator_entity_id(); _o->instigator_entity_id = _e; }
  { auto _e = actual_start_position(); if (_e) _o->actual_start_position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = calculated_target_position(); if (_e) _o->calculated_target_position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = actual_final_position(); if (_e) _o->actual_final_position = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
  { auto _e = cosmetic_travel_duration_sec(); _o->cosmetic_travel_duration_sec = _e; }
  { auto _e = entry_effects_type(); if (_e) { _o->entry_effects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->entry_effects[_i].type = static_cast<RiftForged::Networking::UDP::S2C::RiftStepEffectPayload>(_e->Get(_i)); } } else { _o->entry_effects.resize(0); } }
  { auto _e = entry_effects(); if (_e) { _o->entry_effects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->entry_effects[_i].value = RiftForged::Networking::UDP::S2C::RiftStepEffectPayloadUnion::UnPack(_e->Get(_i), entry_effects_type()->GetEnum<RiftStepEffectPayload>(_i), _resolver); } } else { _o->entry_effects.resize(0); } }
  { auto _e = exit_effects_type(); if (_e) { _o->exit_effects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->exit_effects[_i].type = static_cast<RiftForged::Networking::UDP::S2C::RiftStepEffectPayload>(_e->Get(_i)); } } else { _o->exit_effects.resize(0); } }
  { auto _e = exit_effects(); if (_e) { _o->exit_effects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->exit_effects[_i].value = RiftForged::Networking::UDP::S2C::RiftStepEffectPayloadUnion::UnPack(_e->Get(_i), exit_effects_type()->GetEnum<RiftStepEffectPayload>(_i), _resolver); } } else { _o->exit_effects.resize(0); } }
  { auto _e = start_vfx_id(); if (_e) _o->start_vfx_id = _e->str(); }
  { auto _e = travel_vfx_id(); if (_e) _o->travel_vfx_id = _e->str(); }
  { auto _e = end_vfx_id(); if (_e) _o->end_vfx_id = _e->str(); }
}

inline ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> S2C_RiftStepInitiatedMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepInitiatedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_RiftStepInitiatedMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_RiftStepInitiatedMsg> CreateS2C_RiftStepInitiatedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_RiftStepInitiatedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_RiftStepInitiatedMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _instigator_entity_id = _o->instigator_entity_id;
  auto _actual_start_position = _o->actual_start_position ? _o->actual_start_position.get() : nullptr;
  auto _calculated_target_position = _o->calculated_target_position ? _o->calculated_target_position.get() : nullptr;
  auto _actual_final_position = _o->actual_final_position ? _o->actual_final_position.get() : nullptr;
  auto _cosmetic_travel_duration_sec = _o->cosmetic_travel_duration_sec;
  auto _entry_effects_type = _o->entry_effects.size() ? _fbb.CreateVector<int8_t>(_o->entry_effects.size(), [](size_t i, _VectorArgs *__va) { return static_cast<int8_t>(__va->__o->entry_effects[i].type); }, &_va) : 0;
  auto _entry_effects = _o->entry_effects.size() ? _fbb.CreateVector<::flatbuffers::Offset<void>>(_o->entry_effects.size(), [](size_t i, _VectorArgs *__va) { return __va->__o->entry_effects[i].Pack(*__va->__fbb, __va->__rehasher); }, &_va) : 0;
  auto _exit_effects_type = _o->exit_effects.size() ? _fbb.CreateVector<int8_t>(_o->exit_effects.size(), [](size_t i, _VectorArgs *__va) { return static_cast<int8_t>(__va->__o->exit_effects[i].type); }, &_va) : 0;
  auto _exit_effects = _o->exit_effects.size() ? _fbb.CreateVector<::flatbuffers::Offset<void>>(_o->exit_effects.size(), [](size_t i, _VectorArgs *__va) { return __va->__o->exit_effects[i].Pack(*__va->__fbb, __va->__rehasher); }, &_va) : 0;
  auto _start_vfx_id = _o->start_vfx_id.empty() ? 0 : _fbb.CreateString(_o->start_vfx_id);
  auto _travel_vfx_id = _o->travel_vfx_id.empty() ? 0 : _fbb.CreateString(_o->travel_vfx_id);
  auto _end_vfx_id = _o->end_vfx_id.empty() ? 0 : _fbb.CreateString(_o->end_vfx_id);
  return RiftForged::Networking::UDP::S2C::CreateS2C_RiftStepInitiatedMsg(
      _fbb,
      _instigator_entity_id,
      _actual_start_position,
      _calculated_target_position,
      _actual_final_position,
      _cosmetic_travel_duration_sec,
      _entry_effects_type,
      _entry_effects,
      _exit_effects_type,
      _exit_effects,
      _start_vfx_id,
      _travel_vfx_id,
      _end_vfx_id);
}

inline S2C_ResourceUpdateMsgT *S2C_ResourceUpdateMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_ResourceUpdateMsgT>(new S2C_ResourceUpdateMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_ResourceUpdateMsg::UnPackTo(S2C_ResourceUpdateMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = resource_type(); _o->resource_type = _e; }
  { auto _e = current_value(); _o->current_value = _e; }
  { auto _e = max_value(); _o->max_value = _e; }
}

inline ::flatbuffers::Offset<S2C_ResourceUpdateMsg> S2C_ResourceUpdateMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_ResourceUpdateMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_ResourceUpdateMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_ResourceUpdateMsg> CreateS2C_ResourceUpdateMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_ResourceUpdateMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_ResourceUpdateMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _resource_type = _o->resource_type;
  auto _current_value = _o->current_value;
  auto _max_value = _o->max_value;
  return RiftForged::Networking::UDP::S2C::CreateS2C_ResourceUpdateMsg(
      _fbb,
      _resource_type,
      _current_value,
      _max_value);
}

inline S2C_CombatEventMsgT *S2C_CombatEventMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_CombatEventMsgT>(new S2C_CombatEventMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_CombatEventMsg::UnPackTo(S2C_CombatEventMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = event_type(); _o->event_type = _e; }
  { auto _e = event_payload_type(); _o->event_payload.type = _e; }
  { auto _e = event_payload(); if (_e) _o->event_payload.value = RiftForged::Networking::UDP::S2C::CombatEventPayloadUnion::UnPack(_e, event_payload_type(), _resolver); }
  { auto _e = server_timestamp_ms(); _o->server_timestamp_ms = _e; }
}

inline ::flatbuffers::Offset<S2C_CombatEventMsg> S2C_CombatEventMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_CombatEventMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_CombatEventMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_CombatEventMsg> CreateS2C_CombatEventMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_CombatEventMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_CombatEventMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _event_type = _o->event_type;
  auto _event_payload_type = _o->event_payload.type;
  auto _event_payload = _o->event_payload.Pack(_fbb);
  auto _server_timestamp_ms = _o->server_timestamp_ms;
  return RiftForged::Networking::UDP::S2C::CreateS2C_CombatEventMsg(
      _fbb,
      _event_type,
      _event_payload_type,
      _event_payload,
      _server_timestamp_ms);
}

inline S2C_PongMsgT *S2C_PongMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_PongMsgT>(new S2C_PongMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_PongMsg::UnPackTo(S2C_PongMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = client_timestamp_ms(); _o->client_timestamp_ms = _e; }
  { auto _e = server_timestamp_ms(); _o->server_timestamp_ms = _e; }
}

inline ::flatbuffers::Offset<S2C_PongMsg> S2C_PongMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_PongMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_PongMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_PongMsg> CreateS2C_PongMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_PongMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_PongMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _client_timestamp_ms = _o->client_timestamp_ms;
  auto _server_timestamp_ms = _o->server_timestamp_ms;
  return RiftForged::Networking::UDP::S2C::CreateS2C_PongMsg(
      _fbb,
      _client_timestamp_ms,
      _server_timestamp_ms);
}

inline S2C_SystemBroadcastMsgT *S2C_SystemBroadcastMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_SystemBroadcastMsgT>(new S2C_SystemBroadcastMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_SystemBroadcastMsg::UnPackTo(S2C_SystemBroadcastMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message_text(); if (_e) _o->message_text = _e->str(); }
  { auto _e = sender_name(); if (_e) _o->sender_name = _e->str(); }
}

inline ::flatbuffers::Offset<S2C_SystemBroadcastMsg> S2C_SystemBroadcastMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SystemBroadcastMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_SystemBroadcastMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_SystemBroadcastMsg> CreateS2C_SystemBroadcastMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_SystemBroadcastMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_SystemBroadcastMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _message_text = _fbb.CreateString(_o->message_text);
  auto _sender_name = _o->sender_name.empty() ? 0 : _fbb.CreateString(_o->sender_name);
  return RiftForged::Networking::UDP::S2C::CreateS2C_SystemBroadcastMsg(
      _fbb,
      _message_text,
      _sender_name);
}

inline S2C_JoinSuccessMsgT *S2C_JoinSuccessMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_JoinSuccessMsgT>(new S2C_JoinSuccessMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_JoinSuccessMsg::UnPackTo(S2C_JoinSuccessMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = assigned_player_id(); _o->assigned_player_id = _e; }
  { auto _e = welcome_message(); if (_e) _o->welcome_message = _e->str(); }
  { auto _e = server_tick_rate_hz(); _o->server_tick_rate_hz = _e; }
}

inline ::flatbuffers::Offset<S2C_JoinSuccessMsg> S2C_JoinSuccessMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinSuccessMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_JoinSuccessMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_JoinSuccessMsg> CreateS2C_JoinSuccessMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinSuccessMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_JoinSuccessMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _assigned_player_id = _o->assigned_player_id;
  auto _welcome_message = _o->welcome_message.empty() ? 0 : _fbb.CreateString(_o->welcome_message);
  auto _server_tick_rate_hz = _o->server_tick_rate_hz;
  return RiftForged::Networking::UDP::S2C::CreateS2C_JoinSuccessMsg(
      _fbb,
      _assigned_player_id,
      _welcome_message,
      _server_tick_rate_hz);
}

inline S2C_JoinFailedMsgT *S2C_JoinFailedMsg::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<S2C_JoinFailedMsgT>(new S2C_JoinFailedMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void S2C_JoinFailedMsg::UnPackTo(S2C_JoinFailedMsgT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = reason_message(); if (_e) _o->reason_message = _e->str(); }
  { auto _e = reason_code(); _o->reason_code = _e; }
}

inline ::flatbuffers::Offset<S2C_JoinFailedMsg> S2C_JoinFailedMsg::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinFailedMsgT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateS2C_JoinFailedMsg(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<S2C_JoinFailedMsg> CreateS2C_JoinFailedMsg(::flatbuffers::FlatBufferBuilder &_fbb, const S2C_JoinFailedMsgT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const S2C_JoinFailedMsgT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _reason_message = _o->reason_message.empty() ? 0 : _fbb.CreateString(_o->reason_message);
  auto _reason_code = _o->reason_code;
  return RiftForged::Networking::UDP::S2C::CreateS2C_JoinFailedMsg(
      _fbb,
      _reason_message,
      _reason_code);
}

inline Root_S2C_UDP_MessageT *Root_S2C_UDP_Message::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Root_S2C_UDP_MessageT>(new Root_S2C_UDP_MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Root_S2C_UDP_Message::UnPackTo(Root_S2C_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = payload_type(); _o->payload.type = _e; }
  { auto _e = payload(); if (_e) _o->payload.value = RiftForged::Networking::UDP::S2C::S2C_UDP_PayloadUnion::UnPack(_e, payload_type(), _resolver); }
}

inline ::flatbuffers::Offset<Root_S2C_UDP_Message> Root_S2C_UDP_Message::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_S2C_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRoot_S2C_UDP_Message(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Root_S2C_UDP_Message> CreateRoot_S2C_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_S2C_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Root_S2C_UDP_MessageT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _payload_type = _o->payload.type;
  auto _payload = _o->payload.Pack(_fbb);
  return RiftForged::Networking::UDP::S2C::CreateRoot_S2C_UDP_Message(
      _fbb,
      _payload_type,
      _payload);
}

inline bool VerifyRiftStepEffectPayload(::flatbuffers::Verifier &verifier, const void *obj, RiftStepEffectPayload type) {
  switch (type) {
    case RiftStepEffectPayload_NONE: {
      return true;
    }
    case RiftStepEffectPayload_AreaDamage: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaDamageData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RiftStepEffectPayload_AreaStun: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaStunData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RiftStepEffectPayload_ApplyBuff: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RiftStepEffectPayload_PersistentArea: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_PersistentAreaData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRiftStepEffectPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<int8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRiftStepEffectPayload(
        verifier,  values->Get(i), types->GetEnum<RiftStepEffectPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline void *RiftStepEffectPayloadUnion::UnPack(const void *obj, RiftStepEffectPayload type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case RiftStepEffectPayload_AreaDamage: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaDamageData *>(obj);
      return ptr->UnPack(resolver);
    }
    case RiftStepEffectPayload_AreaStun: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaStunData *>(obj);
      return ptr->UnPack(resolver);
    }
    case RiftStepEffectPayload_ApplyBuff: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffData *>(obj);
      return ptr->UnPack(resolver);
    }
    case RiftStepEffectPayload_PersistentArea: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_PersistentAreaData *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> RiftStepEffectPayloadUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case RiftStepEffectPayload_AreaDamage: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *>(value);
      return CreateEffect_AreaDamageData(_fbb, ptr, _rehasher).Union();
    }
    case RiftStepEffectPayload_AreaStun: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *>(value);
      return CreateEffect_AreaStunData(_fbb, ptr, _rehasher).Union();
    }
    case RiftStepEffectPayload_ApplyBuff: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *>(value);
      return CreateEffect_ApplyBuffDebuffData(_fbb, ptr, _rehasher).Union();
    }
    case RiftStepEffectPayload_PersistentArea: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *>(value);
      return CreateEffect_PersistentAreaData(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline RiftStepEffectPayloadUnion::RiftStepEffectPayloadUnion(const RiftStepEffectPayloadUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case RiftStepEffectPayload_AreaDamage: {
      value = new RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *>(u.value));
      break;
    }
    case RiftStepEffectPayload_AreaStun: {
      value = new RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *>(u.value));
      break;
    }
    case RiftStepEffectPayload_ApplyBuff: {
      value = new RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *>(u.value));
      break;
    }
    case RiftStepEffectPayload_PersistentArea: {
      value = new RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void RiftStepEffectPayloadUnion::Reset() {
  switch (type) {
    case RiftStepEffectPayload_AreaDamage: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaDamageDataT *>(value);
      delete ptr;
      break;
    }
    case RiftStepEffectPayload_AreaStun: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_AreaStunDataT *>(value);
      delete ptr;
      break;
    }
    case RiftStepEffectPayload_ApplyBuff: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_ApplyBuffDebuffDataT *>(value);
      delete ptr;
      break;
    }
    case RiftStepEffectPayload_PersistentArea: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::Effect_PersistentAreaDataT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = RiftStepEffectPayload_NONE;
}

inline bool VerifyCombatEventPayload(::flatbuffers::Verifier &verifier, const void *obj, CombatEventPayload type) {
  switch (type) {
    case CombatEventPayload_NONE: {
      return true;
    }
    case CombatEventPayload_DamageDealt: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCombatEventPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<int8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCombatEventPayload(
        verifier,  values->Get(i), types->GetEnum<CombatEventPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline void *CombatEventPayloadUnion::UnPack(const void *obj, CombatEventPayload type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case CombatEventPayload_DamageDealt: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetails *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> CombatEventPayloadUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case CombatEventPayload_DamageDealt: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *>(value);
      return CreateCombatEvent_DamageDealtDetails(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline CombatEventPayloadUnion::CombatEventPayloadUnion(const CombatEventPayloadUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case CombatEventPayload_DamageDealt: {
      value = new RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void CombatEventPayloadUnion::Reset() {
  switch (type) {
    case CombatEventPayload_DamageDealt: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::CombatEvent_DamageDealtDetailsT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = CombatEventPayload_NONE;
}

inline bool VerifyS2C_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, S2C_UDP_Payload type) {
  switch (type) {
    case S2C_UDP_Payload_NONE: {
      return true;
    }
    case S2C_UDP_Payload_EntityStateUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_RiftStepInitiated: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_ResourceUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_CombatEvent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_SpawnProjectile: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_SystemBroadcast: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_Pong: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_PongMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_S2C_JoinSuccessMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_S2C_JoinFailedMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_BasicAttackFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_RiftStepFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case S2C_UDP_Payload_AbilityFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyS2C_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyS2C_UDP_Payload(
        verifier,  values->Get(i), types->GetEnum<S2C_UDP_Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline void *S2C_UDP_PayloadUnion::UnPack(const void *obj, S2C_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case S2C_UDP_Payload_EntityStateUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_RiftStepInitiated: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_ResourceUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_CombatEvent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_SpawnProjectile: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_SystemBroadcast: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_Pong: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_PongMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_S2C_JoinSuccessMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_S2C_JoinFailedMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_BasicAttackFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_RiftStepFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    case S2C_UDP_Payload_AbilityFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsg *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> S2C_UDP_PayloadUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case S2C_UDP_Payload_EntityStateUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *>(value);
      return CreateS2C_EntityStateUpdateMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_RiftStepInitiated: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *>(value);
      return CreateS2C_RiftStepInitiatedMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_ResourceUpdate: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *>(value);
      return CreateS2C_ResourceUpdateMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_CombatEvent: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *>(value);
      return CreateS2C_CombatEventMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_SpawnProjectile: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *>(value);
      return CreateS2C_SpawnProjectileMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_SystemBroadcast: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *>(value);
      return CreateS2C_SystemBroadcastMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_Pong: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_PongMsgT *>(value);
      return CreateS2C_PongMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_S2C_JoinSuccessMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *>(value);
      return CreateS2C_JoinSuccessMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_S2C_JoinFailedMsg: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *>(value);
      return CreateS2C_JoinFailedMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_BasicAttackFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *>(value);
      return CreateS2C_BasicAttackFailedMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_RiftStepFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *>(value);
      return CreateS2C_RiftStepFailedMsg(_fbb, ptr, _rehasher).Union();
    }
    case S2C_UDP_Payload_AbilityFailed: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *>(value);
      return CreateS2C_AbilityFailedMsg(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline S2C_UDP_PayloadUnion::S2C_UDP_PayloadUnion(const S2C_UDP_PayloadUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case S2C_UDP_Payload_EntityStateUpdate: {
      value = new RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_RiftStepInitiated: {
      value = new RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_ResourceUpdate: {
      value = new RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_CombatEvent: {
      value = new RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_SpawnProjectile: {
      value = new RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_SystemBroadcast: {
      value = new RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_Pong: {
      value = new RiftForged::Networking::UDP::S2C::S2C_PongMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_PongMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_S2C_JoinSuccessMsg: {
      value = new RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_S2C_JoinFailedMsg: {
      value = new RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_BasicAttackFailed: {
      value = new RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_RiftStepFailed: {
      value = new RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *>(u.value));
      break;
    }
    case S2C_UDP_Payload_AbilityFailed: {
      value = new RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT(*reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void S2C_UDP_PayloadUnion::Reset() {
  switch (type) {
    case S2C_UDP_Payload_EntityStateUpdate: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_EntityStateUpdateMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_RiftStepInitiated: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepInitiatedMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_ResourceUpdate: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_ResourceUpdateMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_CombatEvent: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_CombatEventMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_SpawnProjectile: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SpawnProjectileMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_SystemBroadcast: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_SystemBroadcastMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_Pong: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_PongMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_S2C_JoinSuccessMsg: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinSuccessMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_S2C_JoinFailedMsg: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_JoinFailedMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_BasicAttackFailed: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_BasicAttackFailedMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_RiftStepFailed: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_RiftStepFailedMsgT *>(value);
      delete ptr;
      break;
    }
    case S2C_UDP_Payload_AbilityFailed: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::S2C::S2C_AbilityFailedMsgT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = S2C_UDP_Payload_NONE;
}

inline const RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message *GetRoot_S2C_UDP_Message(const void *buf) {
  return ::flatbuffers::GetRoot<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message>(buf);
}

inline const RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message *GetSizePrefixedRoot_S2C_UDP_Message(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message>(buf);
}

inline bool VerifyRoot_S2C_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message>(nullptr);
}

inline bool VerifySizePrefixedRoot_S2C_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message>(nullptr);
}

inline void FinishRoot_S2C_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRoot_S2C_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_Message> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_MessageT> UnPackRoot_S2C_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_MessageT>(GetRoot_S2C_UDP_Message(buf)->UnPack(res));
}

inline std::unique_ptr<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_MessageT> UnPackSizePrefixedRoot_S2C_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::S2C::Root_S2C_UDP_MessageT>(GetSizePrefixedRoot_S2C_UDP_Message(buf)->UnPack(res));
}

}  // namespace S2C
}  // namespace UDP
}  // namespace Networking
}  // namespace RiftForged

#endif  // FLATBUFFERS_GENERATED_RIFTFORGEDS2CUDPMESSAGES_RIFTFORGED_NETWORKING_UDP_S2C_H_
