// File: Schemas/riftforged_s2c_udp_messages.fbs
// Protocol Version: 0.0.1
// Description: Defines Server-to-Client messages for real-time UDP communication.

include "riftforged_common_types.fbs"; 

namespace RiftForged.Networking.UDP.S2C;

//-----------------------------------------------------------------------------
// Supporting S2C Enums
//-----------------------------------------------------------------------------
enum ResourceType : byte { Will = 0, Health = 1, Shimmer_Notification = 2 }

enum CombatEventType : byte {
  DamageDealt = 0, HealReceived = 1, Miss = 2, Dodge = 3, Block = 4, 
  Parry = 5, CriticalHit = 6, AbilityInterrupt = 7
}

//-----------------------------------------------------------------------------
// S2C Effect Data Table Definitions (for RiftStepEffectPayload and other abilities)
//-----------------------------------------------------------------------------
table Effect_AreaDamageData {
  area_center:RiftForged.Networking.Shared.Vec3;
  radius:float;
  damage_info:RiftForged.Networking.Shared.DamageInstance;
  // visual_effect_tag:string; // Optional, can be part of parent message
}

table Effect_AreaStunData {
  area_center:RiftForged.Networking.Shared.Vec3;
  radius:float;
  stun_details:RiftForged.Networking.Shared.StunInstance;
  // visual_effect_tag:string;
}

table Effect_ApplyBuffDebuffData {
  // target_entity_id:ulong; // Target is often implied by parent message context
  buff_debuff_id:RiftForged.Networking.Shared.StatusEffectCategory;
  duration_ms:uint;
}

table Effect_PersistentAreaData {
  area_center:RiftForged.Networking.Shared.Vec3;
  radius:float;
  duration_ms:uint;
  visual_effect_tag:string;
  // What effects this area applies on contact or per tick:
  applied_effects_on_contact:[RiftForged.Networking.Shared.StatusEffectCategory];
  // damage_per_tick:RiftForged.Networking.Shared.DamageInstance; // Example
}

//-----------------------------------------------------------------------------
// S2C Combat Event Detail Table Definitions (for CombatEventPayload)
//-----------------------------------------------------------------------------
table CombatEvent_DamageDealtDetails {
  source_entity_id:ulong;
  target_entity_id:ulong;
  damage_info:RiftForged.Networking.Shared.DamageInstance;
  is_kill:bool = false;
}

//-----------------------------------------------------------------------------
// S2C Unions using the above tables
//-----------------------------------------------------------------------------
union RiftStepEffectPayload : byte { // : byte should map to uint8_t for types by default by most flatc versions
  //NONE_RiftStepEffect = 0,          // Explicit NONE is good practice for unions
  AreaDamage:Effect_AreaDamageData,
  AreaStun:Effect_AreaStunData,
  ApplyBuff:Effect_ApplyBuffDebuffData,
  PersistentArea:Effect_PersistentAreaData
}

union CombatEventPayload : byte {
  //NONE_CombatEvent = 0,
  DamageDealt:CombatEvent_DamageDealtDetails
  // Add S2C tables for HealReceivedDetails, StatusEffectAppliedDetails etc. here later
}

//-----------------------------------------------------------------------------
// Main S2C Message Table Definitions
//-----------------------------------------------------------------------------
table S2C_EntityStateUpdateMsg {
  entity_id:ulong (key);
  position:RiftForged.Networking.Shared.Vec3;    // Assume always present for an update
  orientation:RiftForged.Networking.Shared.Quaternion; // Assume always present
  current_health:int;
  max_health:uint;
  current_will:int;
  max_will:uint;
  server_timestamp_ms:ulong;
  animation_state_id:uint; // Defaults to 0 (e.g., Idle) if not set
  active_status_effects:[RiftForged.Networking.Shared.StatusEffectCategory]; // Optional (empty vector if none)
  // movement_state:RiftForged.GameLogic.PlayerMovementState; // If PlayerMovementState is in common_types.fbs
}

// For RiftStep, signaling initiation, target, duration, and immediate effects.
// Server position is updated instantly. Client visualizes travel.
table S2C_RiftStepInitiatedMsg {
  instigator_entity_id:ulong;
  actual_start_position:RiftForged.Networking.Shared.Vec3;
  calculated_target_position:RiftForged.Networking.Shared.Vec3; // Client might not need this if actual_final is sent
  actual_final_position:RiftForged.Networking.Shared.Vec3;   // Where player landed (server authoritative)
  cosmetic_travel_duration_sec:float = 0.25; // For client visuals, server logic is instant
  
  entry_effects:[RiftStepEffectPayload]; // Vector of actual effect tables, implicit _type vector
  exit_effects:[RiftStepEffectPayload];  // Vector of actual effect tables, implicit _type vector
  
  start_vfx_id:string;
  travel_vfx_id:string; // For the short cosmetic travel
  end_vfx_id:string;    // For impact at final_position
}

table S2C_ResourceUpdateMsg {
  resource_type:ResourceType;
  current_value:int;
  max_value:uint;
}

table S2C_CombatEventMsg {
  event_type:CombatEventType;
  event_payload:CombatEventPayload (required); // This union must contain something
  server_timestamp_ms:ulong;
}

table S2C_PongMsg {
  client_timestamp_ms:ulong;
  server_timestamp_ms:ulong;
}

table S2C_SystemBroadcastMsg {
  message_text:string (required);
  sender_name:string; 
}

//-----------------------------------------------------------------------------
// S2C Root Payload Union and Root Message
//-----------------------------------------------------------------------------
union S2C_UDP_Payload {
  EntityStateUpdate:S2C_EntityStateUpdateMsg,
  RiftStepInitiated:S2C_RiftStepInitiatedMsg, 
  ResourceUpdate:S2C_ResourceUpdateMsg,
  CombatEvent:S2C_CombatEventMsg,
  SystemBroadcast:S2C_SystemBroadcastMsg,
  Pong:S2C_PongMsg
}

table Root_S2C_UDP_Message {
  payload:S2C_UDP_Payload (required);
}
root_type Root_S2C_UDP_Message;