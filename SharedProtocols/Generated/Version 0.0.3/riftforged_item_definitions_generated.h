// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RIFTFORGEDITEMDEFINITIONS_RIFTFORGED_NETWORKING_SHARED_ITEMS_H_
#define FLATBUFFERS_GENERATED_RIFTFORGEDITEMDEFINITIONS_RIFTFORGED_NETWORKING_SHARED_ITEMS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "riftforged_common_types_generated.h"

namespace RiftForged {
namespace Networking {
namespace Shared {
namespace Items {

struct WeaponStaticPropsTable;
struct WeaponStaticPropsTableBuilder;
struct WeaponStaticPropsTableT;

struct ArmorStaticPropsTable;
struct ArmorStaticPropsTableBuilder;
struct ArmorStaticPropsTableT;

struct ConsumableStaticPropsTable;
struct ConsumableStaticPropsTableBuilder;
struct ConsumableStaticPropsTableT;

struct GildKitStaticPropsTable;
struct GildKitStaticPropsTableBuilder;
struct GildKitStaticPropsTableT;

struct StarMapPointUpgradeStaticPropsTable;
struct StarMapPointUpgradeStaticPropsTableBuilder;
struct StarMapPointUpgradeStaticPropsTableT;

struct ClassUnlockTokenStaticPropsTable;
struct ClassUnlockTokenStaticPropsTableBuilder;
struct ClassUnlockTokenStaticPropsTableT;

struct ItemStaticDataDefinition;
struct ItemStaticDataDefinitionBuilder;
struct ItemStaticDataDefinitionT;

struct ItemDefinitionCollection;
struct ItemDefinitionCollectionBuilder;
struct ItemDefinitionCollectionT;

enum ItemType : uint16_t {
  ItemType_NONE = 0,
  ItemType_CURRENCY_SHIMMER = 1,
  ItemType_WEAPON_SWORD = 2,
  ItemType_WEAPON_AXE = 3,
  ItemType_WEAPON_MAUL = 4,
  ItemType_WEAPON_BOW = 5,
  ItemType_WEAPON_GUN_1H = 6,
  ItemType_WEAPON_GUN_2H = 7,
  ItemType_WEAPON_WAND = 8,
  ItemType_WEAPON_STAFF = 9,
  ItemType_ARMOR_HEAD_LIGHT = 10,
  ItemType_ARMOR_HEAD_MEDIUM = 11,
  ItemType_ARMOR_HEAD_HEAVY = 12,
  ItemType_ARMOR_CHEST_LIGHT = 13,
  ItemType_ARMOR_CHEST_MEDIUM = 14,
  ItemType_ARMOR_CHEST_HEAVY = 15,
  ItemType_ARMOR_HANDS_LIGHT = 16,
  ItemType_ARMOR_HANDS_MEDIUM = 17,
  ItemType_ARMOR_HANDS_HEAVY = 18,
  ItemType_ARMOR_FEET_LIGHT = 19,
  ItemType_ARMOR_FEET_MEDIUM = 20,
  ItemType_ARMOR_FEET_HEAVY = 21,
  ItemType_ARMOR_BELT_LIGHT = 22,
  ItemType_ARMOR_BELT_MEDIUM = 23,
  ItemType_ARMOR_BELT_HEAVY = 24,
  ItemType_ARMOR_SHIELD_LIGHT = 25,
  ItemType_ARMOR_SHIELD_HEAVY = 26,
  ItemType_ACCESSORY_AMULET = 27,
  ItemType_ACCESSORY_RING = 28,
  ItemType_CONSUMABLE_POTION = 29,
  ItemType_CONSUMABLE_ELIXIR = 30,
  ItemType_CONSUMABLE_FOOD = 31,
  ItemType_CONSUMABLE_RIFT_TONIC = 32,
  ItemType_CONSUMABLE_SCROLL = 33,
  ItemType_MATERIAL_ELEMENTAL_AIR_SOLIDIFIED = 34,
  ItemType_MATERIAL_ELEMENTAL_WATER_SOLIDIFIED = 35,
  ItemType_MATERIAL_ELEMENTAL_FIRE_SOLIDIFIED = 36,
  ItemType_MATERIAL_ELEMENTAL_EARTH_SOLIDIFIED = 37,
  ItemType_MATERIAL_METAL_BAR = 38,
  ItemType_MATERIAL_WOOD = 39,
  ItemType_MATERIAL_LEATHER = 40,
  ItemType_MATERIAL_CLOTH = 41,
  ItemType_MATERIAL_DUST_GILDING_EARLY_GAME = 42,
  ItemType_MATERIAL_DUST_GILDING_MID_GAME = 43,
  ItemType_MATERIAL_DUST_GILDING_LATE_GAME = 44,
  ItemType_MATERIAL_DUST_GILDING_END_GAME = 45,
  ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_EARLY_GAME = 46,
  ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_MID_GAME = 47,
  ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_LATE_GAME = 48,
  ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_END_GAME = 49,
  ItemType_MATERIAL_COMPONENT_GEM = 50,
  ItemType_MATERIAL_COMPONENT_SPECIAL = 51,
  ItemType_ITEM_GILD_KIT_ELEMENTAL = 52,
  ItemType_ITEM_STAR_MAP_POINT_UPGRADE = 53,
  ItemType_TOKEN_CLASS_UNLOCK = 54,
  ItemType_TOKEN_FACTION_REPUTATION = 55,
  ItemType_ITEM_QUEST = 56,
  ItemType_ITEM_KEY = 57,
  ItemType_ITEM_RECIPE = 58,
  ItemType_ITEM_JUNK = 59,
  ItemType_MIN = ItemType_NONE,
  ItemType_MAX = ItemType_ITEM_JUNK
};

inline const ItemType (&EnumValuesItemType())[60] {
  static const ItemType values[] = {
    ItemType_NONE,
    ItemType_CURRENCY_SHIMMER,
    ItemType_WEAPON_SWORD,
    ItemType_WEAPON_AXE,
    ItemType_WEAPON_MAUL,
    ItemType_WEAPON_BOW,
    ItemType_WEAPON_GUN_1H,
    ItemType_WEAPON_GUN_2H,
    ItemType_WEAPON_WAND,
    ItemType_WEAPON_STAFF,
    ItemType_ARMOR_HEAD_LIGHT,
    ItemType_ARMOR_HEAD_MEDIUM,
    ItemType_ARMOR_HEAD_HEAVY,
    ItemType_ARMOR_CHEST_LIGHT,
    ItemType_ARMOR_CHEST_MEDIUM,
    ItemType_ARMOR_CHEST_HEAVY,
    ItemType_ARMOR_HANDS_LIGHT,
    ItemType_ARMOR_HANDS_MEDIUM,
    ItemType_ARMOR_HANDS_HEAVY,
    ItemType_ARMOR_FEET_LIGHT,
    ItemType_ARMOR_FEET_MEDIUM,
    ItemType_ARMOR_FEET_HEAVY,
    ItemType_ARMOR_BELT_LIGHT,
    ItemType_ARMOR_BELT_MEDIUM,
    ItemType_ARMOR_BELT_HEAVY,
    ItemType_ARMOR_SHIELD_LIGHT,
    ItemType_ARMOR_SHIELD_HEAVY,
    ItemType_ACCESSORY_AMULET,
    ItemType_ACCESSORY_RING,
    ItemType_CONSUMABLE_POTION,
    ItemType_CONSUMABLE_ELIXIR,
    ItemType_CONSUMABLE_FOOD,
    ItemType_CONSUMABLE_RIFT_TONIC,
    ItemType_CONSUMABLE_SCROLL,
    ItemType_MATERIAL_ELEMENTAL_AIR_SOLIDIFIED,
    ItemType_MATERIAL_ELEMENTAL_WATER_SOLIDIFIED,
    ItemType_MATERIAL_ELEMENTAL_FIRE_SOLIDIFIED,
    ItemType_MATERIAL_ELEMENTAL_EARTH_SOLIDIFIED,
    ItemType_MATERIAL_METAL_BAR,
    ItemType_MATERIAL_WOOD,
    ItemType_MATERIAL_LEATHER,
    ItemType_MATERIAL_CLOTH,
    ItemType_MATERIAL_DUST_GILDING_EARLY_GAME,
    ItemType_MATERIAL_DUST_GILDING_MID_GAME,
    ItemType_MATERIAL_DUST_GILDING_LATE_GAME,
    ItemType_MATERIAL_DUST_GILDING_END_GAME,
    ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_EARLY_GAME,
    ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_MID_GAME,
    ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_LATE_GAME,
    ItemType_MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_END_GAME,
    ItemType_MATERIAL_COMPONENT_GEM,
    ItemType_MATERIAL_COMPONENT_SPECIAL,
    ItemType_ITEM_GILD_KIT_ELEMENTAL,
    ItemType_ITEM_STAR_MAP_POINT_UPGRADE,
    ItemType_TOKEN_CLASS_UNLOCK,
    ItemType_TOKEN_FACTION_REPUTATION,
    ItemType_ITEM_QUEST,
    ItemType_ITEM_KEY,
    ItemType_ITEM_RECIPE,
    ItemType_ITEM_JUNK
  };
  return values;
}

inline const char * const *EnumNamesItemType() {
  static const char * const names[61] = {
    "NONE",
    "CURRENCY_SHIMMER",
    "WEAPON_SWORD",
    "WEAPON_AXE",
    "WEAPON_MAUL",
    "WEAPON_BOW",
    "WEAPON_GUN_1H",
    "WEAPON_GUN_2H",
    "WEAPON_WAND",
    "WEAPON_STAFF",
    "ARMOR_HEAD_LIGHT",
    "ARMOR_HEAD_MEDIUM",
    "ARMOR_HEAD_HEAVY",
    "ARMOR_CHEST_LIGHT",
    "ARMOR_CHEST_MEDIUM",
    "ARMOR_CHEST_HEAVY",
    "ARMOR_HANDS_LIGHT",
    "ARMOR_HANDS_MEDIUM",
    "ARMOR_HANDS_HEAVY",
    "ARMOR_FEET_LIGHT",
    "ARMOR_FEET_MEDIUM",
    "ARMOR_FEET_HEAVY",
    "ARMOR_BELT_LIGHT",
    "ARMOR_BELT_MEDIUM",
    "ARMOR_BELT_HEAVY",
    "ARMOR_SHIELD_LIGHT",
    "ARMOR_SHIELD_HEAVY",
    "ACCESSORY_AMULET",
    "ACCESSORY_RING",
    "CONSUMABLE_POTION",
    "CONSUMABLE_ELIXIR",
    "CONSUMABLE_FOOD",
    "CONSUMABLE_RIFT_TONIC",
    "CONSUMABLE_SCROLL",
    "MATERIAL_ELEMENTAL_AIR_SOLIDIFIED",
    "MATERIAL_ELEMENTAL_WATER_SOLIDIFIED",
    "MATERIAL_ELEMENTAL_FIRE_SOLIDIFIED",
    "MATERIAL_ELEMENTAL_EARTH_SOLIDIFIED",
    "MATERIAL_METAL_BAR",
    "MATERIAL_WOOD",
    "MATERIAL_LEATHER",
    "MATERIAL_CLOTH",
    "MATERIAL_DUST_GILDING_EARLY_GAME",
    "MATERIAL_DUST_GILDING_MID_GAME",
    "MATERIAL_DUST_GILDING_LATE_GAME",
    "MATERIAL_DUST_GILDING_END_GAME",
    "MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_EARLY_GAME",
    "MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_MID_GAME",
    "MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_LATE_GAME",
    "MATERIAL_ESSENCE_CLASS_CRAFTING_GENERAL_END_GAME",
    "MATERIAL_COMPONENT_GEM",
    "MATERIAL_COMPONENT_SPECIAL",
    "ITEM_GILD_KIT_ELEMENTAL",
    "ITEM_STAR_MAP_POINT_UPGRADE",
    "TOKEN_CLASS_UNLOCK",
    "TOKEN_FACTION_REPUTATION",
    "ITEM_QUEST",
    "ITEM_KEY",
    "ITEM_RECIPE",
    "ITEM_JUNK",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemType(ItemType e) {
  if (::flatbuffers::IsOutRange(e, ItemType_NONE, ItemType_ITEM_JUNK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemType()[index];
}

enum ItemRarity : int8_t {
  ItemRarity_NORMAL = 0,
  ItemRarity_SHARP = 1,
  ItemRarity_MAGIC = 2,
  ItemRarity_RARE = 3,
  ItemRarity_LEGENDARY = 4,
  ItemRarity_EPIC = 5,
  ItemRarity_MYTHIC = 6,
  ItemRarity_META = 7,
  ItemRarity_MIN = ItemRarity_NORMAL,
  ItemRarity_MAX = ItemRarity_META
};

inline const ItemRarity (&EnumValuesItemRarity())[8] {
  static const ItemRarity values[] = {
    ItemRarity_NORMAL,
    ItemRarity_SHARP,
    ItemRarity_MAGIC,
    ItemRarity_RARE,
    ItemRarity_LEGENDARY,
    ItemRarity_EPIC,
    ItemRarity_MYTHIC,
    ItemRarity_META
  };
  return values;
}

inline const char * const *EnumNamesItemRarity() {
  static const char * const names[9] = {
    "NORMAL",
    "SHARP",
    "MAGIC",
    "RARE",
    "LEGENDARY",
    "EPIC",
    "MYTHIC",
    "META",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemRarity(ItemRarity e) {
  if (::flatbuffers::IsOutRange(e, ItemRarity_NORMAL, ItemRarity_META)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemRarity()[index];
}

enum EquipmentSlot : int8_t {
  EquipmentSlot_NONE_SLOT = 0,
  EquipmentSlot_HEAD = 1,
  EquipmentSlot_CHEST = 2,
  EquipmentSlot_HANDS = 3,
  EquipmentSlot_FEET = 4,
  EquipmentSlot_BELT = 5,
  EquipmentSlot_MAIN_HAND = 6,
  EquipmentSlot_OFF_HAND = 7,
  EquipmentSlot_MIN = EquipmentSlot_NONE_SLOT,
  EquipmentSlot_MAX = EquipmentSlot_OFF_HAND
};

inline const EquipmentSlot (&EnumValuesEquipmentSlot())[8] {
  static const EquipmentSlot values[] = {
    EquipmentSlot_NONE_SLOT,
    EquipmentSlot_HEAD,
    EquipmentSlot_CHEST,
    EquipmentSlot_HANDS,
    EquipmentSlot_FEET,
    EquipmentSlot_BELT,
    EquipmentSlot_MAIN_HAND,
    EquipmentSlot_OFF_HAND
  };
  return values;
}

inline const char * const *EnumNamesEquipmentSlot() {
  static const char * const names[9] = {
    "NONE_SLOT",
    "HEAD",
    "CHEST",
    "HANDS",
    "FEET",
    "BELT",
    "MAIN_HAND",
    "OFF_HAND",
    nullptr
  };
  return names;
}

inline const char *EnumNameEquipmentSlot(EquipmentSlot e) {
  if (::flatbuffers::IsOutRange(e, EquipmentSlot_NONE_SLOT, EquipmentSlot_OFF_HAND)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEquipmentSlot()[index];
}

enum ItemMaterialTier : int8_t {
  ItemMaterialTier_NONE_TIER = 0,
  ItemMaterialTier_TIER_0_BASE = 1,
  ItemMaterialTier_TIER_1 = 2,
  ItemMaterialTier_TIER_2 = 3,
  ItemMaterialTier_TIER_3 = 4,
  ItemMaterialTier_TIER_4 = 5,
  ItemMaterialTier_TIER_LEGENDARY_BASE = 6,
  ItemMaterialTier_TIER_EPIC_BASE = 7,
  ItemMaterialTier_TIER_MYTHIC_BASE = 8,
  ItemMaterialTier_TIER_ARTIFACT = 9,
  ItemMaterialTier_TIER_TRANSCENDENT = 10,
  ItemMaterialTier_TIER_META_BASE = 11,
  ItemMaterialTier_MIN = ItemMaterialTier_NONE_TIER,
  ItemMaterialTier_MAX = ItemMaterialTier_TIER_META_BASE
};

inline const ItemMaterialTier (&EnumValuesItemMaterialTier())[12] {
  static const ItemMaterialTier values[] = {
    ItemMaterialTier_NONE_TIER,
    ItemMaterialTier_TIER_0_BASE,
    ItemMaterialTier_TIER_1,
    ItemMaterialTier_TIER_2,
    ItemMaterialTier_TIER_3,
    ItemMaterialTier_TIER_4,
    ItemMaterialTier_TIER_LEGENDARY_BASE,
    ItemMaterialTier_TIER_EPIC_BASE,
    ItemMaterialTier_TIER_MYTHIC_BASE,
    ItemMaterialTier_TIER_ARTIFACT,
    ItemMaterialTier_TIER_TRANSCENDENT,
    ItemMaterialTier_TIER_META_BASE
  };
  return values;
}

inline const char * const *EnumNamesItemMaterialTier() {
  static const char * const names[13] = {
    "NONE_TIER",
    "TIER_0_BASE",
    "TIER_1",
    "TIER_2",
    "TIER_3",
    "TIER_4",
    "TIER_LEGENDARY_BASE",
    "TIER_EPIC_BASE",
    "TIER_MYTHIC_BASE",
    "TIER_ARTIFACT",
    "TIER_TRANSCENDENT",
    "TIER_META_BASE",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemMaterialTier(ItemMaterialTier e) {
  if (::flatbuffers::IsOutRange(e, ItemMaterialTier_NONE_TIER, ItemMaterialTier_TIER_META_BASE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemMaterialTier()[index];
}

enum ConsumableEffectType : int8_t {
  ConsumableEffectType_NONE_EFFECT = 0,
  ConsumableEffectType_RESTORE_HEALTH = 1,
  ConsumableEffectType_RESTORE_WILL = 2,
  ConsumableEffectType_APPLY_STATUS_EFFECT = 3,
  ConsumableEffectType_MIN = ConsumableEffectType_NONE_EFFECT,
  ConsumableEffectType_MAX = ConsumableEffectType_APPLY_STATUS_EFFECT
};

inline const ConsumableEffectType (&EnumValuesConsumableEffectType())[4] {
  static const ConsumableEffectType values[] = {
    ConsumableEffectType_NONE_EFFECT,
    ConsumableEffectType_RESTORE_HEALTH,
    ConsumableEffectType_RESTORE_WILL,
    ConsumableEffectType_APPLY_STATUS_EFFECT
  };
  return values;
}

inline const char * const *EnumNamesConsumableEffectType() {
  static const char * const names[5] = {
    "NONE_EFFECT",
    "RESTORE_HEALTH",
    "RESTORE_WILL",
    "APPLY_STATUS_EFFECT",
    nullptr
  };
  return names;
}

inline const char *EnumNameConsumableEffectType(ConsumableEffectType e) {
  if (::flatbuffers::IsOutRange(e, ConsumableEffectType_NONE_EFFECT, ConsumableEffectType_APPLY_STATUS_EFFECT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesConsumableEffectType()[index];
}

enum GildTargetType : int8_t {
  GildTargetType_WEAPON_TARGET = 0,
  GildTargetType_ARMOR_TARGET = 1,
  GildTargetType_MIN = GildTargetType_WEAPON_TARGET,
  GildTargetType_MAX = GildTargetType_ARMOR_TARGET
};

inline const GildTargetType (&EnumValuesGildTargetType())[2] {
  static const GildTargetType values[] = {
    GildTargetType_WEAPON_TARGET,
    GildTargetType_ARMOR_TARGET
  };
  return values;
}

inline const char * const *EnumNamesGildTargetType() {
  static const char * const names[3] = {
    "WEAPON_TARGET",
    "ARMOR_TARGET",
    nullptr
  };
  return names;
}

inline const char *EnumNameGildTargetType(GildTargetType e) {
  if (::flatbuffers::IsOutRange(e, GildTargetType_WEAPON_TARGET, GildTargetType_ARMOR_TARGET)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGildTargetType()[index];
}

enum ItemProperties : uint8_t {
  ItemProperties_NONE = 0,
  ItemProperties_WeaponStaticPropsTable = 1,
  ItemProperties_ArmorStaticPropsTable = 2,
  ItemProperties_ConsumableStaticPropsTable = 3,
  ItemProperties_GildKitStaticPropsTable = 4,
  ItemProperties_StarMapPointUpgradeStaticPropsTable = 5,
  ItemProperties_ClassUnlockTokenStaticPropsTable = 6,
  ItemProperties_MIN = ItemProperties_NONE,
  ItemProperties_MAX = ItemProperties_ClassUnlockTokenStaticPropsTable
};

inline const ItemProperties (&EnumValuesItemProperties())[7] {
  static const ItemProperties values[] = {
    ItemProperties_NONE,
    ItemProperties_WeaponStaticPropsTable,
    ItemProperties_ArmorStaticPropsTable,
    ItemProperties_ConsumableStaticPropsTable,
    ItemProperties_GildKitStaticPropsTable,
    ItemProperties_StarMapPointUpgradeStaticPropsTable,
    ItemProperties_ClassUnlockTokenStaticPropsTable
  };
  return values;
}

inline const char * const *EnumNamesItemProperties() {
  static const char * const names[8] = {
    "NONE",
    "WeaponStaticPropsTable",
    "ArmorStaticPropsTable",
    "ConsumableStaticPropsTable",
    "GildKitStaticPropsTable",
    "StarMapPointUpgradeStaticPropsTable",
    "ClassUnlockTokenStaticPropsTable",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemProperties(ItemProperties e) {
  if (::flatbuffers::IsOutRange(e, ItemProperties_NONE, ItemProperties_ClassUnlockTokenStaticPropsTable)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemProperties()[index];
}

template<typename T> struct ItemPropertiesTraits {
  static const ItemProperties enum_value = ItemProperties_NONE;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::WeaponStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_WeaponStaticPropsTable;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::ArmorStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_ArmorStaticPropsTable;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_ConsumableStaticPropsTable;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::GildKitStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_GildKitStaticPropsTable;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_StarMapPointUpgradeStaticPropsTable;
};

template<> struct ItemPropertiesTraits<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable> {
  static const ItemProperties enum_value = ItemProperties_ClassUnlockTokenStaticPropsTable;
};

template<typename T> struct ItemPropertiesUnionTraits {
  static const ItemProperties enum_value = ItemProperties_NONE;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_WeaponStaticPropsTable;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_ArmorStaticPropsTable;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_ConsumableStaticPropsTable;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_GildKitStaticPropsTable;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_StarMapPointUpgradeStaticPropsTable;
};

template<> struct ItemPropertiesUnionTraits<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT> {
  static const ItemProperties enum_value = ItemProperties_ClassUnlockTokenStaticPropsTable;
};

struct ItemPropertiesUnion {
  ItemProperties type;
  void *value;

  ItemPropertiesUnion() : type(ItemProperties_NONE), value(nullptr) {}
  ItemPropertiesUnion(ItemPropertiesUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(ItemProperties_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  ItemPropertiesUnion(const ItemPropertiesUnion &);
  ItemPropertiesUnion &operator=(const ItemPropertiesUnion &u)
    { ItemPropertiesUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  ItemPropertiesUnion &operator=(ItemPropertiesUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~ItemPropertiesUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = ItemPropertiesUnionTraits<RT>::enum_value;
    if (type != ItemProperties_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, ItemProperties type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *AsWeaponStaticPropsTable() {
    return type == ItemProperties_WeaponStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *AsWeaponStaticPropsTable() const {
    return type == ItemProperties_WeaponStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *>(value) : nullptr;
  }
  RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *AsArmorStaticPropsTable() {
    return type == ItemProperties_ArmorStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *AsArmorStaticPropsTable() const {
    return type == ItemProperties_ArmorStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *>(value) : nullptr;
  }
  RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *AsConsumableStaticPropsTable() {
    return type == ItemProperties_ConsumableStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *AsConsumableStaticPropsTable() const {
    return type == ItemProperties_ConsumableStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *>(value) : nullptr;
  }
  RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *AsGildKitStaticPropsTable() {
    return type == ItemProperties_GildKitStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *AsGildKitStaticPropsTable() const {
    return type == ItemProperties_GildKitStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *>(value) : nullptr;
  }
  RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *AsStarMapPointUpgradeStaticPropsTable() {
    return type == ItemProperties_StarMapPointUpgradeStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *AsStarMapPointUpgradeStaticPropsTable() const {
    return type == ItemProperties_StarMapPointUpgradeStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *>(value) : nullptr;
  }
  RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *AsClassUnlockTokenStaticPropsTable() {
    return type == ItemProperties_ClassUnlockTokenStaticPropsTable ?
      reinterpret_cast<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *>(value) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *AsClassUnlockTokenStaticPropsTable() const {
    return type == ItemProperties_ClassUnlockTokenStaticPropsTable ?
      reinterpret_cast<const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *>(value) : nullptr;
  }
};

bool VerifyItemProperties(::flatbuffers::Verifier &verifier, const void *obj, ItemProperties type);
bool VerifyItemPropertiesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct WeaponStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef WeaponStaticPropsTable TableType;
  float base_physical_damage_min = 0.0f;
  float base_physical_damage_max = 0.0f;
  float attack_speed = 0.0f;
  float range_meters = 0.0f;
  float critical_hit_chance_base_percent = 0.0f;
  float critical_hit_damage_base_multiplier = 0.0f;
  bool is_gildable = true;
};

struct WeaponStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WeaponStaticPropsTableT NativeTableType;
  typedef WeaponStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_PHYSICAL_DAMAGE_MIN = 4,
    VT_BASE_PHYSICAL_DAMAGE_MAX = 6,
    VT_ATTACK_SPEED = 8,
    VT_RANGE_METERS = 10,
    VT_CRITICAL_HIT_CHANCE_BASE_PERCENT = 12,
    VT_CRITICAL_HIT_DAMAGE_BASE_MULTIPLIER = 14,
    VT_IS_GILDABLE = 16
  };
  float base_physical_damage_min() const {
    return GetField<float>(VT_BASE_PHYSICAL_DAMAGE_MIN, 0.0f);
  }
  float base_physical_damage_max() const {
    return GetField<float>(VT_BASE_PHYSICAL_DAMAGE_MAX, 0.0f);
  }
  float attack_speed() const {
    return GetField<float>(VT_ATTACK_SPEED, 0.0f);
  }
  float range_meters() const {
    return GetField<float>(VT_RANGE_METERS, 0.0f);
  }
  float critical_hit_chance_base_percent() const {
    return GetField<float>(VT_CRITICAL_HIT_CHANCE_BASE_PERCENT, 0.0f);
  }
  float critical_hit_damage_base_multiplier() const {
    return GetField<float>(VT_CRITICAL_HIT_DAMAGE_BASE_MULTIPLIER, 0.0f);
  }
  bool is_gildable() const {
    return GetField<uint8_t>(VT_IS_GILDABLE, 1) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_BASE_PHYSICAL_DAMAGE_MIN, 4) &&
           VerifyField<float>(verifier, VT_BASE_PHYSICAL_DAMAGE_MAX, 4) &&
           VerifyField<float>(verifier, VT_ATTACK_SPEED, 4) &&
           VerifyField<float>(verifier, VT_RANGE_METERS, 4) &&
           VerifyField<float>(verifier, VT_CRITICAL_HIT_CHANCE_BASE_PERCENT, 4) &&
           VerifyField<float>(verifier, VT_CRITICAL_HIT_DAMAGE_BASE_MULTIPLIER, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_GILDABLE, 1) &&
           verifier.EndTable();
  }
  WeaponStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WeaponStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<WeaponStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const WeaponStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WeaponStaticPropsTableBuilder {
  typedef WeaponStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_physical_damage_min(float base_physical_damage_min) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_BASE_PHYSICAL_DAMAGE_MIN, base_physical_damage_min, 0.0f);
  }
  void add_base_physical_damage_max(float base_physical_damage_max) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_BASE_PHYSICAL_DAMAGE_MAX, base_physical_damage_max, 0.0f);
  }
  void add_attack_speed(float attack_speed) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_ATTACK_SPEED, attack_speed, 0.0f);
  }
  void add_range_meters(float range_meters) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_RANGE_METERS, range_meters, 0.0f);
  }
  void add_critical_hit_chance_base_percent(float critical_hit_chance_base_percent) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_CRITICAL_HIT_CHANCE_BASE_PERCENT, critical_hit_chance_base_percent, 0.0f);
  }
  void add_critical_hit_damage_base_multiplier(float critical_hit_damage_base_multiplier) {
    fbb_.AddElement<float>(WeaponStaticPropsTable::VT_CRITICAL_HIT_DAMAGE_BASE_MULTIPLIER, critical_hit_damage_base_multiplier, 0.0f);
  }
  void add_is_gildable(bool is_gildable) {
    fbb_.AddElement<uint8_t>(WeaponStaticPropsTable::VT_IS_GILDABLE, static_cast<uint8_t>(is_gildable), 1);
  }
  explicit WeaponStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WeaponStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WeaponStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WeaponStaticPropsTable> CreateWeaponStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float base_physical_damage_min = 0.0f,
    float base_physical_damage_max = 0.0f,
    float attack_speed = 0.0f,
    float range_meters = 0.0f,
    float critical_hit_chance_base_percent = 0.0f,
    float critical_hit_damage_base_multiplier = 0.0f,
    bool is_gildable = true) {
  WeaponStaticPropsTableBuilder builder_(_fbb);
  builder_.add_critical_hit_damage_base_multiplier(critical_hit_damage_base_multiplier);
  builder_.add_critical_hit_chance_base_percent(critical_hit_chance_base_percent);
  builder_.add_range_meters(range_meters);
  builder_.add_attack_speed(attack_speed);
  builder_.add_base_physical_damage_max(base_physical_damage_max);
  builder_.add_base_physical_damage_min(base_physical_damage_min);
  builder_.add_is_gildable(is_gildable);
  return builder_.Finish();
}

::flatbuffers::Offset<WeaponStaticPropsTable> CreateWeaponStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const WeaponStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ArmorStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef ArmorStaticPropsTable TableType;
  float base_defense = 0.0f;
  float will_regeneration_penalty_percent = 0.0f;
  float movement_speed_reduction_percent = 0.0f;
  float block_damage_reduction_percent = 0.0f;
  float block_stamina_cost = 0.0f;
};

struct ArmorStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ArmorStaticPropsTableT NativeTableType;
  typedef ArmorStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_DEFENSE = 4,
    VT_WILL_REGENERATION_PENALTY_PERCENT = 6,
    VT_MOVEMENT_SPEED_REDUCTION_PERCENT = 8,
    VT_BLOCK_DAMAGE_REDUCTION_PERCENT = 10,
    VT_BLOCK_STAMINA_COST = 12
  };
  float base_defense() const {
    return GetField<float>(VT_BASE_DEFENSE, 0.0f);
  }
  float will_regeneration_penalty_percent() const {
    return GetField<float>(VT_WILL_REGENERATION_PENALTY_PERCENT, 0.0f);
  }
  float movement_speed_reduction_percent() const {
    return GetField<float>(VT_MOVEMENT_SPEED_REDUCTION_PERCENT, 0.0f);
  }
  float block_damage_reduction_percent() const {
    return GetField<float>(VT_BLOCK_DAMAGE_REDUCTION_PERCENT, 0.0f);
  }
  float block_stamina_cost() const {
    return GetField<float>(VT_BLOCK_STAMINA_COST, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_BASE_DEFENSE, 4) &&
           VerifyField<float>(verifier, VT_WILL_REGENERATION_PENALTY_PERCENT, 4) &&
           VerifyField<float>(verifier, VT_MOVEMENT_SPEED_REDUCTION_PERCENT, 4) &&
           VerifyField<float>(verifier, VT_BLOCK_DAMAGE_REDUCTION_PERCENT, 4) &&
           VerifyField<float>(verifier, VT_BLOCK_STAMINA_COST, 4) &&
           verifier.EndTable();
  }
  ArmorStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ArmorStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ArmorStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ArmorStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ArmorStaticPropsTableBuilder {
  typedef ArmorStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_defense(float base_defense) {
    fbb_.AddElement<float>(ArmorStaticPropsTable::VT_BASE_DEFENSE, base_defense, 0.0f);
  }
  void add_will_regeneration_penalty_percent(float will_regeneration_penalty_percent) {
    fbb_.AddElement<float>(ArmorStaticPropsTable::VT_WILL_REGENERATION_PENALTY_PERCENT, will_regeneration_penalty_percent, 0.0f);
  }
  void add_movement_speed_reduction_percent(float movement_speed_reduction_percent) {
    fbb_.AddElement<float>(ArmorStaticPropsTable::VT_MOVEMENT_SPEED_REDUCTION_PERCENT, movement_speed_reduction_percent, 0.0f);
  }
  void add_block_damage_reduction_percent(float block_damage_reduction_percent) {
    fbb_.AddElement<float>(ArmorStaticPropsTable::VT_BLOCK_DAMAGE_REDUCTION_PERCENT, block_damage_reduction_percent, 0.0f);
  }
  void add_block_stamina_cost(float block_stamina_cost) {
    fbb_.AddElement<float>(ArmorStaticPropsTable::VT_BLOCK_STAMINA_COST, block_stamina_cost, 0.0f);
  }
  explicit ArmorStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ArmorStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ArmorStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ArmorStaticPropsTable> CreateArmorStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float base_defense = 0.0f,
    float will_regeneration_penalty_percent = 0.0f,
    float movement_speed_reduction_percent = 0.0f,
    float block_damage_reduction_percent = 0.0f,
    float block_stamina_cost = 0.0f) {
  ArmorStaticPropsTableBuilder builder_(_fbb);
  builder_.add_block_stamina_cost(block_stamina_cost);
  builder_.add_block_damage_reduction_percent(block_damage_reduction_percent);
  builder_.add_movement_speed_reduction_percent(movement_speed_reduction_percent);
  builder_.add_will_regeneration_penalty_percent(will_regeneration_penalty_percent);
  builder_.add_base_defense(base_defense);
  return builder_.Finish();
}

::flatbuffers::Offset<ArmorStaticPropsTable> CreateArmorStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ArmorStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ConsumableStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef ConsumableStaticPropsTable TableType;
  RiftForged::Networking::Shared::Items::ConsumableEffectType effect_type = RiftForged::Networking::Shared::Items::ConsumableEffectType_NONE_EFFECT;
  float restore_amount_flat = 0.0f;
  float restore_amount_percent_max = 0.0f;
  RiftForged::Networking::Shared::StatusEffectCategory status_effect_to_apply = RiftForged::Networking::Shared::StatusEffectCategory_None;
  uint32_t effect_duration_ms = 0;
  float usage_cooldown_sec = 0.0f;
};

struct ConsumableStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConsumableStaticPropsTableT NativeTableType;
  typedef ConsumableStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EFFECT_TYPE = 4,
    VT_RESTORE_AMOUNT_FLAT = 6,
    VT_RESTORE_AMOUNT_PERCENT_MAX = 8,
    VT_STATUS_EFFECT_TO_APPLY = 10,
    VT_EFFECT_DURATION_MS = 12,
    VT_USAGE_COOLDOWN_SEC = 14
  };
  RiftForged::Networking::Shared::Items::ConsumableEffectType effect_type() const {
    return static_cast<RiftForged::Networking::Shared::Items::ConsumableEffectType>(GetField<int8_t>(VT_EFFECT_TYPE, 0));
  }
  float restore_amount_flat() const {
    return GetField<float>(VT_RESTORE_AMOUNT_FLAT, 0.0f);
  }
  float restore_amount_percent_max() const {
    return GetField<float>(VT_RESTORE_AMOUNT_PERCENT_MAX, 0.0f);
  }
  RiftForged::Networking::Shared::StatusEffectCategory status_effect_to_apply() const {
    return static_cast<RiftForged::Networking::Shared::StatusEffectCategory>(GetField<uint32_t>(VT_STATUS_EFFECT_TO_APPLY, 0));
  }
  uint32_t effect_duration_ms() const {
    return GetField<uint32_t>(VT_EFFECT_DURATION_MS, 0);
  }
  float usage_cooldown_sec() const {
    return GetField<float>(VT_USAGE_COOLDOWN_SEC, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_EFFECT_TYPE, 1) &&
           VerifyField<float>(verifier, VT_RESTORE_AMOUNT_FLAT, 4) &&
           VerifyField<float>(verifier, VT_RESTORE_AMOUNT_PERCENT_MAX, 4) &&
           VerifyField<uint32_t>(verifier, VT_STATUS_EFFECT_TO_APPLY, 4) &&
           VerifyField<uint32_t>(verifier, VT_EFFECT_DURATION_MS, 4) &&
           VerifyField<float>(verifier, VT_USAGE_COOLDOWN_SEC, 4) &&
           verifier.EndTable();
  }
  ConsumableStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ConsumableStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ConsumableStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ConsumableStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ConsumableStaticPropsTableBuilder {
  typedef ConsumableStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_effect_type(RiftForged::Networking::Shared::Items::ConsumableEffectType effect_type) {
    fbb_.AddElement<int8_t>(ConsumableStaticPropsTable::VT_EFFECT_TYPE, static_cast<int8_t>(effect_type), 0);
  }
  void add_restore_amount_flat(float restore_amount_flat) {
    fbb_.AddElement<float>(ConsumableStaticPropsTable::VT_RESTORE_AMOUNT_FLAT, restore_amount_flat, 0.0f);
  }
  void add_restore_amount_percent_max(float restore_amount_percent_max) {
    fbb_.AddElement<float>(ConsumableStaticPropsTable::VT_RESTORE_AMOUNT_PERCENT_MAX, restore_amount_percent_max, 0.0f);
  }
  void add_status_effect_to_apply(RiftForged::Networking::Shared::StatusEffectCategory status_effect_to_apply) {
    fbb_.AddElement<uint32_t>(ConsumableStaticPropsTable::VT_STATUS_EFFECT_TO_APPLY, static_cast<uint32_t>(status_effect_to_apply), 0);
  }
  void add_effect_duration_ms(uint32_t effect_duration_ms) {
    fbb_.AddElement<uint32_t>(ConsumableStaticPropsTable::VT_EFFECT_DURATION_MS, effect_duration_ms, 0);
  }
  void add_usage_cooldown_sec(float usage_cooldown_sec) {
    fbb_.AddElement<float>(ConsumableStaticPropsTable::VT_USAGE_COOLDOWN_SEC, usage_cooldown_sec, 0.0f);
  }
  explicit ConsumableStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConsumableStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConsumableStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConsumableStaticPropsTable> CreateConsumableStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::Shared::Items::ConsumableEffectType effect_type = RiftForged::Networking::Shared::Items::ConsumableEffectType_NONE_EFFECT,
    float restore_amount_flat = 0.0f,
    float restore_amount_percent_max = 0.0f,
    RiftForged::Networking::Shared::StatusEffectCategory status_effect_to_apply = RiftForged::Networking::Shared::StatusEffectCategory_None,
    uint32_t effect_duration_ms = 0,
    float usage_cooldown_sec = 0.0f) {
  ConsumableStaticPropsTableBuilder builder_(_fbb);
  builder_.add_usage_cooldown_sec(usage_cooldown_sec);
  builder_.add_effect_duration_ms(effect_duration_ms);
  builder_.add_status_effect_to_apply(status_effect_to_apply);
  builder_.add_restore_amount_percent_max(restore_amount_percent_max);
  builder_.add_restore_amount_flat(restore_amount_flat);
  builder_.add_effect_type(effect_type);
  return builder_.Finish();
}

::flatbuffers::Offset<ConsumableStaticPropsTable> CreateConsumableStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ConsumableStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GildKitStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef GildKitStaticPropsTable TableType;
  RiftForged::Networking::Shared::DamageType element_type = RiftForged::Networking::Shared::DamageType_None;
  RiftForged::Networking::Shared::Items::GildTargetType target_type = RiftForged::Networking::Shared::Items::GildTargetType_WEAPON_TARGET;
  uint8_t gild_tier = 0;
};

struct GildKitStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GildKitStaticPropsTableT NativeTableType;
  typedef GildKitStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELEMENT_TYPE = 4,
    VT_TARGET_TYPE = 6,
    VT_GILD_TIER = 8
  };
  RiftForged::Networking::Shared::DamageType element_type() const {
    return static_cast<RiftForged::Networking::Shared::DamageType>(GetField<int8_t>(VT_ELEMENT_TYPE, 0));
  }
  RiftForged::Networking::Shared::Items::GildTargetType target_type() const {
    return static_cast<RiftForged::Networking::Shared::Items::GildTargetType>(GetField<int8_t>(VT_TARGET_TYPE, 0));
  }
  uint8_t gild_tier() const {
    return GetField<uint8_t>(VT_GILD_TIER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ELEMENT_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_TARGET_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_GILD_TIER, 1) &&
           verifier.EndTable();
  }
  GildKitStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GildKitStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GildKitStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GildKitStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GildKitStaticPropsTableBuilder {
  typedef GildKitStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_element_type(RiftForged::Networking::Shared::DamageType element_type) {
    fbb_.AddElement<int8_t>(GildKitStaticPropsTable::VT_ELEMENT_TYPE, static_cast<int8_t>(element_type), 0);
  }
  void add_target_type(RiftForged::Networking::Shared::Items::GildTargetType target_type) {
    fbb_.AddElement<int8_t>(GildKitStaticPropsTable::VT_TARGET_TYPE, static_cast<int8_t>(target_type), 0);
  }
  void add_gild_tier(uint8_t gild_tier) {
    fbb_.AddElement<uint8_t>(GildKitStaticPropsTable::VT_GILD_TIER, gild_tier, 0);
  }
  explicit GildKitStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GildKitStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GildKitStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GildKitStaticPropsTable> CreateGildKitStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::Shared::DamageType element_type = RiftForged::Networking::Shared::DamageType_None,
    RiftForged::Networking::Shared::Items::GildTargetType target_type = RiftForged::Networking::Shared::Items::GildTargetType_WEAPON_TARGET,
    uint8_t gild_tier = 0) {
  GildKitStaticPropsTableBuilder builder_(_fbb);
  builder_.add_gild_tier(gild_tier);
  builder_.add_target_type(target_type);
  builder_.add_element_type(element_type);
  return builder_.Finish();
}

::flatbuffers::Offset<GildKitStaticPropsTable> CreateGildKitStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const GildKitStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct StarMapPointUpgradeStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef StarMapPointUpgradeStaticPropsTable TableType;
  uint32_t points_granted = 0;
};

struct StarMapPointUpgradeStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StarMapPointUpgradeStaticPropsTableT NativeTableType;
  typedef StarMapPointUpgradeStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTS_GRANTED = 4
  };
  uint32_t points_granted() const {
    return GetField<uint32_t>(VT_POINTS_GRANTED, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_POINTS_GRANTED, 4) &&
           verifier.EndTable();
  }
  StarMapPointUpgradeStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(StarMapPointUpgradeStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StarMapPointUpgradeStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct StarMapPointUpgradeStaticPropsTableBuilder {
  typedef StarMapPointUpgradeStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_points_granted(uint32_t points_granted) {
    fbb_.AddElement<uint32_t>(StarMapPointUpgradeStaticPropsTable::VT_POINTS_GRANTED, points_granted, 0);
  }
  explicit StarMapPointUpgradeStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> CreateStarMapPointUpgradeStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t points_granted = 0) {
  StarMapPointUpgradeStaticPropsTableBuilder builder_(_fbb);
  builder_.add_points_granted(points_granted);
  return builder_.Finish();
}

::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> CreateStarMapPointUpgradeStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const StarMapPointUpgradeStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ClassUnlockTokenStaticPropsTableT : public ::flatbuffers::NativeTable {
  typedef ClassUnlockTokenStaticPropsTable TableType;
  std::string unlocks_target_id{};
};

struct ClassUnlockTokenStaticPropsTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClassUnlockTokenStaticPropsTableT NativeTableType;
  typedef ClassUnlockTokenStaticPropsTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNLOCKS_TARGET_ID = 4
  };
  const ::flatbuffers::String *unlocks_target_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNLOCKS_TARGET_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNLOCKS_TARGET_ID) &&
           verifier.VerifyString(unlocks_target_id()) &&
           verifier.EndTable();
  }
  ClassUnlockTokenStaticPropsTableT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ClassUnlockTokenStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ClassUnlockTokenStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ClassUnlockTokenStaticPropsTableBuilder {
  typedef ClassUnlockTokenStaticPropsTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_unlocks_target_id(::flatbuffers::Offset<::flatbuffers::String> unlocks_target_id) {
    fbb_.AddOffset(ClassUnlockTokenStaticPropsTable::VT_UNLOCKS_TARGET_ID, unlocks_target_id);
  }
  explicit ClassUnlockTokenStaticPropsTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> CreateClassUnlockTokenStaticPropsTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> unlocks_target_id = 0) {
  ClassUnlockTokenStaticPropsTableBuilder builder_(_fbb);
  builder_.add_unlocks_target_id(unlocks_target_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> CreateClassUnlockTokenStaticPropsTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *unlocks_target_id = nullptr) {
  auto unlocks_target_id__ = unlocks_target_id ? _fbb.CreateString(unlocks_target_id) : 0;
  return RiftForged::Networking::Shared::Items::CreateClassUnlockTokenStaticPropsTable(
      _fbb,
      unlocks_target_id__);
}

::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> CreateClassUnlockTokenStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ClassUnlockTokenStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemStaticDataDefinitionT : public ::flatbuffers::NativeTable {
  typedef ItemStaticDataDefinition TableType;
  uint32_t definition_id = 0;
  RiftForged::Networking::Shared::Items::ItemType item_type = RiftForged::Networking::Shared::Items::ItemType_NONE;
  std::string dev_name_tag{};
  std::string display_name_sid{};
  std::string description_sid{};
  RiftForged::Networking::Shared::Items::ItemRarity rarity = RiftForged::Networking::Shared::Items::ItemRarity_NORMAL;
  uint32_t max_stack_size = 1;
  bool is_unique = false;
  bool is_quest_item = false;
  bool can_be_sold_to_vendor = true;
  uint32_t vendor_sell_price_shimmer = 0;
  uint32_t vendor_buy_price_shimmer = 0;
  bool is_tradable = true;
  std::string icon_resource_id{};
  std::string model_resource_id{};
  RiftForged::Networking::Shared::Items::EquipmentSlot equip_slot = RiftForged::Networking::Shared::Items::EquipmentSlot_NONE_SLOT;
  uint32_t required_level = 1;
  RiftForged::Networking::Shared::Items::ItemMaterialTier material_tier = RiftForged::Networking::Shared::Items::ItemMaterialTier_NONE_TIER;
  uint32_t base_durability = 0;
  RiftForged::Networking::Shared::Items::ItemPropertiesUnion properties{};
};

struct ItemStaticDataDefinition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemStaticDataDefinitionT NativeTableType;
  typedef ItemStaticDataDefinitionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFINITION_ID = 4,
    VT_ITEM_TYPE = 6,
    VT_DEV_NAME_TAG = 8,
    VT_DISPLAY_NAME_SID = 10,
    VT_DESCRIPTION_SID = 12,
    VT_RARITY = 14,
    VT_MAX_STACK_SIZE = 16,
    VT_IS_UNIQUE = 18,
    VT_IS_QUEST_ITEM = 20,
    VT_CAN_BE_SOLD_TO_VENDOR = 22,
    VT_VENDOR_SELL_PRICE_SHIMMER = 24,
    VT_VENDOR_BUY_PRICE_SHIMMER = 26,
    VT_IS_TRADABLE = 28,
    VT_ICON_RESOURCE_ID = 30,
    VT_MODEL_RESOURCE_ID = 32,
    VT_EQUIP_SLOT = 34,
    VT_REQUIRED_LEVEL = 36,
    VT_MATERIAL_TIER = 38,
    VT_BASE_DURABILITY = 40,
    VT_PROPERTIES_TYPE = 42,
    VT_PROPERTIES = 44
  };
  uint32_t definition_id() const {
    return GetField<uint32_t>(VT_DEFINITION_ID, 0);
  }
  bool KeyCompareLessThan(const ItemStaticDataDefinition * const o) const {
    return definition_id() < o->definition_id();
  }
  int KeyCompareWithValue(uint32_t _definition_id) const {
    return static_cast<int>(definition_id() > _definition_id) - static_cast<int>(definition_id() < _definition_id);
  }
  RiftForged::Networking::Shared::Items::ItemType item_type() const {
    return static_cast<RiftForged::Networking::Shared::Items::ItemType>(GetField<uint16_t>(VT_ITEM_TYPE, 0));
  }
  const ::flatbuffers::String *dev_name_tag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEV_NAME_TAG);
  }
  const ::flatbuffers::String *display_name_sid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISPLAY_NAME_SID);
  }
  const ::flatbuffers::String *description_sid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION_SID);
  }
  RiftForged::Networking::Shared::Items::ItemRarity rarity() const {
    return static_cast<RiftForged::Networking::Shared::Items::ItemRarity>(GetField<int8_t>(VT_RARITY, 0));
  }
  uint32_t max_stack_size() const {
    return GetField<uint32_t>(VT_MAX_STACK_SIZE, 1);
  }
  bool is_unique() const {
    return GetField<uint8_t>(VT_IS_UNIQUE, 0) != 0;
  }
  bool is_quest_item() const {
    return GetField<uint8_t>(VT_IS_QUEST_ITEM, 0) != 0;
  }
  bool can_be_sold_to_vendor() const {
    return GetField<uint8_t>(VT_CAN_BE_SOLD_TO_VENDOR, 1) != 0;
  }
  uint32_t vendor_sell_price_shimmer() const {
    return GetField<uint32_t>(VT_VENDOR_SELL_PRICE_SHIMMER, 0);
  }
  uint32_t vendor_buy_price_shimmer() const {
    return GetField<uint32_t>(VT_VENDOR_BUY_PRICE_SHIMMER, 0);
  }
  bool is_tradable() const {
    return GetField<uint8_t>(VT_IS_TRADABLE, 1) != 0;
  }
  const ::flatbuffers::String *icon_resource_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICON_RESOURCE_ID);
  }
  const ::flatbuffers::String *model_resource_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODEL_RESOURCE_ID);
  }
  RiftForged::Networking::Shared::Items::EquipmentSlot equip_slot() const {
    return static_cast<RiftForged::Networking::Shared::Items::EquipmentSlot>(GetField<int8_t>(VT_EQUIP_SLOT, 0));
  }
  uint32_t required_level() const {
    return GetField<uint32_t>(VT_REQUIRED_LEVEL, 1);
  }
  RiftForged::Networking::Shared::Items::ItemMaterialTier material_tier() const {
    return static_cast<RiftForged::Networking::Shared::Items::ItemMaterialTier>(GetField<int8_t>(VT_MATERIAL_TIER, 0));
  }
  uint32_t base_durability() const {
    return GetField<uint32_t>(VT_BASE_DURABILITY, 0);
  }
  RiftForged::Networking::Shared::Items::ItemProperties properties_type() const {
    return static_cast<RiftForged::Networking::Shared::Items::ItemProperties>(GetField<uint8_t>(VT_PROPERTIES_TYPE, 0));
  }
  const void *properties() const {
    return GetPointer<const void *>(VT_PROPERTIES);
  }
  template<typename T> const T *properties_as() const;
  const RiftForged::Networking::Shared::Items::WeaponStaticPropsTable *properties_as_WeaponStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_WeaponStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::WeaponStaticPropsTable *>(properties()) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ArmorStaticPropsTable *properties_as_ArmorStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_ArmorStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::ArmorStaticPropsTable *>(properties()) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable *properties_as_ConsumableStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_ConsumableStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable *>(properties()) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::GildKitStaticPropsTable *properties_as_GildKitStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_GildKitStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::GildKitStaticPropsTable *>(properties()) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable *properties_as_StarMapPointUpgradeStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_StarMapPointUpgradeStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable *>(properties()) : nullptr;
  }
  const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable *properties_as_ClassUnlockTokenStaticPropsTable() const {
    return properties_type() == RiftForged::Networking::Shared::Items::ItemProperties_ClassUnlockTokenStaticPropsTable ? static_cast<const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable *>(properties()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEFINITION_ID, 4) &&
           VerifyField<uint16_t>(verifier, VT_ITEM_TYPE, 2) &&
           VerifyOffset(verifier, VT_DEV_NAME_TAG) &&
           verifier.VerifyString(dev_name_tag()) &&
           VerifyOffset(verifier, VT_DISPLAY_NAME_SID) &&
           verifier.VerifyString(display_name_sid()) &&
           VerifyOffset(verifier, VT_DESCRIPTION_SID) &&
           verifier.VerifyString(description_sid()) &&
           VerifyField<int8_t>(verifier, VT_RARITY, 1) &&
           VerifyField<uint32_t>(verifier, VT_MAX_STACK_SIZE, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_UNIQUE, 1) &&
           VerifyField<uint8_t>(verifier, VT_IS_QUEST_ITEM, 1) &&
           VerifyField<uint8_t>(verifier, VT_CAN_BE_SOLD_TO_VENDOR, 1) &&
           VerifyField<uint32_t>(verifier, VT_VENDOR_SELL_PRICE_SHIMMER, 4) &&
           VerifyField<uint32_t>(verifier, VT_VENDOR_BUY_PRICE_SHIMMER, 4) &&
           VerifyField<uint8_t>(verifier, VT_IS_TRADABLE, 1) &&
           VerifyOffset(verifier, VT_ICON_RESOURCE_ID) &&
           verifier.VerifyString(icon_resource_id()) &&
           VerifyOffset(verifier, VT_MODEL_RESOURCE_ID) &&
           verifier.VerifyString(model_resource_id()) &&
           VerifyField<int8_t>(verifier, VT_EQUIP_SLOT, 1) &&
           VerifyField<uint32_t>(verifier, VT_REQUIRED_LEVEL, 4) &&
           VerifyField<int8_t>(verifier, VT_MATERIAL_TIER, 1) &&
           VerifyField<uint32_t>(verifier, VT_BASE_DURABILITY, 4) &&
           VerifyField<uint8_t>(verifier, VT_PROPERTIES_TYPE, 1) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           VerifyItemProperties(verifier, properties(), properties_type()) &&
           verifier.EndTable();
  }
  ItemStaticDataDefinitionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemStaticDataDefinitionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemStaticDataDefinition> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemStaticDataDefinitionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const RiftForged::Networking::Shared::Items::WeaponStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::WeaponStaticPropsTable>() const {
  return properties_as_WeaponStaticPropsTable();
}

template<> inline const RiftForged::Networking::Shared::Items::ArmorStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::ArmorStaticPropsTable>() const {
  return properties_as_ArmorStaticPropsTable();
}

template<> inline const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable>() const {
  return properties_as_ConsumableStaticPropsTable();
}

template<> inline const RiftForged::Networking::Shared::Items::GildKitStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::GildKitStaticPropsTable>() const {
  return properties_as_GildKitStaticPropsTable();
}

template<> inline const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable>() const {
  return properties_as_StarMapPointUpgradeStaticPropsTable();
}

template<> inline const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable *ItemStaticDataDefinition::properties_as<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable>() const {
  return properties_as_ClassUnlockTokenStaticPropsTable();
}

struct ItemStaticDataDefinitionBuilder {
  typedef ItemStaticDataDefinition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_definition_id(uint32_t definition_id) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_DEFINITION_ID, definition_id, 0);
  }
  void add_item_type(RiftForged::Networking::Shared::Items::ItemType item_type) {
    fbb_.AddElement<uint16_t>(ItemStaticDataDefinition::VT_ITEM_TYPE, static_cast<uint16_t>(item_type), 0);
  }
  void add_dev_name_tag(::flatbuffers::Offset<::flatbuffers::String> dev_name_tag) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_DEV_NAME_TAG, dev_name_tag);
  }
  void add_display_name_sid(::flatbuffers::Offset<::flatbuffers::String> display_name_sid) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_DISPLAY_NAME_SID, display_name_sid);
  }
  void add_description_sid(::flatbuffers::Offset<::flatbuffers::String> description_sid) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_DESCRIPTION_SID, description_sid);
  }
  void add_rarity(RiftForged::Networking::Shared::Items::ItemRarity rarity) {
    fbb_.AddElement<int8_t>(ItemStaticDataDefinition::VT_RARITY, static_cast<int8_t>(rarity), 0);
  }
  void add_max_stack_size(uint32_t max_stack_size) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_MAX_STACK_SIZE, max_stack_size, 1);
  }
  void add_is_unique(bool is_unique) {
    fbb_.AddElement<uint8_t>(ItemStaticDataDefinition::VT_IS_UNIQUE, static_cast<uint8_t>(is_unique), 0);
  }
  void add_is_quest_item(bool is_quest_item) {
    fbb_.AddElement<uint8_t>(ItemStaticDataDefinition::VT_IS_QUEST_ITEM, static_cast<uint8_t>(is_quest_item), 0);
  }
  void add_can_be_sold_to_vendor(bool can_be_sold_to_vendor) {
    fbb_.AddElement<uint8_t>(ItemStaticDataDefinition::VT_CAN_BE_SOLD_TO_VENDOR, static_cast<uint8_t>(can_be_sold_to_vendor), 1);
  }
  void add_vendor_sell_price_shimmer(uint32_t vendor_sell_price_shimmer) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_VENDOR_SELL_PRICE_SHIMMER, vendor_sell_price_shimmer, 0);
  }
  void add_vendor_buy_price_shimmer(uint32_t vendor_buy_price_shimmer) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_VENDOR_BUY_PRICE_SHIMMER, vendor_buy_price_shimmer, 0);
  }
  void add_is_tradable(bool is_tradable) {
    fbb_.AddElement<uint8_t>(ItemStaticDataDefinition::VT_IS_TRADABLE, static_cast<uint8_t>(is_tradable), 1);
  }
  void add_icon_resource_id(::flatbuffers::Offset<::flatbuffers::String> icon_resource_id) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_ICON_RESOURCE_ID, icon_resource_id);
  }
  void add_model_resource_id(::flatbuffers::Offset<::flatbuffers::String> model_resource_id) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_MODEL_RESOURCE_ID, model_resource_id);
  }
  void add_equip_slot(RiftForged::Networking::Shared::Items::EquipmentSlot equip_slot) {
    fbb_.AddElement<int8_t>(ItemStaticDataDefinition::VT_EQUIP_SLOT, static_cast<int8_t>(equip_slot), 0);
  }
  void add_required_level(uint32_t required_level) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_REQUIRED_LEVEL, required_level, 1);
  }
  void add_material_tier(RiftForged::Networking::Shared::Items::ItemMaterialTier material_tier) {
    fbb_.AddElement<int8_t>(ItemStaticDataDefinition::VT_MATERIAL_TIER, static_cast<int8_t>(material_tier), 0);
  }
  void add_base_durability(uint32_t base_durability) {
    fbb_.AddElement<uint32_t>(ItemStaticDataDefinition::VT_BASE_DURABILITY, base_durability, 0);
  }
  void add_properties_type(RiftForged::Networking::Shared::Items::ItemProperties properties_type) {
    fbb_.AddElement<uint8_t>(ItemStaticDataDefinition::VT_PROPERTIES_TYPE, static_cast<uint8_t>(properties_type), 0);
  }
  void add_properties(::flatbuffers::Offset<void> properties) {
    fbb_.AddOffset(ItemStaticDataDefinition::VT_PROPERTIES, properties);
  }
  explicit ItemStaticDataDefinitionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemStaticDataDefinition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemStaticDataDefinition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemStaticDataDefinition> CreateItemStaticDataDefinition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t definition_id = 0,
    RiftForged::Networking::Shared::Items::ItemType item_type = RiftForged::Networking::Shared::Items::ItemType_NONE,
    ::flatbuffers::Offset<::flatbuffers::String> dev_name_tag = 0,
    ::flatbuffers::Offset<::flatbuffers::String> display_name_sid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description_sid = 0,
    RiftForged::Networking::Shared::Items::ItemRarity rarity = RiftForged::Networking::Shared::Items::ItemRarity_NORMAL,
    uint32_t max_stack_size = 1,
    bool is_unique = false,
    bool is_quest_item = false,
    bool can_be_sold_to_vendor = true,
    uint32_t vendor_sell_price_shimmer = 0,
    uint32_t vendor_buy_price_shimmer = 0,
    bool is_tradable = true,
    ::flatbuffers::Offset<::flatbuffers::String> icon_resource_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> model_resource_id = 0,
    RiftForged::Networking::Shared::Items::EquipmentSlot equip_slot = RiftForged::Networking::Shared::Items::EquipmentSlot_NONE_SLOT,
    uint32_t required_level = 1,
    RiftForged::Networking::Shared::Items::ItemMaterialTier material_tier = RiftForged::Networking::Shared::Items::ItemMaterialTier_NONE_TIER,
    uint32_t base_durability = 0,
    RiftForged::Networking::Shared::Items::ItemProperties properties_type = RiftForged::Networking::Shared::Items::ItemProperties_NONE,
    ::flatbuffers::Offset<void> properties = 0) {
  ItemStaticDataDefinitionBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_base_durability(base_durability);
  builder_.add_required_level(required_level);
  builder_.add_model_resource_id(model_resource_id);
  builder_.add_icon_resource_id(icon_resource_id);
  builder_.add_vendor_buy_price_shimmer(vendor_buy_price_shimmer);
  builder_.add_vendor_sell_price_shimmer(vendor_sell_price_shimmer);
  builder_.add_max_stack_size(max_stack_size);
  builder_.add_description_sid(description_sid);
  builder_.add_display_name_sid(display_name_sid);
  builder_.add_dev_name_tag(dev_name_tag);
  builder_.add_definition_id(definition_id);
  builder_.add_item_type(item_type);
  builder_.add_properties_type(properties_type);
  builder_.add_material_tier(material_tier);
  builder_.add_equip_slot(equip_slot);
  builder_.add_is_tradable(is_tradable);
  builder_.add_can_be_sold_to_vendor(can_be_sold_to_vendor);
  builder_.add_is_quest_item(is_quest_item);
  builder_.add_is_unique(is_unique);
  builder_.add_rarity(rarity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemStaticDataDefinition> CreateItemStaticDataDefinitionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t definition_id = 0,
    RiftForged::Networking::Shared::Items::ItemType item_type = RiftForged::Networking::Shared::Items::ItemType_NONE,
    const char *dev_name_tag = nullptr,
    const char *display_name_sid = nullptr,
    const char *description_sid = nullptr,
    RiftForged::Networking::Shared::Items::ItemRarity rarity = RiftForged::Networking::Shared::Items::ItemRarity_NORMAL,
    uint32_t max_stack_size = 1,
    bool is_unique = false,
    bool is_quest_item = false,
    bool can_be_sold_to_vendor = true,
    uint32_t vendor_sell_price_shimmer = 0,
    uint32_t vendor_buy_price_shimmer = 0,
    bool is_tradable = true,
    const char *icon_resource_id = nullptr,
    const char *model_resource_id = nullptr,
    RiftForged::Networking::Shared::Items::EquipmentSlot equip_slot = RiftForged::Networking::Shared::Items::EquipmentSlot_NONE_SLOT,
    uint32_t required_level = 1,
    RiftForged::Networking::Shared::Items::ItemMaterialTier material_tier = RiftForged::Networking::Shared::Items::ItemMaterialTier_NONE_TIER,
    uint32_t base_durability = 0,
    RiftForged::Networking::Shared::Items::ItemProperties properties_type = RiftForged::Networking::Shared::Items::ItemProperties_NONE,
    ::flatbuffers::Offset<void> properties = 0) {
  auto dev_name_tag__ = dev_name_tag ? _fbb.CreateString(dev_name_tag) : 0;
  auto display_name_sid__ = display_name_sid ? _fbb.CreateString(display_name_sid) : 0;
  auto description_sid__ = description_sid ? _fbb.CreateString(description_sid) : 0;
  auto icon_resource_id__ = icon_resource_id ? _fbb.CreateString(icon_resource_id) : 0;
  auto model_resource_id__ = model_resource_id ? _fbb.CreateString(model_resource_id) : 0;
  return RiftForged::Networking::Shared::Items::CreateItemStaticDataDefinition(
      _fbb,
      definition_id,
      item_type,
      dev_name_tag__,
      display_name_sid__,
      description_sid__,
      rarity,
      max_stack_size,
      is_unique,
      is_quest_item,
      can_be_sold_to_vendor,
      vendor_sell_price_shimmer,
      vendor_buy_price_shimmer,
      is_tradable,
      icon_resource_id__,
      model_resource_id__,
      equip_slot,
      required_level,
      material_tier,
      base_durability,
      properties_type,
      properties);
}

::flatbuffers::Offset<ItemStaticDataDefinition> CreateItemStaticDataDefinition(::flatbuffers::FlatBufferBuilder &_fbb, const ItemStaticDataDefinitionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemDefinitionCollectionT : public ::flatbuffers::NativeTable {
  typedef ItemDefinitionCollection TableType;
  std::vector<std::unique_ptr<RiftForged::Networking::Shared::Items::ItemStaticDataDefinitionT>> definitions{};
  ItemDefinitionCollectionT() = default;
  ItemDefinitionCollectionT(const ItemDefinitionCollectionT &o);
  ItemDefinitionCollectionT(ItemDefinitionCollectionT&&) FLATBUFFERS_NOEXCEPT = default;
  ItemDefinitionCollectionT &operator=(ItemDefinitionCollectionT o) FLATBUFFERS_NOEXCEPT;
};

struct ItemDefinitionCollection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemDefinitionCollectionT NativeTableType;
  typedef ItemDefinitionCollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFINITIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>> *definitions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>> *>(VT_DEFINITIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEFINITIONS) &&
           verifier.VerifyVector(definitions()) &&
           verifier.VerifyVectorOfTables(definitions()) &&
           verifier.EndTable();
  }
  ItemDefinitionCollectionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemDefinitionCollectionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemDefinitionCollection> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDefinitionCollectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemDefinitionCollectionBuilder {
  typedef ItemDefinitionCollection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_definitions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>>> definitions) {
    fbb_.AddOffset(ItemDefinitionCollection::VT_DEFINITIONS, definitions);
  }
  explicit ItemDefinitionCollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemDefinitionCollection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemDefinitionCollection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemDefinitionCollection> CreateItemDefinitionCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>>> definitions = 0) {
  ItemDefinitionCollectionBuilder builder_(_fbb);
  builder_.add_definitions(definitions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemDefinitionCollection> CreateItemDefinitionCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>> *definitions = nullptr) {
  auto definitions__ = definitions ? _fbb.CreateVectorOfSortedTables<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>(definitions) : 0;
  return RiftForged::Networking::Shared::Items::CreateItemDefinitionCollection(
      _fbb,
      definitions__);
}

::flatbuffers::Offset<ItemDefinitionCollection> CreateItemDefinitionCollection(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDefinitionCollectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline WeaponStaticPropsTableT *WeaponStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<WeaponStaticPropsTableT>(new WeaponStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void WeaponStaticPropsTable::UnPackTo(WeaponStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = base_physical_damage_min(); _o->base_physical_damage_min = _e; }
  { auto _e = base_physical_damage_max(); _o->base_physical_damage_max = _e; }
  { auto _e = attack_speed(); _o->attack_speed = _e; }
  { auto _e = range_meters(); _o->range_meters = _e; }
  { auto _e = critical_hit_chance_base_percent(); _o->critical_hit_chance_base_percent = _e; }
  { auto _e = critical_hit_damage_base_multiplier(); _o->critical_hit_damage_base_multiplier = _e; }
  { auto _e = is_gildable(); _o->is_gildable = _e; }
}

inline ::flatbuffers::Offset<WeaponStaticPropsTable> WeaponStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const WeaponStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWeaponStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<WeaponStaticPropsTable> CreateWeaponStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const WeaponStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const WeaponStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _base_physical_damage_min = _o->base_physical_damage_min;
  auto _base_physical_damage_max = _o->base_physical_damage_max;
  auto _attack_speed = _o->attack_speed;
  auto _range_meters = _o->range_meters;
  auto _critical_hit_chance_base_percent = _o->critical_hit_chance_base_percent;
  auto _critical_hit_damage_base_multiplier = _o->critical_hit_damage_base_multiplier;
  auto _is_gildable = _o->is_gildable;
  return RiftForged::Networking::Shared::Items::CreateWeaponStaticPropsTable(
      _fbb,
      _base_physical_damage_min,
      _base_physical_damage_max,
      _attack_speed,
      _range_meters,
      _critical_hit_chance_base_percent,
      _critical_hit_damage_base_multiplier,
      _is_gildable);
}

inline ArmorStaticPropsTableT *ArmorStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ArmorStaticPropsTableT>(new ArmorStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ArmorStaticPropsTable::UnPackTo(ArmorStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = base_defense(); _o->base_defense = _e; }
  { auto _e = will_regeneration_penalty_percent(); _o->will_regeneration_penalty_percent = _e; }
  { auto _e = movement_speed_reduction_percent(); _o->movement_speed_reduction_percent = _e; }
  { auto _e = block_damage_reduction_percent(); _o->block_damage_reduction_percent = _e; }
  { auto _e = block_stamina_cost(); _o->block_stamina_cost = _e; }
}

inline ::flatbuffers::Offset<ArmorStaticPropsTable> ArmorStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ArmorStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateArmorStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ArmorStaticPropsTable> CreateArmorStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ArmorStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ArmorStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _base_defense = _o->base_defense;
  auto _will_regeneration_penalty_percent = _o->will_regeneration_penalty_percent;
  auto _movement_speed_reduction_percent = _o->movement_speed_reduction_percent;
  auto _block_damage_reduction_percent = _o->block_damage_reduction_percent;
  auto _block_stamina_cost = _o->block_stamina_cost;
  return RiftForged::Networking::Shared::Items::CreateArmorStaticPropsTable(
      _fbb,
      _base_defense,
      _will_regeneration_penalty_percent,
      _movement_speed_reduction_percent,
      _block_damage_reduction_percent,
      _block_stamina_cost);
}

inline ConsumableStaticPropsTableT *ConsumableStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ConsumableStaticPropsTableT>(new ConsumableStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ConsumableStaticPropsTable::UnPackTo(ConsumableStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = effect_type(); _o->effect_type = _e; }
  { auto _e = restore_amount_flat(); _o->restore_amount_flat = _e; }
  { auto _e = restore_amount_percent_max(); _o->restore_amount_percent_max = _e; }
  { auto _e = status_effect_to_apply(); _o->status_effect_to_apply = _e; }
  { auto _e = effect_duration_ms(); _o->effect_duration_ms = _e; }
  { auto _e = usage_cooldown_sec(); _o->usage_cooldown_sec = _e; }
}

inline ::flatbuffers::Offset<ConsumableStaticPropsTable> ConsumableStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ConsumableStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateConsumableStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ConsumableStaticPropsTable> CreateConsumableStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ConsumableStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ConsumableStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _effect_type = _o->effect_type;
  auto _restore_amount_flat = _o->restore_amount_flat;
  auto _restore_amount_percent_max = _o->restore_amount_percent_max;
  auto _status_effect_to_apply = _o->status_effect_to_apply;
  auto _effect_duration_ms = _o->effect_duration_ms;
  auto _usage_cooldown_sec = _o->usage_cooldown_sec;
  return RiftForged::Networking::Shared::Items::CreateConsumableStaticPropsTable(
      _fbb,
      _effect_type,
      _restore_amount_flat,
      _restore_amount_percent_max,
      _status_effect_to_apply,
      _effect_duration_ms,
      _usage_cooldown_sec);
}

inline GildKitStaticPropsTableT *GildKitStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GildKitStaticPropsTableT>(new GildKitStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GildKitStaticPropsTable::UnPackTo(GildKitStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = element_type(); _o->element_type = _e; }
  { auto _e = target_type(); _o->target_type = _e; }
  { auto _e = gild_tier(); _o->gild_tier = _e; }
}

inline ::flatbuffers::Offset<GildKitStaticPropsTable> GildKitStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GildKitStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGildKitStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GildKitStaticPropsTable> CreateGildKitStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const GildKitStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GildKitStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _element_type = _o->element_type;
  auto _target_type = _o->target_type;
  auto _gild_tier = _o->gild_tier;
  return RiftForged::Networking::Shared::Items::CreateGildKitStaticPropsTable(
      _fbb,
      _element_type,
      _target_type,
      _gild_tier);
}

inline StarMapPointUpgradeStaticPropsTableT *StarMapPointUpgradeStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<StarMapPointUpgradeStaticPropsTableT>(new StarMapPointUpgradeStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void StarMapPointUpgradeStaticPropsTable::UnPackTo(StarMapPointUpgradeStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = points_granted(); _o->points_granted = _e; }
}

inline ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> StarMapPointUpgradeStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const StarMapPointUpgradeStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateStarMapPointUpgradeStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<StarMapPointUpgradeStaticPropsTable> CreateStarMapPointUpgradeStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const StarMapPointUpgradeStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const StarMapPointUpgradeStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _points_granted = _o->points_granted;
  return RiftForged::Networking::Shared::Items::CreateStarMapPointUpgradeStaticPropsTable(
      _fbb,
      _points_granted);
}

inline ClassUnlockTokenStaticPropsTableT *ClassUnlockTokenStaticPropsTable::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ClassUnlockTokenStaticPropsTableT>(new ClassUnlockTokenStaticPropsTableT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ClassUnlockTokenStaticPropsTable::UnPackTo(ClassUnlockTokenStaticPropsTableT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = unlocks_target_id(); if (_e) _o->unlocks_target_id = _e->str(); }
}

inline ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> ClassUnlockTokenStaticPropsTable::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ClassUnlockTokenStaticPropsTableT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateClassUnlockTokenStaticPropsTable(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ClassUnlockTokenStaticPropsTable> CreateClassUnlockTokenStaticPropsTable(::flatbuffers::FlatBufferBuilder &_fbb, const ClassUnlockTokenStaticPropsTableT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ClassUnlockTokenStaticPropsTableT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _unlocks_target_id = _o->unlocks_target_id.empty() ? 0 : _fbb.CreateString(_o->unlocks_target_id);
  return RiftForged::Networking::Shared::Items::CreateClassUnlockTokenStaticPropsTable(
      _fbb,
      _unlocks_target_id);
}

inline ItemStaticDataDefinitionT *ItemStaticDataDefinition::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemStaticDataDefinitionT>(new ItemStaticDataDefinitionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemStaticDataDefinition::UnPackTo(ItemStaticDataDefinitionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = definition_id(); _o->definition_id = _e; }
  { auto _e = item_type(); _o->item_type = _e; }
  { auto _e = dev_name_tag(); if (_e) _o->dev_name_tag = _e->str(); }
  { auto _e = display_name_sid(); if (_e) _o->display_name_sid = _e->str(); }
  { auto _e = description_sid(); if (_e) _o->description_sid = _e->str(); }
  { auto _e = rarity(); _o->rarity = _e; }
  { auto _e = max_stack_size(); _o->max_stack_size = _e; }
  { auto _e = is_unique(); _o->is_unique = _e; }
  { auto _e = is_quest_item(); _o->is_quest_item = _e; }
  { auto _e = can_be_sold_to_vendor(); _o->can_be_sold_to_vendor = _e; }
  { auto _e = vendor_sell_price_shimmer(); _o->vendor_sell_price_shimmer = _e; }
  { auto _e = vendor_buy_price_shimmer(); _o->vendor_buy_price_shimmer = _e; }
  { auto _e = is_tradable(); _o->is_tradable = _e; }
  { auto _e = icon_resource_id(); if (_e) _o->icon_resource_id = _e->str(); }
  { auto _e = model_resource_id(); if (_e) _o->model_resource_id = _e->str(); }
  { auto _e = equip_slot(); _o->equip_slot = _e; }
  { auto _e = required_level(); _o->required_level = _e; }
  { auto _e = material_tier(); _o->material_tier = _e; }
  { auto _e = base_durability(); _o->base_durability = _e; }
  { auto _e = properties_type(); _o->properties.type = _e; }
  { auto _e = properties(); if (_e) _o->properties.value = RiftForged::Networking::Shared::Items::ItemPropertiesUnion::UnPack(_e, properties_type(), _resolver); }
}

inline ::flatbuffers::Offset<ItemStaticDataDefinition> ItemStaticDataDefinition::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemStaticDataDefinitionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemStaticDataDefinition(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemStaticDataDefinition> CreateItemStaticDataDefinition(::flatbuffers::FlatBufferBuilder &_fbb, const ItemStaticDataDefinitionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemStaticDataDefinitionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _definition_id = _o->definition_id;
  auto _item_type = _o->item_type;
  auto _dev_name_tag = _o->dev_name_tag.empty() ? 0 : _fbb.CreateString(_o->dev_name_tag);
  auto _display_name_sid = _o->display_name_sid.empty() ? 0 : _fbb.CreateString(_o->display_name_sid);
  auto _description_sid = _o->description_sid.empty() ? 0 : _fbb.CreateString(_o->description_sid);
  auto _rarity = _o->rarity;
  auto _max_stack_size = _o->max_stack_size;
  auto _is_unique = _o->is_unique;
  auto _is_quest_item = _o->is_quest_item;
  auto _can_be_sold_to_vendor = _o->can_be_sold_to_vendor;
  auto _vendor_sell_price_shimmer = _o->vendor_sell_price_shimmer;
  auto _vendor_buy_price_shimmer = _o->vendor_buy_price_shimmer;
  auto _is_tradable = _o->is_tradable;
  auto _icon_resource_id = _o->icon_resource_id.empty() ? 0 : _fbb.CreateString(_o->icon_resource_id);
  auto _model_resource_id = _o->model_resource_id.empty() ? 0 : _fbb.CreateString(_o->model_resource_id);
  auto _equip_slot = _o->equip_slot;
  auto _required_level = _o->required_level;
  auto _material_tier = _o->material_tier;
  auto _base_durability = _o->base_durability;
  auto _properties_type = _o->properties.type;
  auto _properties = _o->properties.Pack(_fbb);
  return RiftForged::Networking::Shared::Items::CreateItemStaticDataDefinition(
      _fbb,
      _definition_id,
      _item_type,
      _dev_name_tag,
      _display_name_sid,
      _description_sid,
      _rarity,
      _max_stack_size,
      _is_unique,
      _is_quest_item,
      _can_be_sold_to_vendor,
      _vendor_sell_price_shimmer,
      _vendor_buy_price_shimmer,
      _is_tradable,
      _icon_resource_id,
      _model_resource_id,
      _equip_slot,
      _required_level,
      _material_tier,
      _base_durability,
      _properties_type,
      _properties);
}

inline ItemDefinitionCollectionT::ItemDefinitionCollectionT(const ItemDefinitionCollectionT &o) {
  definitions.reserve(o.definitions.size());
  for (const auto &definitions_ : o.definitions) { definitions.emplace_back((definitions_) ? new RiftForged::Networking::Shared::Items::ItemStaticDataDefinitionT(*definitions_) : nullptr); }
}

inline ItemDefinitionCollectionT &ItemDefinitionCollectionT::operator=(ItemDefinitionCollectionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(definitions, o.definitions);
  return *this;
}

inline ItemDefinitionCollectionT *ItemDefinitionCollection::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemDefinitionCollectionT>(new ItemDefinitionCollectionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemDefinitionCollection::UnPackTo(ItemDefinitionCollectionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = definitions(); if (_e) { _o->definitions.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->definitions[_i]) { _e->Get(_i)->UnPackTo(_o->definitions[_i].get(), _resolver); } else { _o->definitions[_i] = std::unique_ptr<RiftForged::Networking::Shared::Items::ItemStaticDataDefinitionT>(_e->Get(_i)->UnPack(_resolver)); } } } else { _o->definitions.resize(0); } }
}

inline ::flatbuffers::Offset<ItemDefinitionCollection> ItemDefinitionCollection::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDefinitionCollectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemDefinitionCollection(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemDefinitionCollection> CreateItemDefinitionCollection(::flatbuffers::FlatBufferBuilder &_fbb, const ItemDefinitionCollectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemDefinitionCollectionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _definitions = _o->definitions.size() ? _fbb.CreateVector<::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemStaticDataDefinition>> (_o->definitions.size(), [](size_t i, _VectorArgs *__va) { return CreateItemStaticDataDefinition(*__va->__fbb, __va->__o->definitions[i].get(), __va->__rehasher); }, &_va ) : 0;
  return RiftForged::Networking::Shared::Items::CreateItemDefinitionCollection(
      _fbb,
      _definitions);
}

inline bool VerifyItemProperties(::flatbuffers::Verifier &verifier, const void *obj, ItemProperties type) {
  switch (type) {
    case ItemProperties_NONE: {
      return true;
    }
    case ItemProperties_WeaponStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::WeaponStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ItemProperties_ArmorStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ArmorStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ItemProperties_ConsumableStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ItemProperties_GildKitStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::GildKitStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ItemProperties_StarMapPointUpgradeStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ItemProperties_ClassUnlockTokenStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyItemPropertiesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyItemProperties(
        verifier,  values->Get(i), types->GetEnum<ItemProperties>(i))) {
      return false;
    }
  }
  return true;
}

inline void *ItemPropertiesUnion::UnPack(const void *obj, ItemProperties type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case ItemProperties_WeaponStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::WeaponStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    case ItemProperties_ArmorStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ArmorStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    case ItemProperties_ConsumableStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    case ItemProperties_GildKitStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::GildKitStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    case ItemProperties_StarMapPointUpgradeStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    case ItemProperties_ClassUnlockTokenStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTable *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> ItemPropertiesUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case ItemProperties_WeaponStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *>(value);
      return CreateWeaponStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    case ItemProperties_ArmorStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *>(value);
      return CreateArmorStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    case ItemProperties_ConsumableStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *>(value);
      return CreateConsumableStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    case ItemProperties_GildKitStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *>(value);
      return CreateGildKitStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    case ItemProperties_StarMapPointUpgradeStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *>(value);
      return CreateStarMapPointUpgradeStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    case ItemProperties_ClassUnlockTokenStaticPropsTable: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *>(value);
      return CreateClassUnlockTokenStaticPropsTable(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline ItemPropertiesUnion::ItemPropertiesUnion(const ItemPropertiesUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case ItemProperties_WeaponStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *>(u.value));
      break;
    }
    case ItemProperties_ArmorStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *>(u.value));
      break;
    }
    case ItemProperties_ConsumableStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *>(u.value));
      break;
    }
    case ItemProperties_GildKitStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *>(u.value));
      break;
    }
    case ItemProperties_StarMapPointUpgradeStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *>(u.value));
      break;
    }
    case ItemProperties_ClassUnlockTokenStaticPropsTable: {
      value = new RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT(*reinterpret_cast<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void ItemPropertiesUnion::Reset() {
  switch (type) {
    case ItemProperties_WeaponStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::WeaponStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    case ItemProperties_ArmorStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::ArmorStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    case ItemProperties_ConsumableStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::ConsumableStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    case ItemProperties_GildKitStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::GildKitStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    case ItemProperties_StarMapPointUpgradeStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::StarMapPointUpgradeStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    case ItemProperties_ClassUnlockTokenStaticPropsTable: {
      auto ptr = reinterpret_cast<RiftForged::Networking::Shared::Items::ClassUnlockTokenStaticPropsTableT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = ItemProperties_NONE;
}

inline const RiftForged::Networking::Shared::Items::ItemDefinitionCollection *GetItemDefinitionCollection(const void *buf) {
  return ::flatbuffers::GetRoot<RiftForged::Networking::Shared::Items::ItemDefinitionCollection>(buf);
}

inline const RiftForged::Networking::Shared::Items::ItemDefinitionCollection *GetSizePrefixedItemDefinitionCollection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RiftForged::Networking::Shared::Items::ItemDefinitionCollection>(buf);
}

inline bool VerifyItemDefinitionCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RiftForged::Networking::Shared::Items::ItemDefinitionCollection>(nullptr);
}

inline bool VerifySizePrefixedItemDefinitionCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RiftForged::Networking::Shared::Items::ItemDefinitionCollection>(nullptr);
}

inline void FinishItemDefinitionCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemDefinitionCollection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedItemDefinitionCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::Shared::Items::ItemDefinitionCollection> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<RiftForged::Networking::Shared::Items::ItemDefinitionCollectionT> UnPackItemDefinitionCollection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::Shared::Items::ItemDefinitionCollectionT>(GetItemDefinitionCollection(buf)->UnPack(res));
}

inline std::unique_ptr<RiftForged::Networking::Shared::Items::ItemDefinitionCollectionT> UnPackSizePrefixedItemDefinitionCollection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::Shared::Items::ItemDefinitionCollectionT>(GetSizePrefixedItemDefinitionCollection(buf)->UnPack(res));
}

}  // namespace Items
}  // namespace Shared
}  // namespace Networking
}  // namespace RiftForged

#endif  // FLATBUFFERS_GENERATED_RIFTFORGEDITEMDEFINITIONS_RIFTFORGED_NETWORKING_SHARED_ITEMS_H_
