// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THISISAC2STEST_RIFTFORGED_NETWORKING_UDP_C2S_H_
#define FLATBUFFERS_GENERATED_THISISAC2STEST_RIFTFORGED_NETWORKING_UDP_C2S_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "riftforged_common_types_generated.h"

namespace RiftForged {
namespace Networking {
namespace UDP {
namespace C2S {

struct C2S_SimpleAction;
struct C2S_SimpleActionBuilder;
struct C2S_SimpleActionT;

struct Root_C2S_UDP_Message;
struct Root_C2S_UDP_MessageBuilder;
struct Root_C2S_UDP_MessageT;

enum C2S_UDP_Payload : uint8_t {
  C2S_UDP_Payload_NONE = 0,
  C2S_UDP_Payload_SimpleAction = 1,
  C2S_UDP_Payload_MIN = C2S_UDP_Payload_NONE,
  C2S_UDP_Payload_MAX = C2S_UDP_Payload_SimpleAction
};

inline const C2S_UDP_Payload (&EnumValuesC2S_UDP_Payload())[2] {
  static const C2S_UDP_Payload values[] = {
    C2S_UDP_Payload_NONE,
    C2S_UDP_Payload_SimpleAction
  };
  return values;
}

inline const char * const *EnumNamesC2S_UDP_Payload() {
  static const char * const names[3] = {
    "NONE",
    "SimpleAction",
    nullptr
  };
  return names;
}

inline const char *EnumNameC2S_UDP_Payload(C2S_UDP_Payload e) {
  if (::flatbuffers::IsOutRange(e, C2S_UDP_Payload_NONE, C2S_UDP_Payload_SimpleAction)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesC2S_UDP_Payload()[index];
}

template<typename T> struct C2S_UDP_PayloadTraits {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_NONE;
};

template<> struct C2S_UDP_PayloadTraits<RiftForged::Networking::UDP::C2S::C2S_SimpleAction> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_SimpleAction;
};

template<typename T> struct C2S_UDP_PayloadUnionTraits {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_NONE;
};

template<> struct C2S_UDP_PayloadUnionTraits<RiftForged::Networking::UDP::C2S::C2S_SimpleActionT> {
  static const C2S_UDP_Payload enum_value = C2S_UDP_Payload_SimpleAction;
};

struct C2S_UDP_PayloadUnion {
  C2S_UDP_Payload type;
  void *value;

  C2S_UDP_PayloadUnion() : type(C2S_UDP_Payload_NONE), value(nullptr) {}
  C2S_UDP_PayloadUnion(C2S_UDP_PayloadUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(C2S_UDP_Payload_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  C2S_UDP_PayloadUnion(const C2S_UDP_PayloadUnion &);
  C2S_UDP_PayloadUnion &operator=(const C2S_UDP_PayloadUnion &u)
    { C2S_UDP_PayloadUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  C2S_UDP_PayloadUnion &operator=(C2S_UDP_PayloadUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~C2S_UDP_PayloadUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = C2S_UDP_PayloadUnionTraits<RT>::enum_value;
    if (type != C2S_UDP_Payload_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, C2S_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver);
  ::flatbuffers::Offset<void> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *AsSimpleAction() {
    return type == C2S_UDP_Payload_SimpleAction ?
      reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *>(value) : nullptr;
  }
  const RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *AsSimpleAction() const {
    return type == C2S_UDP_Payload_SimpleAction ?
      reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *>(value) : nullptr;
  }
};

bool VerifyC2S_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, C2S_UDP_Payload type);
bool VerifyC2S_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct C2S_SimpleActionT : public ::flatbuffers::NativeTable {
  typedef C2S_SimpleAction TableType;
  uint32_t action_id = 0;
  std::unique_ptr<RiftForged::Networking::Shared::Vec3> target_pos{};
  C2S_SimpleActionT() = default;
  C2S_SimpleActionT(const C2S_SimpleActionT &o);
  C2S_SimpleActionT(C2S_SimpleActionT&&) FLATBUFFERS_NOEXCEPT = default;
  C2S_SimpleActionT &operator=(C2S_SimpleActionT o) FLATBUFFERS_NOEXCEPT;
};

struct C2S_SimpleAction FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef C2S_SimpleActionT NativeTableType;
  typedef C2S_SimpleActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACTION_ID = 4,
    VT_TARGET_POS = 6
  };
  uint32_t action_id() const {
    return GetField<uint32_t>(VT_ACTION_ID, 0);
  }
  const RiftForged::Networking::Shared::Vec3 *target_pos() const {
    return GetStruct<const RiftForged::Networking::Shared::Vec3 *>(VT_TARGET_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ACTION_ID, 4) &&
           VerifyField<RiftForged::Networking::Shared::Vec3>(verifier, VT_TARGET_POS, 4) &&
           verifier.EndTable();
  }
  C2S_SimpleActionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(C2S_SimpleActionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<C2S_SimpleAction> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_SimpleActionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct C2S_SimpleActionBuilder {
  typedef C2S_SimpleAction Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_action_id(uint32_t action_id) {
    fbb_.AddElement<uint32_t>(C2S_SimpleAction::VT_ACTION_ID, action_id, 0);
  }
  void add_target_pos(const RiftForged::Networking::Shared::Vec3 *target_pos) {
    fbb_.AddStruct(C2S_SimpleAction::VT_TARGET_POS, target_pos);
  }
  explicit C2S_SimpleActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<C2S_SimpleAction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<C2S_SimpleAction>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<C2S_SimpleAction> CreateC2S_SimpleAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t action_id = 0,
    const RiftForged::Networking::Shared::Vec3 *target_pos = nullptr) {
  C2S_SimpleActionBuilder builder_(_fbb);
  builder_.add_target_pos(target_pos);
  builder_.add_action_id(action_id);
  return builder_.Finish();
}

::flatbuffers::Offset<C2S_SimpleAction> CreateC2S_SimpleAction(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_SimpleActionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct Root_C2S_UDP_MessageT : public ::flatbuffers::NativeTable {
  typedef Root_C2S_UDP_Message TableType;
  RiftForged::Networking::UDP::C2S::C2S_UDP_PayloadUnion payload{};
};

struct Root_C2S_UDP_Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Root_C2S_UDP_MessageT NativeTableType;
  typedef Root_C2S_UDP_MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAYLOAD_TYPE = 4,
    VT_PAYLOAD = 6
  };
  RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type() const {
    return static_cast<RiftForged::Networking::UDP::C2S::C2S_UDP_Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const RiftForged::Networking::UDP::C2S::C2S_SimpleAction *payload_as_SimpleAction() const {
    return payload_type() == RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_SimpleAction ? static_cast<const RiftForged::Networking::UDP::C2S::C2S_SimpleAction *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffsetRequired(verifier, VT_PAYLOAD) &&
           VerifyC2S_UDP_Payload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
  Root_C2S_UDP_MessageT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Root_C2S_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Root_C2S_UDP_Message> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const RiftForged::Networking::UDP::C2S::C2S_SimpleAction *Root_C2S_UDP_Message::payload_as<RiftForged::Networking::UDP::C2S::C2S_SimpleAction>() const {
  return payload_as_SimpleAction();
}

struct Root_C2S_UDP_MessageBuilder {
  typedef Root_C2S_UDP_Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_payload_type(RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type) {
    fbb_.AddElement<uint8_t>(Root_C2S_UDP_Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root_C2S_UDP_Message::VT_PAYLOAD, payload);
  }
  explicit Root_C2S_UDP_MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Root_C2S_UDP_Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Root_C2S_UDP_Message>(end);
    fbb_.Required(o, Root_C2S_UDP_Message::VT_PAYLOAD);
    return o;
  }
};

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    RiftForged::Networking::UDP::C2S::C2S_UDP_Payload payload_type = RiftForged::Networking::UDP::C2S::C2S_UDP_Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  Root_C2S_UDP_MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline C2S_SimpleActionT::C2S_SimpleActionT(const C2S_SimpleActionT &o)
      : action_id(o.action_id),
        target_pos((o.target_pos) ? new RiftForged::Networking::Shared::Vec3(*o.target_pos) : nullptr) {
}

inline C2S_SimpleActionT &C2S_SimpleActionT::operator=(C2S_SimpleActionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(action_id, o.action_id);
  std::swap(target_pos, o.target_pos);
  return *this;
}

inline C2S_SimpleActionT *C2S_SimpleAction::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<C2S_SimpleActionT>(new C2S_SimpleActionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void C2S_SimpleAction::UnPackTo(C2S_SimpleActionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = action_id(); _o->action_id = _e; }
  { auto _e = target_pos(); if (_e) _o->target_pos = std::unique_ptr<RiftForged::Networking::Shared::Vec3>(new RiftForged::Networking::Shared::Vec3(*_e)); }
}

inline ::flatbuffers::Offset<C2S_SimpleAction> C2S_SimpleAction::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_SimpleActionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateC2S_SimpleAction(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<C2S_SimpleAction> CreateC2S_SimpleAction(::flatbuffers::FlatBufferBuilder &_fbb, const C2S_SimpleActionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const C2S_SimpleActionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _action_id = _o->action_id;
  auto _target_pos = _o->target_pos ? _o->target_pos.get() : nullptr;
  return RiftForged::Networking::UDP::C2S::CreateC2S_SimpleAction(
      _fbb,
      _action_id,
      _target_pos);
}

inline Root_C2S_UDP_MessageT *Root_C2S_UDP_Message::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<Root_C2S_UDP_MessageT>(new Root_C2S_UDP_MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Root_C2S_UDP_Message::UnPackTo(Root_C2S_UDP_MessageT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = payload_type(); _o->payload.type = _e; }
  { auto _e = payload(); if (_e) _o->payload.value = RiftForged::Networking::UDP::C2S::C2S_UDP_PayloadUnion::UnPack(_e, payload_type(), _resolver); }
}

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> Root_C2S_UDP_Message::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRoot_C2S_UDP_Message(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Root_C2S_UDP_Message> CreateRoot_C2S_UDP_Message(::flatbuffers::FlatBufferBuilder &_fbb, const Root_C2S_UDP_MessageT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const Root_C2S_UDP_MessageT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _payload_type = _o->payload.type;
  auto _payload = _o->payload.Pack(_fbb);
  return RiftForged::Networking::UDP::C2S::CreateRoot_C2S_UDP_Message(
      _fbb,
      _payload_type,
      _payload);
}

inline bool VerifyC2S_UDP_Payload(::flatbuffers::Verifier &verifier, const void *obj, C2S_UDP_Payload type) {
  switch (type) {
    case C2S_UDP_Payload_NONE: {
      return true;
    }
    case C2S_UDP_Payload_SimpleAction: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_SimpleAction *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyC2S_UDP_PayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyC2S_UDP_Payload(
        verifier,  values->Get(i), types->GetEnum<C2S_UDP_Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline void *C2S_UDP_PayloadUnion::UnPack(const void *obj, C2S_UDP_Payload type, const ::flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case C2S_UDP_Payload_SimpleAction: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_SimpleAction *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline ::flatbuffers::Offset<void> C2S_UDP_PayloadUnion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ::flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case C2S_UDP_Payload_SimpleAction: {
      auto ptr = reinterpret_cast<const RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *>(value);
      return CreateC2S_SimpleAction(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline C2S_UDP_PayloadUnion::C2S_UDP_PayloadUnion(const C2S_UDP_PayloadUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case C2S_UDP_Payload_SimpleAction: {
      value = new RiftForged::Networking::UDP::C2S::C2S_SimpleActionT(*reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void C2S_UDP_PayloadUnion::Reset() {
  switch (type) {
    case C2S_UDP_Payload_SimpleAction: {
      auto ptr = reinterpret_cast<RiftForged::Networking::UDP::C2S::C2S_SimpleActionT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = C2S_UDP_Payload_NONE;
}

inline const RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message *GetRoot_C2S_UDP_Message(const void *buf) {
  return ::flatbuffers::GetRoot<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(buf);
}

inline const RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message *GetSizePrefixedRoot_C2S_UDP_Message(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(buf);
}

inline bool VerifyRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(nullptr);
}

inline bool VerifySizePrefixedRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message>(nullptr);
}

inline void FinishRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRoot_C2S_UDP_MessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_Message> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT> UnPackRoot_C2S_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT>(GetRoot_C2S_UDP_Message(buf)->UnPack(res));
}

inline std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT> UnPackSizePrefixedRoot_C2S_UDP_Message(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<RiftForged::Networking::UDP::C2S::Root_C2S_UDP_MessageT>(GetSizePrefixedRoot_C2S_UDP_Message(buf)->UnPack(res));
}

}  // namespace C2S
}  // namespace UDP
}  // namespace Networking
}  // namespace RiftForged

#endif  // FLATBUFFERS_GENERATED_THISISAC2STEST_RIFTFORGED_NETWORKING_UDP_C2S_H_
