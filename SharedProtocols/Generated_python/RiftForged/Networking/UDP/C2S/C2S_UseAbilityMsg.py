# automatically generated by the FlatBuffers compiler, do not modify

# namespace: C2S

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class C2S_UseAbilityMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = C2S_UseAbilityMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsC2S_UseAbilityMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # C2S_UseAbilityMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # C2S_UseAbilityMsg
    def ClientTimestampMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # C2S_UseAbilityMsg
    def AbilityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # C2S_UseAbilityMsg
    def TargetEntityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # C2S_UseAbilityMsg
    def TargetPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from RiftForged.Networking.Shared.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def C2S_UseAbilityMsgStart(builder):
    builder.StartObject(4)

def Start(builder):
    C2S_UseAbilityMsgStart(builder)

def C2S_UseAbilityMsgAddClientTimestampMs(builder, clientTimestampMs):
    builder.PrependUint64Slot(0, clientTimestampMs, 0)

def AddClientTimestampMs(builder, clientTimestampMs):
    C2S_UseAbilityMsgAddClientTimestampMs(builder, clientTimestampMs)

def C2S_UseAbilityMsgAddAbilityId(builder, abilityId):
    builder.PrependUint32Slot(1, abilityId, 0)

def AddAbilityId(builder, abilityId):
    C2S_UseAbilityMsgAddAbilityId(builder, abilityId)

def C2S_UseAbilityMsgAddTargetEntityId(builder, targetEntityId):
    builder.PrependUint64Slot(2, targetEntityId, 0)

def AddTargetEntityId(builder, targetEntityId):
    C2S_UseAbilityMsgAddTargetEntityId(builder, targetEntityId)

def C2S_UseAbilityMsgAddTargetPosition(builder, targetPosition):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetPosition), 0)

def AddTargetPosition(builder, targetPosition):
    C2S_UseAbilityMsgAddTargetPosition(builder, targetPosition)

def C2S_UseAbilityMsgEnd(builder):
    return builder.EndObject()

def End(builder):
    return C2S_UseAbilityMsgEnd(builder)
